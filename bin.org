#+TITLE: bin
#+PROPERTY: header-args       :tangle-mode (identity #o755)
#+PROPERTY: header-args+      :mkdirp yes
#+PROPERTY: tangle-target-dir .files

* Local file clean-up (tidyup)
#+begin_src python :tangle (expand-tangle-target ".local/bin/tidyup")
  #!/usr/bin/env python3

  import os
  import time
  import datetime
  import shutil
  import glob
  from send2trash import send2trash

  TRASH_DIR = os.environ['HOME'] + '/.local/share/Trash/files/'
  TIDY_DIRS = filter(lambda x: os.path.isdir(x),
                     list(map(lambda x: os.path.join(os.environ['HOME'], x), ['tmp', 'Downloads']))
                     + glob.glob(os.path.join(os.environ['HOME'], 'var/tmp/*')))

  MAX_STAY_DAYS_IN_TRASH = 7
  MAX_NEGLECTED_DAYS_IN_TIDY_DIRS = 14

  suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']
  def humansize(nbytes):
      i = 0
      while nbytes >= 1024 and i < len(suffixes)-1:
          nbytes /= 1024.
          i += 1
      f = ('%.2f' % nbytes).rstrip('0').rstrip('.')
      return '%s %s' % (f, suffixes[i])

  def get_size(start_path = '.'):
      total_size = 0
      for dirpath, dirnames, filenames in os.walk(start_path):
          for f in filenames:
              fp = os.path.join(dirpath, f)
              # skip if it is symbolic link
              if not os.path.islink(fp):
                  total_size += os.path.getsize(fp)

      return total_size

  print('{0} starts at {1}\n'.format(os.path.basename(__file__),
                                     datetime.datetime.now()))

  NOW = time.time()

  print('--{0} starts to move files neglected more than {1} days to trash box.\n'
        .format(os.path.basename(__file__),
                MAX_NEGLECTED_DAYS_IN_TIDY_DIRS))

  tidyup_lists = map(lambda x: map(lambda y: os.path.join(x, y), os.listdir(x)), TIDY_DIRS)
  for a_file in [item for sublist in tidyup_lists for item in sublist]:
      atime = os.lstat(a_file).st_atime
      delta_atime = datetime.timedelta(seconds=(NOW - atime))
      if delta_atime > datetime.timedelta(days = MAX_NEGLECTED_DAYS_IN_TIDY_DIRS):
          send2trash(a_file)
          print('moveed to trash: {}'.format(a_file))

  print('--{0} starts to remove files staying more than {1} days in trash box.'
        .format(os.path.basename(__file__),
                MAX_STAY_DAYS_IN_TRASH))

  rbytes_total = 0
  for trash_file in map(lambda fname: os.path.join(TRASH_DIR, fname), os.listdir(TRASH_DIR)):
      lstat = os.lstat(trash_file)
      delta_time = datetime.timedelta(seconds=(NOW - max(lstat.st_atime, lstat.st_ctime)))
      if delta_time > datetime.timedelta(days = MAX_STAY_DAYS_IN_TRASH):
          method = 'removed'
          fname = os.path.basename(trash_file)
          if os.path.islink(trash_file):
              method = 'unlinked'
              fsize = 'N/A'
              os.unlink(trash_file)
          elif os.path.isfile(trash_file):
              rbytes = os.path.getsize(trash_file)
              rbytes_total += rbytes
              fsize = humansize(rbytes)
              os.remove(trash_file)
          elif os.path.isdir(trash_file):
              rbytes = get_size(trash_file)
              rbytes_total += rbytes
              fsize = humansize(rbytes)
              fname += '/'
              shutil.rmtree(trash_file)
          print('{}: [{:>9}] {}'.format(method, fsize, fname))

  print('--{0} removes [{1}] in total.\n'
        .format(os.path.basename(__file__),
                humansize(rbytes_total)))

  print('{0} ends at {1}\n'.format(os.path.basename(__file__),
                                   datetime.datetime.now()))
#+end_src

* Database back-up script
- PostgreSQL
#+begin_src bash :tangle (expand-tangle-target ".local/bin/postgres_backup")
  #!/usr/bin/env bash

  # Usage: $ postgres_backup <db_name> <backup_dir>

  POSTGRES_DBNAME=$1
  BACKUP_DIR=$2
  DATE="$(date +%Y%m%d_%H%M)"

  pg_dump --format=custom ${POSTGRES_DBNAME} > ${BACKUP_DIR}/${DATE}_${POSTGRES_DBNAME}.custom || exit 1

  exit 0
#+end_src

* Snapshots taking
- snapshot.sh
  #+begin_src shell :tangle (expand-tangle-target ".local/bin/snapshot.sh")
    #!/usr/bin/env bash

    OPT="-aPh"
    LINK="--link-dest=../last/"
    DEST="ns01:~/share/backups"
    DATETIME=`date "+%Y%m%d-%H%M"`
    BTRFS_MNT="${HOME}/mnt/ssd01"

    ssh -q -o BatchMode="yes" -o ConnectTimeout=10 ns01 "(cd ~/share/backups; mkdir -p pc01 sv04; exit)" || exit 1

    # take a snapshot for pc01
    if ssh ns01 "[ -h ~/share/backups/pc01/last ]"; then
      rsync -aPhrv $LINK --exclude-from=${HOME}/.config/rsync/exclude_pc01.txt ${HOME}/ ${DEST}/pc01/${DATETIME}
      ssh ns01 "(cd share/backups/pc01; unlink last; ln -s ${DATETIME} last)"
    else
      rsync -aAXrv --exclude-from=${HOME}/.config/rsync/exclude_pc01.txt ${HOME}/ ${DEST}/pc01/${DATETIME}
      ssh ns01 "(cd share/backups/pc01; ln -s ${DATETIME} last)"
    fi

    # take a snapshot for sv04
    if mountpoint ${HOME}/mnt/sv04 >/dev/null 2>&1; then
      if ssh ns01 "[ -h ~/share/backups/sv04/last ]"; then
        rsync -aPhrv $LINK --exclude-from=${HOME}/.config/rsync/exclude_sv04.txt ${HOME}/mnt/sv04/ ${DEST}/sv04/${DATETIME}
        ssh ns01 "(cd share/backups/sv04; unlink last; ln -s ${DATETIME} last)"
      else
        rsync -aAXrv --exclude-from=${HOME}/.config/rsync/exclude_sv04.txt ${HOME}/mnt/sv04/ ${DEST}/sv04/${DATETIME}
        ssh ns01 "(cd share/backups/sv04; ln -s ${DATETIME} last)"
      fi
    fi

    # take btrfs subvol snapshots
    mkdir -pv "${BTRFS_MNT}/backups/${DATETIME}"
    subvs=($(ls -I backups ~/mnt/ssd01/))
    for subv in "${subvs[@]}"; do
      btrfs subvolume snapshot "${BTRFS_MNT}/${subv}" "${BTRFS_MNT}/backups/${DATETIME}/${subv}"
    done
  #+end_src
- rsync exclude file for pc01
  #+begin_src conf :tangle (expand-tangle-target ".config/rsync/exclude_pc01.txt") :tangle-mode (identity #o644)
    + var
    + var/log
    + var/log/**
    - var/lib/dash
    + var/lib
    + var/lib/**
    + work
    + work/**
    + git
    + git/**
    - *
  #+end_src
- rsync exclude file for sv04
  #+begin_src conf :tangle (expand-tangle-target ".config/rsync/exclude_sv04.txt") :tangle-mode (identity #o644)
    + var
    + var/backup
    + var/backup/**
    - *
  #+end_src
