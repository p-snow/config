#+TITLE: .emacs.d files
#+PROPERTY: header-args       :tangle-mode (identity #o444)
#+PROPERTY: header-args+      :mkdirp yes
#+PROPERTY: tangle-target-dir .files

#+STARTUP: overview

* init process
These process must be evaluated beforehand.

** use-package

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/00-early-init.el")
  ;; install straight.el
  (setq straight-recipes-gnu-elpa-use-mirror t)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 4))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; install use-package via straight.el
  (straight-use-package 'use-package)

  (use-package use-package
    :custom
    (use-package-ensure-function 'straight-use-package-ensure-function))

  ;; install dependency packages for use-package using straight.el
  (use-package diminish :straight t)
  (use-package delight :straight t)
  (use-package use-package-ensure-system-package :straight t)
#+end_src
** include libraries

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/00-early-init.el")
  (require 'cl-lib)
#+end_src
* basic tweaks
** language
[[info:emacs#Language Environments][emacs#Language Environments]]

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  ;; language and locale
  (set-language-environment "Japanese")
  (setq system-time-locale "C")

  ;; coding system
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix)

  ;; prefer-coding-system take effect equally to follows
  (set-buffer-file-coding-system 'utf-8-unix)
  (set-file-name-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (setq locale-coding-system 'utf-8-unix)
#+end_src
** visual facets

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  ;; do not use basic GUI facets
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)

  ;; fringe is preferably as thin as possible
  (set-fringe-mode 10)

  ;; do not use visual bell
  (setf visible-bell nil)

  ;; conceal distractions at startup
  (setf initial-scratch-message "")
  (setf inhibit-startup-screen t)
#+end_src
** file hnadling
File-related tweaks including [[info:emacs#Customize Save][Customizing Saving of Files]].

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (use-package files
    :custom
    (mode-require-final-newline 'visit-save)
    (make-backup-files nil)
    (delete-auto-save-files t)
    (enable-remote-dir-locals t)
    :config
    (setq delete-by-moving-to-trash t))

  (use-package saveplace
    :custom
    (save-place-version-control t)
    :config
    (save-place-mode 1))

  (auto-compression-mode 1)

  (setq auto-save-interval 100)
  (setq auto-save-timeout 10)
#+end_src
** modifier keys

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (cond
   ((string= window-system "x")
    (setf x-alt-keysym  'alt
          x-meta-keysym 'meta))
   ((string= window-system "ns")
    ;; IME inline patch
    (setf mac-use-input-method-on-system nil)
    (setf mac-control-modifier       'control
          mac-command-modifier       'meta
          mac-option-modifier        'super
          mac-right-option-modifier  'alt
          mac-right-control-modifier 'super
          mac-function-modifier      'hyper)))
#+end_src
** mark/region
Variables need to be carefully tweaked with [[info:emacs#Mark][manual]].

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  ;; (setq set-mark-command-repeat-pop t)
  (setf mark-ring-max 32)
  (setf highlight-nonselected-windows t)

  ;; text in region will be deleted
  (delete-selection-mode t)
#+end_src

** minibuffer
[[help:savehist-mode][savehist-mode]] saves minibuffer history and additionals.

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (savehist-mode 1)

  (setf history-length 1500)
  (setf history-delete-duplicates t)

  ;; allow y/n answer for an either-or selection
  (fset 'yes-or-no-p 'y-or-n-p)

  (add-hook 'minibuffer-setup-hook 'my/minibuffer-setup-function)

  (defun my/minibuffer-setup-function ()
    ;; disable input method in mini buffer
    (when current-input-method
      (deactivate-input-method))
    ;; decrease font size to 90% in minibuffer
    (setq-local face-remapping-alist '((default :height 0.9))))

  (bind-keys :map minibuffer-local-map
             ("C-M-n" . counsel-minibuffer-history)
             ("C-M-y" . counsel-yank-pop))

  (setf enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
#+end_src

** displaying

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (setf scroll-step 1)

  (setf text-scale-mode-step 1.0625)

  ;; let the cursor blinking
  (setf blink-cursor-blinks 15)
  (setf blink-cursor-delay 0.7)
  (setf blink-cursor-interval 0.35)
  (blink-cursor-mode 1)

  ;; use emacs in full screen mode
  (when (member (window-system) '(x ns w32))
    (set-frame-parameter nil 'fullscreen 'fullboth))
#+end_src

** text handling

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (setq-default fill-column 80)

  ;; suppress curved quotes in docstring (for emacs25)
  (setf text-quoting-style 'straight)
#+end_src

** indent
customization for [[info:emacs#Indentation][indentation]]
See also [[id:4a58219c-74dd-4135-b56d-876b0db2cd83][aggressive-indent-mode]]

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  ;; use spaces instead of a horizontal tab
  (setq-default indent-tabs-mode nil)

  (custom-set-variables '(tab-always-indent 'complete))
  (electric-indent-mode 1)
#+end_src

** whitespace
[[info:emacs#Useless Whitespace][emacs#Useless Whitespace]]

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (add-hook 'before-save-hook #'delete-trailing-whitespace)

  (use-package whitespace
    :diminish ((global-whitespace-mode . "Ws")
               (whitespace-mode . "ws"))
    :custom
    (whitespace-style
     '(face trailing tabs tab-mark spaces space-mark empty))
    (whitespace-space-regexp "\\(\x3000+\\)")
    (whitespace-trailing-regexp "\\([ \t\u00A0]+\\)$")
    (whitespace-display-mappings
     '((space-mark ?\x3000 [?\u2423])
       (tab-mark   ?\t   [?\u00BB ?\t])))
    :config
    (global-whitespace-mode -1))
#+end_src

** performance

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (setq gc-cons-threshold (* 10 gc-cons-threshold))
  (setq message-log-max 10000)
  (setq shell-command-switch "-c")
  (setq undo-outer-limit 64000000)

  (setq-default bidi-display-reordering nil)

  (setq next-screen-context-lines 2)
#+end_src

** customization

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (setf custom-file
        (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** killing

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (custom-set-variables '(yank-pop-change-selection t))
#+end_src

** mouse
I prefer to rid my emacs experience of mouse as least as possible.

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (use-package mouse
    :custom
    (mouse-1-click-follows-link nil)
    (mouse-highlight nil)
    :config
    (mouse-wheel-mode 0))
#+end_src
** key (re)bindings

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (substitute-key-definition 'upcase-region
                             'upcase-dwim
                             global-map)

  (substitute-key-definition 'downcase-region
                             'downcase-dwim
                             global-map)

  (global-set-key (kbd "C-x C-c") #'capitalize-dwim)

  ;; suppress the occurence of prompt in (up|down)case-region prompt in
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  (global-set-key (kbd "C-z") #'repeat)
#+end_src
** display

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (defvar my-default-pixel-width 2560 "Default display width in pixel.")
  (defmacro my-adjust-font-size (original)
    "Adjust original font size to fit in display."
    `(truncate (* ,original (/ (float (x-display-pixel-width))
                               ,my-default-pixel-width))))


  (create-fontset-from-ascii-font "TakaoGothic" nil "default")
  (create-fontset-from-ascii-font "TakaoExGothic" nil "variable")
  (create-fontset-from-ascii-font "Gen Shin Gothic Monospace Light" nil "dense")

  (set-face-attribute 'default
                      nil
                      :font "fontset-default"
                      :height (my-adjust-font-size 660))
  (set-face-attribute 'variable-pitch
                      nil
                      :font "fontset-variable"
                      :height (my-adjust-font-size 660))

  (use-package face-remap
    :diminish buffer-face-mode
    :config
    (buffer-face-mode 1))

  (use-package modus-themes
    :straight (modus-themes
               :host github
               :repo "protesilaos/modus-themes"
               :branch "main")
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil
          modus-themes-region 'no-extend)
    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    (modus-themes-load-vivendi))

  (with-eval-after-load 'elfeed
    (set-face-foreground
     'elfeed-search-title-face "#4D4D4D")
    (set-face-foreground
     'elfeed-search-unchecked-title-face "cornflowerblue")
    (set-face-foreground
     'elfeed-search-checked-title-face "darkblue"))
#+end_src

* built-in packages
** auto revert
[[info:emacs#Auto Revert][Auto Revert]]: Keeping buffers automatically up-to-date.

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (use-package autorevert
    :diminish (global-auto-revert-mode auto-revert-mode)
    :custom
    (auto-revert-verbose nil)
    (global-auto-revert-non-file-buffers t)
    :config
    (global-auto-revert-mode 1))
#+end_src
** uniquify
[[info:emacs#Uniquify][Uniquify]] makes buffer names unique.

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (use-package uniquify
    :custom
    (uniquify-buffer-name-style 'forward)
    ;; (uniquify-ignore-buffers-re "*[^*]+*")
    )
#+end_src
** recentf
[[info:emacs#File Conveniences][emacs#File Conveniences]]

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (use-package recentf
    :custom
    (recentf-exclude '(".gz" ".xz" ".zip"))
    (recentf-max-saved-items 200)
    (recentf-max-menu-items 15)
    (recentf-auto-cleanup "1:23am")
    :config
    ;; (recentf-load-list)
    (recentf-mode 1))
#+end_src
* handy functions
** power management
Shut down emacs automatically when remaining power of laptop PC lower than [[help:battery-load-low][battery-load-low]]
to avoid accidental data loss.

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/init.el")
  (require 'battery)

  (run-with-timer 60 60 #'kill-emacs-auto)

  (defun kill-emacs-auto ()
    "Kill Emacs if remaining machine power lower than `battery-load-low'."
    (let* ((data (and battery-status-function (funcall battery-status-function)))
           (percentage (car (read-from-string (cdr (assq ?p data)))))
           (power (cdr (assq ?L data))))
      (when (and (< percentage battery-load-low)
                 (string= power "BAT"))
        (save-buffers-kill-emacs t))))
#+end_src
* external packages            :elfeed:soft_update:prime:
#+CALL: release-feed(github-url="https://github.com/org-roam/org-roam")

** org-mode

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/org.el")
  (use-package org
    :straight t
    :defer t
    :diminish ((org-src-mode . "os"))
    :mode (("\\.org$" . org-mode))
    :interpreter (("org" . org-mode))
    :init
    (add-to-list 'load-path (concat (file-name-as-directory user-emacs-directory) "straight/repos/org/lisp"))
    (add-to-list 'load-path (concat (file-name-as-directory user-emacs-directory) "straight/repos/org/contrib/lisp"))
    (defface org-buffer `((t . (:font "fontset-default"
                                      :height ,(my-adjust-font-size 655))))
      "Default face in org mode."
      :group 'org-faces)
    (defvar org-warning-keyword-0 "UG" "TODO keyword acronym standing for 'UrGent'")
    (defvar org-todo-keyword-0 "TD" "TODO keyword acronym standing for 'To Do'")
    (defvar org-todo-keyword-1 "GO" "TODO keyword acronym standing for 'Get On'")
    (defvar org-todo-keyword-2 "IP" "TODO keyword acronym standing for 'In Progressn'")
    (defvar org-todo-keyword-3 "AC" "TODO keyword acronym standing for 'doABle'")
    (defvar org-todo-keyword-4 "SD" "TODO keyword acronym standing for 'SomeDay'")
    (defvar org-done-keyword-0 "DN" "TODO keyword acronym standing for 'DoNe'")
    (defvar org-done-keyword-1 "CX" "TODO keyword acronym standing for 'Cancel'")
    (defvar org-done-keyword-2 "PD" "TODO keyword acronym standing for 'PenDing'")
    :custom
    (org-directory (expand-file-name "~/org"))
    (org-special-ctrl-a/e t)
    (org-adapt-indentation nil)
    (org-hide-emphasis-markers t)
    (org-bookmark-names-plist nil)
    ;; inline image
    (org-startup-with-inline-images t)
    (org-display-remote-inline-images 'cache)
    ;; do not split line at point
    (org-M-RET-may-split-line '((default . nil)))
    :config
    (require 'org-habit)
    (require 'org-mu4e)

    ;; local key bindings
    (bind-keys :map org-mode-map
               ("C-j"     . org-return)
               ("C-m"     . org-return-indent)
               ("M-j"     . org-meta-return)
               ("C-S-p"   . org-previous-item)
               ("C-S-n"   . org-next-item)
               ("C-S-u"   . org-up-element)
               ("C-$"     . org-down-element)
               ("C-<"     . org-previous-link)
               ("C->"     . org-next-link)
               ("C-c @"   . org-mark-element)
               ("C-c C-SPC" . org-mark-subtree)
               ("C-c D v" . org-download-video-link-at-point)
               ("C-c D a" . org-download-audio-link-at-point)
               ("C-c D =" . org-show-media-duration-at-point)
               ("C-c !"   . org-readable)
               ("C-c C-a" . nil)
               ("C-,"     . nil)
               ("M-h"     . nil)
               ("C-M-m"   . hydra-lazy-control/body))

    ;; attach
    (setq org-attach-preferred-new-method nil)

    ;; link
    (setq org-confirm-elisp-link-function nil) ; do not confirm when execute elisp
    (org-link-set-parameters
     "src" :follow #'org-babel-ref-resolve)
    (defun org-open-at-point-link ()
      "This function is responsible for org links when user calls `org-open-at-point'."
      (let* ((context (org-element-lineage
                       (org-element-context)
                       '(link)
                       t))
             (type (org-element-property :type context))
             (path (org-element-property :path context))
             (app (org-element-property :application context))
             (search-option (org-element-property :search-option context)))
        (if (stringp type)
            (cond
             ((string-match-p "https?" type)
              (let ((url-pos (split-location-uri (org-link-unescape (concat type ":" path)))))
                (cl-case (prefix-numeric-value current-prefix-arg)
                  (16 (browse-url-default-browser (car url-pos)))
                  (4 (eww-browse-url (car url-pos)))
                  (t (open-url (car url-pos) (cadr url-pos))))
                t))
             ((string= type "file")
              (let ((line-search (cond ((not search-option) nil)
                                       ((string-match-p "\\`[0-9]+\\'" search-option)
                                        (list (string-to-number search-option)))
                                       (t (list nil search-option)))))
                (apply #'my/org-open-file
                       path
                       (cond
                        ((equal app "sys") 'system)
                        ((equal app "emacs") 'emacs)
                        (t nil))
                       line-search))
              t))
          (open-thing-at-point))))
    (add-to-list 'org-open-at-point-functions 'org-open-at-point-link)
    (setq org-file-apps
          '((t . (lambda (file-path link-string)
                   (my/view-file file-path)))))
    (org-add-link-type
     "sudo"
     (lambda (cmd)
       "Run CMD with sudo."
       (shell-command
        (concat "echo " (shell-quote-argument (read-passwd "Password? "))
                " | sudo -S " cmd))))

    ;; basic
    (setq org-hide-leading-stars t)
    (setq org-comment-string "####")
    (setq org-pretty-entities t)
    (setq org-use-sub-superscripts '{}) ; use _{}/^{} for sub/super script

    ;; display
    (add-hook 'org-mode-hook
              (lambda ()
                (whitespace-mode 1)
                (buffer-face-set 'org-buffer)
                (setq-local truncate-lines t)))

    ;; tag/property
    (setq org-use-tag-inheritance "ARCHIVE")
    (setq org-tags-column -57)
    (setq org-global-properties
          '(("Effort_ALL". "0 0:10 0:20 0:30 1:00 1:30 2:00 3:00 4:00 6:00 8:00")))
    (setq org-use-property-inheritance "TIMELIMIT.*")
    (setq org-highest-priority ?A)
    (setq org-lowest-priority ?Z)
    (setq org-default-priority ?E)

    ;; todo
    (setq org-enforce-todo-dependencies t)
    (setq org-todo-keywords
          `((sequence ,(format "%s(t/!)" org-todo-keyword-0)
                      ,(format "%s(u/!)" org-warning-keyword-0)
                      ,(format "%s(g/!)" org-todo-keyword-1)
                      ,(format "%s(i/!)" org-todo-keyword-2)
                      "|"
                      ,(format "%s(d/@)" org-done-keyword-0)
                      ,(format "%s(x/@)" org-done-keyword-1)
                      ,(format "%s(p/@)" org-done-keyword-2))
            (sequence ,(format "%s(a/!)" org-todo-keyword-3)
                      "|"
                      ,(format "%s(d/@)" org-done-keyword-0)
                      ,(format "%s(x/@)" org-done-keyword-1)
                      ,(format "%s(p/@)" org-done-keyword-2))
            (sequence ,(format "%s(t/!)" org-todo-keyword-0)
                      ,(format "%s(s/!)" org-todo-keyword-4)
                      "|"
                      ,(format "%s(x/@)" org-done-keyword-1)
                      ,(format "%s(p/@)" org-done-keyword-2))))
    (setq org-todo-keyword-faces
          `((,org-warning-keyword-0 . "red1")
            (,org-todo-keyword-0    . "green1")
            (,org-todo-keyword-1    . "DeepPink1")
            (,org-todo-keyword-2    . "DodgerBlue1")
            (,org-todo-keyword-3    . "chocolate")
            (,org-todo-keyword-4    . "SpringGreen")
            (,org-done-keyword-0    . "gray30")
            (,org-done-keyword-1    . "dark gray")
            (,org-done-keyword-2    . "sea green")))
    (add-hook  'org-after-todo-state-change-hook
               (lambda ()
                 (save-excursion
                   (let* ((element (org-element-at-point))
                          (todo-state (org-get-todo-state))
                          (tags (org-get-tags))
                          (priority (org-element-property :priority element))
                          (category (org-entry-get (point) "CATEGORY"))
                          (style (org-entry-get (point) "STYLE")))
                     ;; remove priority level when the to-do state is changed to DN|CX|PD
                     (when (and
                            (s-matches? (format "%1$s\\|%2$s\\|%3$s"
                                                org-done-keyword-0
                                                org-done-keyword-1
                                                org-done-keyword-2)
                                        todo-state)
                            (bound-and-true-p priority))
                       (org-priority ? ))
                     ;; remove DN state if CATEGORY of the entry is "Cyclic"
                     (when (and (string= category "Cyclic")
                                (string= todo-state org-done-keyword-0)
                                (not (member "web" tags))
                                (not (string= style "habit")))
                       (org-todo ""))))))
    (add-hook 'org-after-todo-statistics-hook
              (lambda (n-done n-not-done)
                "Switch project entry to DONE when all subentries are done, to empty otherwise."
                (when (member "project" (org-get-tags))
                  (org-todo (if (= n-not-done 0)
                                (prog1 org-done-keyword-0
                                  (org-add-planning-info 'closed "now"))
                              "")))))

    ;; time
    (setq org-duration-format
          '(("d" . nil)
            (special . h:mm)))

    ;; time-stamp
    (setq org-time-stamp-custom-formats
          '("<%m-%d %a>" . "<%H:%M>"))
    (defun org-display-iso-week-at-point ()
      "Display ISO 8601 week number correspoinds to time stamp at point."
      (interactive)
      (let ((ts (org-timestamp-at-point)))
        (when ts
          (message "W%s" (format-time-string "%V" (org-read-date nil t ts nil))))))
    (defun org-timestamp-at-point ()
      "Return time stamp string at point."
      (let ((ts-bound (org-in-regexp (org-re-timestamp 'all))))
        (when ts-bound
          (buffer-substring (car ts-bound) (cdr ts-bound)))))

    ;; logging
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-log-states-order-reversed t)
    (setq org-reverse-note-order nil)
    (add-hook 'org-log-buffer-setup-hook
              (lambda ()
                (setq skk-dcomp-activate 'eolp)
                (setq skk-dcomp-multiple-activate nil)))

    ;; clock table
    ;;; work around for the bug in emacs 25
    (defalias 'calendar-absolute-from-iso 'calendar-iso-to-absolute)

    ;; image
    (setq org-image-actual-width 100)

    ;; structure template
    (add-to-list 'org-structure-template-alist (cons "sh" "src shell"))
    (add-to-list 'org-structure-template-alist (cons "el" "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist (cons "py" "src python"))

    ;; src
    (setq org-src-window-setup 'current-window))
#+end_src

** org-agenda

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/org.el")
  (use-package org-agenda
    :after (org org-ql my/org-archive)
    :bind (:map org-agenda-mode-map
                ("C-j" . org-agenda-switch-to)
                ("T" . counsel-org-tag-agenda)
                ("M" . org-agenda-month-view))
    :hook
    (org-agenda-mode . (lambda ()
                         (buffer-face-set 'org-buffer)
                         (delete-other-windows)
                         (org-agenda-to-appt t '((category "appt")))))
    :custom
    (org-agenda-start-on-weekday 1)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-include-diary t)
    ;; following three are for fast agenda view building
    (org-agenda-inhibit-startup t)
    (org-agenda-dim-blocked-tasks nil)
    (org-agenda-use-tag-inheritance nil)
    (org-agenda-files (directory-files (expand-file-name "agenda" org-directory) t "\.org$"))
    (org-agenda-prefix-format '((agenda   . "%?-12t% s")
                                (timeline . "  %s")
                                (todo     . " ")
                                (tags     . " ")
                                (search   . " ")))
    (org-agenda-custom-commands
     `(("a" "Week-agenda"
        agenda ""
        ((org-agenda-skip-function
          (lambda ()
            ;; skip entry which has 'web' tag even if it has deadline
            (and (save-excursion
                   (let ((tags (org-get-tags)))
                     (member "web" tags)))
                 (progn (outline-next-heading) (point)))))))
       ("r" . "Search for all record files")
       ("rs" "Entries containing search words entry or headline."
        search ""
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(time-down))))
       ("rm" "Match a TAGS/PROP/TODO query in record file"
        tags ""
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(time-down))))
       ("o" . "someday list")
       ("om" "someday to craft"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags-expanded "AC_CRAFT"))
                              ((org-ql-block-header "Someday to craft"))))
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(priority-down))))
       ("op" "someday to purchase"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags "ac_purchase"))
                              ((org-ql-block-header "Someday to purchase"))))
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(priority-down))))
       ("oc" "someday to cook"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags "ac_cook"))
                              ((org-ql-block-header "Someday to cook"))))
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(priority-down))))
       ("O" "all someday entries"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags-expanded "AC_CRAFT"))
                              ((org-ql-block-header "Someday to craft")))
         (org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags "ac_purchase"))
                              ((org-ql-block-header "Someday to purchase")))
         (org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags "ac_cook"))
                              ((org-ql-block-header "Someday to cook")))
         (org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (not (tags-expanded "ac_purchase" "ac_cook" "AC_CRAFT")))
                              ((org-ql-block-header "Someday things"))))
        ((org-agenda-files my/org-archive-files)))
       ("l" "Log entries in a week"
        agenda ""
        ((org-agenda-span (if (equal current-prefix-arg '(4))
                              'day 'week))
         (org-agenda-start-with-log-mode t)
         (org-agenda-include-inactive-timestamps nil)
         (org-agenda-include-diary t)
         (org-agenda-sorting-strategy
          '(time-up
            deadline-up
            todo-state-up
            priority-down))))
       ("L" "Log entry timeline on today with default org-agenda-prefix-format"
        agenda ""
        ((org-agenda-prefix-format (eval (car (get 'org-agenda-prefix-format 'standard-value))))
         (org-agenda-span (if (equal current-prefix-arg '(4))
                              'day 'week))
         (org-agenda-start-with-log-mode t)
         (org-agenda-include-inactive-timestamps nil)
         (org-agenda-include-diary t)
         (org-agenda-sorting-strategy
          '(time-up
            deadline-up
            todo-state-up
            priority-down))))
       ;; KEEP IN MIND
       ;; invoking `org-clock-sum-all' is required before showing effort table
       ("e" . "Effort table")
       ("ei" "today"
        ((org-ql-search-block `(or (todo ,org-warning-keyword-0)
                                   (todo ,org-todo-keyword-2)
                                   (and (clocked :on today)
                                        (or (todo) (done))
                                        (not (habit))
                                        (not (tags "web"))))
                              ((org-ql-block-header "Today's task"))))
        ((org-agenda-overriding-header "Today's Task")
         (org-overriding-columns-format "%26ITEM(Task) %Effort(Effort){:} %CLOCKSUM_T(Today){:} %CLOCKSUM(Total)")
         (org-agenda-view-columns-initially t)
         (org-agenda-sorting-strategy '(todo-state-up priority-down deadline-up))))
       ("eg" "this week"
        ((org-ql-search-block `(or (todo ,org-warning-keyword-0)
                                   (todo ,org-todo-keyword-1)
                                   (todo ,org-todo-keyword-2))
                              ((org-ql-block-header "This Week's task"))))
        ((org-agenda-overriding-header "This Week's Task")
         (org-overriding-columns-format "%26ITEM(Task) %Effort(Effort){:} %CLOCKSUM_T(Today){:} %CLOCKSUM(Total)")
         (org-agenda-view-columns-initially t)
         (org-agenda-sorting-strategy '(todo-state-up priority-down deadline-up))))
       ("ed" "done task"
        ((org-ql-search-block `(or (todo ,org-done-keyword-0)
                                   (todo ,org-done-keyword-1)
                                   (todo ,org-done-keyword-2))
                              ((org-ql-block-header "Done task"))))
        ((org-agenda-overriding-header "Done Task")
         (org-overriding-columns-format "%26ITEM(Task) %Effort(Effort){:} %CLOCKSUM(Total){:}")
         (org-agenda-view-columns-initially t)
         (org-agenda-sorting-strategy '(todo-state-up priority-down deadline-up))))
       ("i" "Today's agenda"
        ((todo "Today's agenda"
               ((org-agenda-sorting-strategy '(priority-up))))
         (org-ql-search-block `(heading ,(format-time-string "%Y-%m-%d %A"))
                              ((org-agenda-files `(,(my/org-archive-file)))
                               (org-ql-block-header "Today's tree node")))
         (org-ql-search-block `(or (todo ,org-warning-keyword-0)
                                   (todo ,org-todo-keyword-2))
                              ((org-ql-block-header "Today's task")))
         (org-ql-search-block `(and (planning :on today)
                                    (not (todo ,org-todo-keyword-2
                                               ,org-done-keyword-0
                                               ,org-done-keyword-1
                                               ,org-done-keyword-2))
                                    (not (tags "web"))
                                    (not (habit)))
                              ((org-ql-block-header "Scheduled/Deadlined on today")))
         (org-ql-search-block `(and (habit)
                                    (todo ,org-todo-keyword-0)
                                    (scheduled :to today)
                                    (not (tags "bad_habit"))
                                    (not (tags-inherited "ARCHIVE")))
                              ((org-ql-block-header "Habits to take")))
         (org-ql-search-block `(and (ts-active :on today)
                                    (not (or (todo ,org-todo-keyword-2)
                                             (habit) (done))))
                              ((org-ql-block-header "Today's common event")))
         (org-ql-search-block '(and (done)
                                    (closed :on today))
                              ((org-ql-block-header "Completed tasks on today")))))
       ("g" "This Week's agenda"
        ((org-ql-search-block `(heading ,(format-time-string "%G-W%V"))
                              ((org-agenda-files `(,(my/org-archive-file)))
                               (org-ql-block-header "This week's tree")))
         (org-ql-search-block `(or (todo ,org-todo-keyword-1))
                              ((org-ql-block-header "This week's tasks")))
         (org-ql-search-block `(or (todo ,org-warning-keyword-0)
                                   (todo ,org-todo-keyword-2))
                              ((org-ql-block-header "Today's tasks")))
         (org-ql-search-block `(and (planning :from 0 :to 6)
                                    (not (todo ,org-todo-keyword-2
                                               ,org-done-keyword-0
                                               ,org-done-keyword-1
                                               ,org-done-keyword-2))
                                    (not (tags "web"))
                                    (not (habit)))
                              ((org-ql-block-header "Scheduled/Deadlined this week")))
         (org-ql-search-block `(and (and (ts-active :from 0 :to 6)
                                         (not (deadline))
                                         (not (scheduled))
                                         (not (closed)))
                                    (not (or (todo ,org-todo-keyword-1
                                                   ,org-todo-keyword-2)
                                             (done))))
                              ((org-ql-block-header "This week's common event"))))
        ((org-agenda-sorting-strategy
          '(todo-state-up priority-down deadline-up))))
       ("c" "actionable thing list"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-3)
                                    (not (deadline :to -1)))
                              ((org-ql-block-header "Doable things"))))
        ((org-agenda-sorting-strategy
          '(todo-state-up priority-down deadline-up))))
       ("n" "Anniversary"
        ((org-ql-search-block `(heading ,(let ((week-ago (decode-time)))
                                           (cl-incf (nth 3 week-ago) -7)
                                           (format-time-string "%Y-%m-%d %A"
                                                               (apply #'encode-time
                                                                      week-ago))))
                              ((org-ql-block-header "One week ago")))
         (org-ql-search-block `(heading ,(let ((month-ago (decode-time)))
                                           (cl-incf (nth 4 month-ago) -1)
                                           (format-time-string "%Y-%m-%d %A"
                                                               (apply #'encode-time
                                                                      month-ago))))
                              ((org-ql-block-header "One month ago")))
         (org-ql-search-block `(heading ,(let ((half-a-year-ago (decode-time)))
                                           (cl-incf (nth 4 half-a-year-ago) -6)
                                           (format-time-string "%Y-%m-%d %A"
                                                               (apply #'encode-time
                                                                      half-a-year-ago))))
                              ((org-ql-block-header "Half a year ago")))
         (org-ql-search-block `(heading ,(let ((year-ago (decode-time)))
                                           (cl-incf (nth 5 year-ago) -1)
                                           (format-time-string "%Y-%m-%d %A"
                                                               (apply #'encode-time
                                                                      year-ago))))
                              ((org-ql-block-header "One year ago"))))
        ((org-agenda-files `,(my/org-archive-files))))
       ("t" "All tasks"
        ((org-ql-search-block `(todo ,org-warning-keyword-0)
                              ((org-ql-block-header "Urgent task")))
         (org-ql-search-block `(todo ,org-todo-keyword-2)
                              ((org-ql-block-header "Today's task")))
         (org-ql-search-block `(todo ,org-todo-keyword-1)
                              ((org-ql-block-header "This week's task")))
         (org-ql-search-block `(todo ,org-todo-keyword-4)
                              ((org-ql-block-header "Someday's entries on agenda files")))
         (org-ql-search-block `(and (todo ,org-todo-keyword-0)
                                    (not (habit)))
                              ((org-ql-block-header "Remaining task")))))
       ("d" "Done tasks"
        ((org-ql-search-block '(done)
                              ((org-ql-block-header "Done/Canceled/Pending task")))))
       ("#" "stuck project"
        ((org-ql-search-block `(and (tags "project")
                                    ;; exclude projects
                                    (not (children (todo ,org-todo-keyword-0
                                                         ,org-todo-keyword-1
                                                         ,org-todo-keyword-2
                                                         ,org-todo-keyword-3))))
                              ((org-ql-block-header "Stuck projects")))))
       ("p" "Projects" tags "+project")
       ("h" "Habits in consistency graph"
        agenda ""
        ((org-agenda-span 'day)
         (org-agenda-use-time-grid nil)
         (org-agenda-prefix-format '((agenda . "")))
         (org-habit-show-all-today t)
         (org-habit-graph-column 32)
         (org-habit-preceding-days 14)
         (org-habit-following-days 21)
         (org-agenda-sorting-strategy '(scheduled-up))
         ;; display habits only
         (org-agenda-skip-function
          (lambda ()
            (and (save-excursion
                   (not (org-is-habit-p)))
                 (progn (outline-next-heading) (point)))))))
       ("H" "show all habits"
        ((org-ql-search-block '(habit)
                              ((org-ql-block-header "All Habits"))))
        ((org-agenda-sorting-strategy '(scheduled-up))))))
    :config
    (dolist (dir '("archive" "index" "wiki"))
      (mapc (lambda (org-file)
              (add-to-list 'org-agenda-text-search-extra-files
                           org-file))
            (directory-files (expand-file-name dir org-directory)
                             t
                             (rx (one-or-more not-newline)
                                 (or ".org" ".org.gpg")
                                 line-end)))))

  (defun org-agenda-cmp-latest-clock-log (a b)
    "Compare two org entry A and B in terms of clock log.

  This function can be used as `org-agenda-cmp-user-defined' in `org-agenda-sorting-strategy'."
    (let* ((marker-a (get-text-property 1 'org-marker a))
           (time-a (org-get-latest-clock-log-time marker-a))
           (marker-b (get-text-property 1 'org-marker b))
           (time-b (org-get-latest-clock-log-time marker-b)))
      (if (time-less-p time-a time-b) -1 +1)))

  (defun org-clock-sum-all ()
    "Sum the times for all agenda files."
    (interactive)
    (save-excursion
      (mapc (lambda (file)
              (with-current-buffer (or (org-find-base-buffer-visiting file)
                                       (find-file-noselect file))
                (org-clock-sum)
                (org-clock-sum-today)))
            (org-agenda-files))))
#+end_src

** org-capture

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/org.el")
  (use-package org-capture
    :after (org my/org-archive)
    :hook
    (org-capture-mode . (lambda ()
                          (skk-mode 1)
                          (delete-other-windows)))
    :custom
    (org-capture-bookmark nil)
    (org-capture-templates
     `(("t" "Task"
        entry (id "adcd63ea-f81a-4909-b659-6e5794052fcc")
        ,(format "* %s %%?\n %%U\n"
                 org-todo-keyword-0))
       ("p" "Project"
        entry (id "adcd63ea-f81a-4909-b659-6e5794052fcc")
        "* %? [/] :project:\n %U\n  - [ ] insert ID property if necessary"
        :prepend t :jump-to-captured t)
       ("m" "Memo"
        entry (file+datetree ,my/org-archive-file)
        "* %? %^g\n %U\n" :tree-type week)
       ("j" "Jotting down"
        entry (file "~/org/note/memo.org")
        "* %^{Title: }\n%U\n%?")
       ("s" "Someday memo")
       ("ss" "any"
        entry (file+datetree ,my/org-archive-file)
        ,(format "* %s %%?\n %%U\n  %%a"
                 org-todo-keyword-4)
        :tree-type week)
       ("sr" "purchase book"
        entry (file+datetree ,my/org-archive-file)
        ,(format "* %s %%? :ac_purchase:book:\n   %%U\n  %%a"
                 org-todo-keyword-4)
        :tree-type week)
       ("sc" "cook"
        entry (file+datetree ,my/org-archive-file)
        ,(format "* %s %%? :ac_cook:\n   %%U\n  %%a"
                 org-todo-keyword-4)
        :tree-type week)
       ("sp" "purchase"
        entry (file+datetree ,my/org-archive-file)
        ,(format "* %s %%? :ac_purchase:\n   %%U\n  %%a"
                 org-todo-keyword-4)
        :tree-type week)
       ("D" "Drill")
       ("Dd" "Drill entry in currently clocking or today's entry."
        entry (function org-goto-clocking-or-today)
        "* %i :drill:\n[%?]")
       ("De" "English drill entry in currently clocking or today's entry."
        entry (function org-goto-clocking-or-today)
        "* %i :drill:fd_en:\n[%^C%?]\n- %a")
       ("M" "Append memo to clocking task"
        item (clock)
        "- %i%?"))))

  (defun org-goto-clocking-or-today ()
    "Go to currently clocking entry.

  If no entry is clocked or CATEGORY on clocking entry is \"Cyclic\",
  go to today's entry in record file."
    (if (and (org-clocking-p)
             (save-excursion
               (with-current-buffer (org-clocking-buffer)
                 (org-clock-jump-to-current-clock)
                 (org-back-to-heading)
                 (not (string=
                       (org-entry-get (point) "CATEGORY" t)
                       "Cyclic")))))
        (org-clock-goto)
      (let* ((now (decode-time (current-time)))
             (day (nth 3 now))
             (month (nth 4 now))
             (year (nth 5 now))
             (org-refile-targets
              `((,my/org-archive-file :regexp . ,(format "%04d-%02d-%02d" year month day)))))
        (find-file my/org-archive-file)
        (org-datetree-find-iso-week-create `(,month ,day ,year) nil))))
#+end_src

** org-ql

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/org.el")
  (use-package org-ql
    :straight t
    :after org
    :custom
    (org-ql-search-directories-files-recursive t)
    :config
    (require 'org-ql-search)
    (org-ql-defpred (tags-expanded expanded-tags tags-x xtags) (&rest tags)
      "Return non-nil if current heading has one or more of TAGS.
  If TAGS contains a group tag, all tags in the group is used to match.
  Both inherited and local tags is tested."
      :normalizers ((`(,predicate-names . ,tags)
                     `(tags-expanded ,@tags)))
      :body (apply #'org-ql--predicate-tags
                   (seq-uniq (--mapcat (org-tags-expand it t)
                                       tags))))
    (org-ql-defpred (category-inherited) (&rest categories)
      "Return non-nil if current heading has CATEGORY.
  Ancestors are looked up If current heading has no CATEGORY."
      :body (when-let ((category (or (org-get-category (point))
                                     (org-entry-get (point) "CATEGORY" t))))
              (cl-typecase categories
                (null t)
                (otherwise (member category categories))))))
#+end_src

** [[https://github.com/org-roam/org-roam/releases.atom][org-roam]]
org-roam v2

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/org.el")
  (use-package org-roam
    :straight t
    :after org
    :bind (("C-c n l" . org-roam-buffer-toggle-display)
           ("C-c n D" . org-roam-find-directory)
           ("C-c n f" . org-roam-find-file)
           ("C-c n i" . org-roam-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :custom
    (org-roam-directory (expand-file-name "roam" org-directory))
    ;; DB does not have to be with org files since it is derived from org files uniquely
    (org-roam-db-location (expand-file-name "org-roam.db" "~/var/lib/org-roam"))
    (org-roam-buffer-position 'bottom))
#+end_src
** [[https://gitlab.com/phillord/org-drill/-/tags?format=atom][org-drill]]

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/org.el")
  (use-package org-drill
    :init (straight-use-package 'persist)
    :after (org persist)
    :straight t
    :custom
    (org-drill-spaced-repetition-algorithm 'sm5)
    (org-drill-sm5-initial-interval 10.0)
    (org-drill-add-random-noise-to-intervals-p t)
    (org-drill-adjust-intervals-for-early-and-late-repetitions-p t)
    (org-drill-days-before-old 20)
    (org-drill-learn-fraction 0.65)
    (org-drill-overdue-interval-factor 1.6))

#+end_src
** [[https://github.com/iqbalansari/restart-emacs/releases.atom][restart-emacs]]

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/restart-emacs.el")
  (use-package restart-emacs
    :straight t
    :bind ("C-M-<delete>" . restart-emacs))
#+end_src
** [[https://github.com/abo-abo/swiper/releases.atom][swiper/ivy]]
Read [[info:ivy#Top][this manual]]

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/swiper.el")
  (use-package ivy
    :straight t
    :config
    (bind-keys :map ivy-minibuffer-map
               ("M-y" . ivy-next-line)
               ("M-w" . ivy-kill-ring-save)))
#+end_src
** [[https://github.com/nflath/hungry-delete/releases.atom][hungry-delete]]
Aggressively delete successive white spaces.

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/hungry-delete.el")
  (use-package hungry-delete
    :straight t
    :diminish
    :config
    (global-hungry-delete-mode 1))
#+end_src
** [[https://github.com/Malabarba/aggressive-indent-mode/releases.atom][aggressive-indent-mode]]
:PROPERTIES:
:ID:       4a58219c-74dd-4135-b56d-876b0db2cd83
:END:

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/aggressive-indent.el")
  (use-package aggressive-indent
    :straight t
    :diminish (aggressive-indent-mode . "ai")
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
* original features
** org-password-store

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/org-password-store.el")
  (use-package password-store
    :straight t
    :custom
    (password-store-time-before-clipboard-restore 25))

  (defcustom my/org-password-store-property "PASSWORD_STORE"
    "Property used in my/password-store feature to get password-store entry name attached to current org entry.")

  (defmacro with-password-store-entry (entry &rest body)
    "Eval BODY which can refer password-store ENTRY.."
    (declare (indent defun))
    `(let ((entry (or ,entry
                      (when (derived-mode-p 'org-mode) (org-entry-get (point) my/org-password-store-property))
                      (password-store--completing-read t))))
       ,@body))

  (defmacro with-password-store-entry-field (entry field &rest body)
    "Eval BODY which can refer password-store ENTRY and FIELD..

  Plus, OBDY can refer value of FIELD named field-value."
    (declare (indent defun))
    `(let* ((entry (or ,entry
                       (when (derived-mode-p 'org-mode) (org-entry-get (point) my/org-password-store-property))
                       (password-store--completing-read t)))
            (field (or ,field
                       (password-store-read-field entry)))
            (field-value (password-store-get-field entry field)))
       ,@body))

  (defun my/password-store-copy ()
    "Add password for ENTRY into the kill ring.

  `password-store-copy' is responsible for managing the kill ring."
    (interactive)
    (with-password-store-entry nil
      (password-store-copy entry)))

  (defun my/password-store-copy-field ()
    "Add field for entry into the kill ring.

  entry and field is determined by appropriate manner."
    (interactive)
    (with-password-store-entry-field nil nil
      (password-store-copy-field entry field)))

  (defun my/password-store-url (&optional arg)
    "Browse url stored in entry by appropriate manner determined by ARG."
    (interactive "P")
    (with-password-store-entry-field nil "url"
      (cl-case (prefix-numeric-value arg)
        (16 (browse-url field-value))
        (4 (eww-browse-url field-value))
        (t (open-url field-value)))))

  (defun my/password-store-show-field ()
    "Show a field value in the minibuffer.

  Password-store entry and field used to derive this value are from org property
  or selected by user."
    (interactive)
    (with-password-store-entry-field nil nil
      (message "%s: %s" field field-value)))

  (defun my/password-store-create ()
    (interactive)
    (let* ((input (read-string "Entry-name or URL: "))
           (domain (when (string-match-p browse-url-button-regexp input)
                     (string-trim-right
                      (shell-command-to-string (format "echo %s | awk -F[/:] '{print $4}'"
                                                       (shell-quote-argument input)))))))
      (with-password-store-entry (cond
                                  ((> (length domain) 0) domain)
                                  (input))
        (when (derived-mode-p 'org-mode)
          (org-entry-put (point) my/org-password-store-property entry))
        (password-store-edit entry))))

  (defun my/password-store-edit ()
    (interactive)
    (with-password-store-entry nil
      (password-store-edit entry)))

  ;; TODO: make my/password-store-insert as soon after
  ;;     : password-store--run-insert has been implemented

  (defun my/password-store-remove ()
    (interactive)
    (with-password-store-entry nil
      (password-store-remove entry)
      (when (derived-mode-p 'org-mode)
        (org-entry-delete (point) my/org-password-store-property))))

  (defun my/password-store-web-login ()
    (interactive)
    (with-password-store-entry-field nil "username"
      (password-store-copy entry)
      (sleep-for 0.2) ; work around for overlapping message
      (if field-value
          (message "%s: %s" field field-value)
        (message (string-trim-right
                  (concat
                   (when-let ((email (assoc "email" (password-store-parse-entry entry))))
                     (format "%s: %s\n" (car email) (cdr email)))
                   (when-let ((second (nth 1 (password-store-parse-entry entry))))
                     (format "%s: %s\n" (car second) (cdr second)))))))
      (sleep-for 3)
      (funcall-interactively #'my/password-store-url '(16))))

  (advice-add #'password-store-clear :before #'my/password-store-clear)

  (defun my/password-store-clear (&optional field)
    "Overwrite clipboard data so that password once saved in clipboard is deleted
   for security risk.

  FIELD originally for messaging is ignored in this function."
    (interactive)
    (when password-store-kill-ring-pointer
      (kill-new "")
      (setcar kill-ring-yank-pointer "")))

  (with-eval-after-load 'hydra
    (defhydra hydra-password-store (global-map "C-o p"
                                               :color teal)
      "Password store"
      ("cc" my/password-store-copy)
      ("cf" my/password-store-copy-field)
      ("s" my/password-store-show-field)
      ("w" my/password-store-url)
      ("l" my/password-store-web-login)
      ("n" my/password-store-create)
      ("e" my/password-store-edit)
      ("v" my/password-store-edit)
      ("k" my/password-store-remove)
      ("q" nil "quit")))
#+end_src
** narrow-dwim

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/narrow-dwim.el")
  (add-hook 'post-command-hook 'highlight-narrowed-buffer)
  (defun highlight-narrowed-buffer ()
    "Highlight narrowed buffer.

  Narrowed buffer have a fringe with highlighting color.
  Plus text size in the buffer becomes a little bit larger."
    (unless (or (member last-command
                        '(text-scale-adjust))
                (eq major-mode 'Info-mode)
                (string-match-p (rx (seq line-start "CAPTURE-" (one-or-more ascii) line-end))
                                (buffer-name)))
      (let ((hl-fringe-color "purple2")
            (hl-text-scale (sqrt 2)))
        (set-face-attribute
         'fringe nil :background (if (buffer-narrowed-p)
                                     (progn
                                       (text-scale-set hl-text-scale)
                                       hl-fringe-color)
                                   (progn
                                     (when (= text-scale-mode-amount hl-text-scale)
                                       (text-scale-set 0))
                                     nil))))))

  (bind-key* "C-x n" 'my/toggle-narrow-dwim)

  (defun my/toggle-narrow-dwim (arg)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix ARG, don't widen, just narrow even if buffer is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not arg))
           (when (org-buffer-narrowed-p)
             (when org-startup-indented
               (org-indent-mode 1))
             (visual-line-mode -1))
           (widen)
           (setq-local truncate-lines t))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((and (boundp 'org-src-mode) org-src-mode (not arg))
           (org-edit-src-exit))
          ((condition-case err
               (org-edit-src-code)
             (user-error nil)))
          ((derived-mode-p 'org-mode)
           (cond ((org-at-block-p)
                  (org-narrow-to-block))
                 ((org-at-heading-p)
                  (org-narrow-to-subtree))
                 (t (org-narrow-to-element)))
           (org-indent-mode -1)
           (visual-line-mode 1))
          (t (narrow-to-defun))))
#+end_src
** weather

#+begin_src emacs-lisp
  ;; 気象庁配信の天気情報を加工して表示

  (require 'request)
  (require 'cl)

  (defvar weather-areas
    '(((url . "http://www.drk7.jp/weather/xml/14.xml")
       (pref . "神奈川県")
       (area . "西部"))
      ((url . "http://www.drk7.jp/weather/xml/22.xml")
       (pref . "静岡県")
       (area . "中部"))))

  (defun weather-area-show (weather-area-alist weather-buffer)
    (lexical-let ((url (assoc-default 'url weather-area-alist))
                  (pref (assoc-default 'pref weather-area-alist))
                  (area (assoc-default 'area weather-area-alist))
                  (buffer weather-buffer))
      (request
        url
        :parser
        (lambda ()
          (let ((xml-string (string-as-multibyte (string-as-unibyte (buffer-string)))))
            (with-temp-buffer
              (erase-buffer)
              (insert xml-string)
              (libxml-parse-xml-region (point-min) (point-max)))))
        :success
        (cl-function
         (lambda (&key data &allow-other-keys)
           (when data
             (with-current-buffer buffer
               (insert (format "%s %s\n" pref area))
               (mapcar
                (lambda (info-node)
                  (insert
                   (format "%s %s %s %s\n"
                           (dom-attr info-node 'date)
                           (apply (lambda (max-temp-node min-temp-node)
                                    (format "%2d/%2d℃"
                                            (string-to-number (dom-text min-temp-node))
                                            (string-to-number (dom-text max-temp-node))))
                                  (dom-by-tag (dom-child-by-tag info-node 'temperature) 'range))
                           (apply (lambda (node-1 node-2 node-3 node-4)
                                    (format "%2d-%2d-%2d-%2d％"
                                            (string-to-number (dom-text node-1))
                                            (string-to-number (dom-text node-2))
                                            (string-to-number (dom-text node-3))
                                            (string-to-number (dom-text node-4))))
                                  (dom-by-tag (dom-child-by-tag info-node 'rainfallchance) 'period))
                           (dom-text (dom-child-by-tag info-node 'weather)))))
                (dom-by-tag (dom-by-id data area) 'info))
               (insert "\n"))))))))

  (defun weather ()
    (interactive)
    (let ((buffer (get-buffer-create "weather")))
      (mapcar (lambda (weather-area)
                (weather-area-show weather-area buffer))
              weather-areas)
      (switch-to-buffer buffer)))

  (provide 'weather)
#+end_src
* helper programs
** extract_headings
#+begin_src python :tangle (expand-tangle-target ".local/bin/extract_headings") :tangle-mode (identity #o755)
  #!/usr/bin/env python3

  # This script extract most probable page heading.

  import sys
  import lxml.html as html
  from lxml import etree
  import difflib

  if len(sys.argv) == 1:
      INPUT_STR = sys.stdin.read()
      ROOT = html.fromstring(INPUT_STR).getroottree()
  else:
      sys.exit(1)

  OUT_ROOT = etree.Element("headings")

  # extract title text
  title = ''
  title_text_arr = ROOT.xpath('//title[1]//text()')
  if len(title_text_arr):
      title = title_text_arr[0]
      OUT_ROOT.set("title", title.strip())

  htag_text_arr = ROOT.xpath('//*[self::h1 or self::h2 or self::h3 or self::h4 or self::h5 or self::h6]')
  for i in range(len(htag_text_arr)):
      text = ''
      texts = htag_text_arr[i].xpath('.//text()')
      if len(texts) == 1:
          text = texts[0].strip()
      elif len(texts) > 1:
          text = ''.join(map(str.strip, texts))
      else:
          continue
      proximity = difflib.SequenceMatcher(None, title, text).ratio()
      heading = etree.Element(htag_text_arr[i].tag)
      heading.text = text
      heading.set('proximity', str(proximity))
      OUT_ROOT.append(heading)

  out_root_str = etree.tostring(OUT_ROOT, encoding='utf-8', method='xml', pretty_print=True)
  if type(out_root_str) is bytes:
      out_root_str = out_root_str.decode()
  print(out_root_str)
#+end_src
** strip_ruby
A program strips all ruby tags in a HTML stream. All HTML contents are expected to be from STDIN and go out as STDOUT. This procedure is mainly for html files converted from pdf and epub files.
Stripping rules are:
- <ruby> tag will be stripped
- <rt> tree for furigana tree will be removed
- <rp> tree contains parenthes for non-ruby-support brouwser will be removed
- <rb> tag for delimiter will be stripped
- <rtc> tree for semantic word will be removed

#+begin_src python :tangle (expand-tangle-target ".local/bin/strip_ruby") :tangle-mode (identity #o755)
  #!/usr/bin/env python3

  import sys
  import lxml.html as html

  INPUT_STR = sys.stdin.read()
  ROOT = html.fromstring(INPUT_STR).getroottree()

  for ruby in ROOT.xpath('//ruby'):
      for rt in ruby.xpath('//rt'):
          rt.drop_tree()
      for rp in ruby.xpath('//rp'):
          rp.drop_tree()
      for rb in ruby.xpath('//rb'):
          rb.drop_tag()
      for rtc in ruby.xpath('//rtc'):
          rtc.drop_tree()
      ruby.drop_tag()

  CONTENT = html.tostring(ROOT, encoding="utf-8", method='html', pretty_print=True)
  print(CONTENT.decode())
#+end_src
