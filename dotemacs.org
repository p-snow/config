#+SETUPFILE: ./export.setup

#+TITLE: Emacs Configuration (.emacs.d/)
#+PROPERTY: header-args       :tangle-mode (identity #o444)
#+PROPERTY: header-args+      :mkdirp yes
#+PROPERTY: tangle-target-dir .files

#+STARTUP: overview

#+TAGS: [ fixit help maintaining programs mark kill ]

* general configuration        :elfeed:soft_update:prime:

** early initialization
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/00-early-init.el")
:END:

These process must be evaluated beforehand.

*** package.el

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")
          ("org" . "http://orgmode.org/elpa/")))
  (setq package-enable-at-startup nil)
  (package-initialize t)

  (let ((pkg-emacs-ver-dir
         (locate-user-emacs-file
          (concat "package/" emacs-version))))
    (add-to-list 'load-path (setq package-user-dir (expand-file-name "elpa" pkg-emacs-ver-dir)))
    (add-to-list 'load-path (expand-file-name "elisp" pkg-emacs-ver-dir)))
#+end_src

*** [[https://github.com/raxod502/straight.el/releases.atom][straight.el]]

#+begin_src emacs-lisp
  (setq straight-recipes-gnu-elpa-use-mirror t)

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 4))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (with-eval-after-load 'hydra
    (defhydra hydra-straight (global-map "C-x -"
                                         :color blue)
      "Straight"
      ("c" straight-check-package)
      ("C" straight-check-all)
      ("r" straight-rebuild-package)
      ("R" straight-rebuild-all)
      ("f" straight-fetch-package)
      ("F" straight-fetch-all)
      ("p" straight-pull-package-and-deps)
      ("P" straight-pull-all)
      ("m" straight-merge-package)
      ("M" straight-merge-all)
      ("n" straight-normalize-package)
      ("N" straight-normalize-all)
      ("u" straight-push-package)
      ("U" straight-push-all)
      ("v" straight-freeze-versions)
      ("V" straight-thaw-versions)
      ("w" straight-watcher-start)
      ("W" straight-watcher-quit)
      ("g" straight-get-recipe)
      ("e" straight-prune-build)
      ("q" nil)))
#+end_src

*** [[https://github.com/jwiegley/use-package/releases.atom][use-package]]

[[https://jwiegley.github.io/use-package/][Official manual]] is handy especially when you look up [[https://jwiegley.github.io/use-package/keywords/][Keywords]].

#+begin_src emacs-lisp
  ;; install use-package via straight.el
  (straight-use-package 'use-package)

  (use-package use-package
    :custom
    (use-package-ensure-function 'straight-use-package-ensure-function))

  (use-package use-package-ensure-system-package :straight t)
#+end_src

use-package depends on following packages internally

**** [[https://github.com/myrjola/diminish.el/releases.atom][diminish.el]]

#+begin_src emacs-lisp
  (use-package diminish :straight t)
#+end_src

**** [[https://github.com/emacs-straight/delight/releases.atom][delight]]

#+begin_src emacs-lisp
  (use-package delight :straight t)
#+end_src

*** load cl-lib

Use 'cl-lib' rather than 'cl' package since it is [[https://www.gnu.org/savannah-checkouts/gnu/emacs/news/NEWS.27.1][officially deprecated]].

#+begin_src emacs-lisp
  (require 'cl-lib)
#+end_src
** basic config
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/01-init.el")
:END:

*** language
[[info:emacs#Language Environments][emacs#Language Environments]]

#+begin_src emacs-lisp
  ;; language and locale
  (set-language-environment "Japanese")
  (setq system-time-locale "C")

  ;; coding system
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix)

  ;; prefer-coding-system take effect equally to follows
  (set-buffer-file-coding-system 'utf-8-unix)
  (set-file-name-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (setq locale-coding-system 'utf-8-unix)
#+end_src
*** visual facets

#+begin_src emacs-lisp
  ;; do not use basic GUI facets
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)

  ;; fringe is preferably as thin as possible
  (set-fringe-mode 10)

  ;; do not use visual bell
  (setf visible-bell nil)

  ;; conceal distractions at startup
  (setf initial-scratch-message "")
  (setf inhibit-startup-screen t)
#+end_src
*** face

CAUTION: There are some face definitions which use an extra large font since I am [[https://en.wikipedia.org/wiki/Visual_impairment][visually impaired]].

#+begin_src emacs-lisp
  (defvar my-default-pixel-width 2560 "Default display width in pixel.")
  (defmacro my-adjust-font-size (original)
    "Adjust original font size to fit in display."
    `(truncate (* ,original (/ (float (x-display-pixel-width))
                               ,my-default-pixel-width))))


  (create-fontset-from-ascii-font "TakaoGothic" nil "default")
  (create-fontset-from-ascii-font "TakaoExGothic" nil "variable")
  (create-fontset-from-ascii-font "TakaoMincho" nil "mincho")
  (create-fontset-from-ascii-font "Gen Shin Gothic Monospace Light" nil "dense")

  (set-face-attribute 'default
                      nil
                      :font "fontset-default"
                      :height (my-adjust-font-size 660))
  (set-face-attribute 'variable-pitch
                      nil
                      :font "fontset-variable"
                      :height (my-adjust-font-size 660))

  (use-package face-remap
    :diminish buffer-face-mode
    :config
    (buffer-face-mode 1))

  (use-package face
    :no-require t
    :init
    (defface my/large-gothic-face `((t . (:font "fontset-default"
                                                :height ,(my-adjust-font-size 900))))
      "A face with large font.")
    (defface my/medium-large-gothic-face `((t . (:font "fontset-default"
                                                       :height ,(my-adjust-font-size 835))))
      "A face with medium-large font.")
    (defface my/medium-gothic-face `((t . (:font "fontset-default"
                                                 :height ,(my-adjust-font-size 655))))
      "A face with medium font.")
    (defface my/small-gothic-face `((t . (:font "fontset-default"
                                                :height ,(my-adjust-font-size 570))))
      "A face with small font.")
    (defface my/large-mincho-face `((t . (:font "fontset-mincho"
                                                :height ,(my-adjust-font-size 840))))
      "A face with large mincho font.")
    (defface my/medium-mincho-face `((t . (:font "fontset-mincho"
                                                 :height ,(my-adjust-font-size 780))))
      "A face with medium mincho font.")
    :hook
    ((eww-mode twittering-mode) . (lambda () (buffer-face-set 'my/large-gothic-face)))
    ((Info-mode help-mode helpful-mode woman-mode) . (lambda () (buffer-face-set 'my/medium-large-gothic-face)))
    ((org-mode text-mode dired-mode mu4e-headers-mode mu4e-compose-mode) . (lambda () (buffer-face-set 'my/medium-gothic-face)))
    ((prog-mode shell-mode term-mode vterm-mode eshell-mode) . (lambda () (buffer-face-set 'my/small-gothic-face)))
    ((mu4e-view-mode nov-mode elfeed-show-mode) . (lambda () (buffer-face-set 'my/large-mincho-face)))
    (elfeed-search-update . (lambda () (buffer-face-set 'my/medium-mincho-face))))
#+end_src

*** file handling
File-related tweaks including [[info:emacs#Customize Save][Customizing Saving of Files]].

#+begin_src emacs-lisp
  (use-package files
    :custom
    (mode-require-final-newline 'visit-save)
    (make-backup-files nil)
    (delete-auto-save-files t)
    (enable-remote-dir-locals t)
    :config
    (setq delete-by-moving-to-trash t))

  (use-package saveplace
    :custom
    (save-place-version-control t)
    :config
    (save-place-mode 1))

  (auto-compression-mode 1)

  (setq auto-save-interval 4)
  (setq auto-save-timeout 1)
  (setq auto-save-default t)
#+end_src
*** modifier keys

#+begin_src emacs-lisp
  (cond
   ((string= window-system "x")
    (setf x-alt-keysym  'alt
          x-meta-keysym 'meta))
   ((string= window-system "ns")
    ;; IME inline patch
    (setf mac-use-input-method-on-system nil)
    (setf mac-control-modifier       'control
          mac-command-modifier       'meta
          mac-option-modifier        'super
          mac-right-option-modifier  'alt
          mac-right-control-modifier 'super
          mac-function-modifier      'hyper)))
#+end_src
*** mark/region
Variables need to be carefully tweaked with [[info:emacs#Mark][manual]].

#+begin_src emacs-lisp
  ;; (setq set-mark-command-repeat-pop t)
  (setf mark-ring-max 32)
  (setf highlight-nonselected-windows t)

  ;; text in region will be deleted
  (delete-selection-mode t)
#+end_src

*** window

Triple Escape (M-ESC ESC) has got to reset window layout by tweaking buffer-quit-function.

#+begin_src emacs-lisp
  (winner-mode)
  (global-set-key (kbd "C-z") 'winner-undo)
  (global-set-key (kbd "C-M-z") 'winner-redo)

  (setq buffer-quit-function 'winner-undo)

  (defun my/next-window-expand ()
    "Expand next window."
    (interactive)
    (other-window 1)
    (delete-other-windows))
  (global-set-key (kbd "C-x O") 'my/next-window-expand)
#+end_src

*** minibuffer
[[help:savehist-mode][savehist-mode]] saves minibuffer history and additionals.

#+begin_src emacs-lisp
  (savehist-mode)

  (setf history-length 1500)
  (setf history-delete-duplicates t)

  ;; allow y/n answer for an either-or selection
  (fset 'yes-or-no-p 'y-or-n-p)

  (add-hook 'minibuffer-setup-hook 'my/minibuffer-setup-function)

  (defun my/minibuffer-setup-function ()
    ;; disable input method in mini buffer
    (when current-input-method
      (deactivate-input-method))
    ;; decrease font size to 90% in minibuffer
    (setq-local face-remapping-alist '((default :height 0.9))))

  (setf enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
#+end_src

*** displaying

#+begin_src emacs-lisp
  (setf scroll-step 1)

  (setf text-scale-mode-step 1.0625)

  ;; let the cursor blinking
  (setf blink-cursor-blinks 15)
  (setf blink-cursor-delay 0.7)
  (setf blink-cursor-interval 0.35)
  (blink-cursor-mode 1)

  ;; use emacs in full screen mode
  (when (member (window-system) '(x ns w32))
    (set-frame-parameter nil 'fullscreen 'fullboth))

  (setq-default truncate-lines t)

  (use-package visual-line
    :no-require t
    :after adaptive-wrap
    :hook
    ((feed-show-mode eww-after-render help-mode helpful-mode Info-mode woman-mode mu4e-view-mode nov-mode twittering-mode)
     . visual-line-mode)
    ((feed-show-mode eww-after-render help-mode helpful-mode Info-mode woman-mode mu4e-view-mode nov-mode twittering-mode)
     . adaptive-wrap-prefix-mode)
    ;; major modes inherited from text-mode, like org-mode, is not desired to enable visual-line-mode
    (text-mode . (lambda ()
                   (when (eq major-mode 'text-mode)
                     (visual-line-mode))))
    :config
    (global-visual-line-mode 0))
#+end_src

*** display buffer
:PROPERTIES:
:ID:       a504f06e-02d3-4dcd-b80b-566a55cca2c7
:END:

#+begin_src emacs-lisp
  (setq display-buffer-base-action
        '((display-buffer-same-window
           display-buffer-reuse-window
           display-buffer-reuse-mode-window
           display-buffer-in-previous-window)))
#+end_src

*** text handling

#+begin_src emacs-lisp
  (setq-default fill-column 80)

  ;; suppress curved quotes in docstring (for emacs25)
  (setf text-quoting-style 'straight)
#+end_src

*** indent
customization for [[info:emacs#Indentation][indentation]]
See also [[id:4a58219c-74dd-4135-b56d-876b0db2cd83][aggressive-indent-mode]]

#+begin_src emacs-lisp
  ;; use spaces instead of a horizontal tab
  (setq-default indent-tabs-mode nil)

  (custom-set-variables '(tab-always-indent 'complete))
  (electric-indent-mode 1)
#+end_src

*** performance

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 10 gc-cons-threshold))
  (setq message-log-max 10000)
  (setq shell-command-switch "-c")
  (setq undo-outer-limit 64000000)

  (setq-default bidi-display-reordering nil)

  (setq next-screen-context-lines 2)
#+end_src

*** customize buffer

#+begin_src emacs-lisp
  (custom-set-variables
   '(custom-file (expand-file-name "custom.el" user-emacs-directory)))
#+end_src

*** killing                                      :kill:

#+begin_src emacs-lisp
  (custom-set-variables '(yank-pop-change-selection t))
#+end_src

*** mouse
I prefer to rid my emacs experience of mouse as least as possible.

#+begin_src emacs-lisp
  (use-package mouse
    :custom
    (mouse-1-click-follows-link nil)
    (mouse-highlight nil)
    :config
    (mouse-wheel-mode 0))
#+end_src

*** email                                       :crypt:

-----BEGIN PGP MESSAGE-----

hQEMA9uWvE5LJ2ejAQgAr5AMxzAs2N2TZ/ULgiWI9OS1PQ3cR5OjlXy6statO/xh
G8x8yvioZV4aJORGOc9u9tkzO4gizLmHbX7BrwXExaICNoVgf6sw1xu9pvWAo4m7
J6cfKoBEuN0qYJ8K+/7H/JgvucZlYKLMxncoo5jDABbEjieXQBRQWar7xm9unHGs
r+b6tAD6LDdHFRwNTBorduF0nkP56on+zISt8BD+pXMyts3iYEUnyzGaGPxc17WL
msjgOcP1on34ymsCukOy0qDT2yI7+TF366aWuV+ppYBTgBFIwZ7xixm+AVYJLkIE
HPxzNDzb8OjVxt67qkrLzf4bxYubBfoAYeVak2t2p9LASQEuZeGIWVPxozDXtQbz
/mkstGWFiSdY20jSIC+aXe2CpekSyR0KQdB/r27wigMTx5IpSF9fKI6D63F0aIgW
w4cXPowPej2QbHxtWrj//Vn41VZgyk57626wtZbNnJ91OQe7h5IzLaYDVSFO9E4d
HeiXj/4G7POAoatTBd7DUWjSvsELqCrQvNHoSAorWuthwJ3Pz4UQrkGlvM1ljKiX
X6ZcttmYDN6lOUgHrrwW7nUBxm7qXRocRr9SVWz2+Qsg5/Hu18/gJ73J5xW4/Q9Y
/ZbVvSxVgtjLIgHXYiM2WnHDn35RlDfXB2RPDL7G7LUaYi1sX4KqwkdA6PWuUcdy
fDDHS5Vq5UvYutk=
=3/h5
-----END PGP MESSAGE-----

*** [[https://github.com/skk-dev/ddskk/releases.atom][ddskk]]

#+begin_src emacs-lisp
  (defvar skk-data-dir (expand-file-name "~/var/lib/skk"))

  (use-package ddskk
    :straight t
    :defer t
    :bind (("C-x C-j" . skk-mode)
           ("C-x j" . skk-mode)
           ("C-c j" . skk-mode))
    :init
    (defface skk-candidate `((t . (:font "fontset-default"
                                         :height ,(my-adjust-font-size 860))))
      "Default face for ddskk candidates."
      :group 'skk-dcomp)
    :custom
    (default-input-method "japanese-skk")
    (skk-kakutei-key (kbd "C-m"))
    (skk-user-directory (expand-file-name "ddskk" user-emacs-directory))
    (skk-init-file "~/.config/emacs/ddskk/init.el")
    (skk-byte-compile-init-file t)
    (skk-tut-file
     (expand-file-name "etc/SKK.tut" (straight--repos-dir "ddskk")))
    ;; cursor color
    (skk-use-color-cursor t)
    (skk-cursor-hiragana-color "orange")
    (skk-cursor-katakana-color "SpringGreen3")
    (skk-cursor-latin-color "DodgerBlue3")
    (skk-cursor-jisx0201-color "purple3")
    ;; mode line string
    (skk-latin-mode-string "A")
    (skk-hiragana-mode-string "あ")
    (skk-katakana-mode-string "ア")
    (skk-jisx0201-mode-string "ｱ")
    (skk-jisx0208-latin-mode-string "Ａ")
    ;; AZIK
    (skk-use-azik t)
    (skk-azik-keyboard-type 'us101)
    ;; conversion
    (skk-egg-like-newline t)
    (skk-henkan-strict-okuri-precedence t)
    (skk-check-okurigana-on-touroku t)
    (skk-show-annotation nil)
    ;; how candidates behave
    (skk-show-candidates-always-pop-to-buffer t)
    (skk-henkan-number-to-display-candidates 10)
    (skk-show-candidates-nth-henkan-char 3)
    (skk-henkan-show-candidates-keys
     '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9 ?0))
    ;; set face for candidates list
    (skk-treat-candidate-appearance-function
     (lambda (candidate listing-p)
       (cond
        ((string-match ";" candidate)
         (put-text-property 0 (match-beginning 0)
                            'face 'skk-candidate
                            candidate)
         (put-text-property (match-beginning 0)
                            (length candidate) 'face 'shadow candidate))
        (t
         (put-text-property 0 (length candidate)
                            'face 'skk-candidate
                            candidate)))
       candidate))
    ;; C-q for hankaku-kana input mode
    (skk-use-jisx0201-input-method t)
    ;; dynamic conversion
    (skk-dcomp-activate nil)
    (skk-dcomp-multiple-activate nil)
    ;; config file
    (skk-record-file (expand-file-name "record" skk-data-dir))
    (skk-emacs-id-file (expand-file-name "emacs-id" skk-data-dir))
    ;; jisyo
    (skk-share-private-jisyo t)
    (skk-compare-jisyo-size-when-saving nil)
    (skk-save-jisyo-instantly t)
    ;; jisyo file/directory
    (skk-jisyo (expand-file-name "jisyo" skk-data-dir))
    (skk-backup-jisyo (expand-file-name "jisyo.bak" skk-data-dir))
    (skk-large-jisyo (expand-file-name "large-jisyo" skk-data-dir))
    ;; jisyo server
    (skk-server-host "localhost")
    (skk-server-portnum 1178)
    (skk-server-inhibit-startup-server t)
    ;; study
    (skk-study-file (expand-file-name "study" skk-data-dir))
    (skk-study-backup-file (expand-file-name "study.bak" skk-data-dir)))
#+end_src

**** skk-init-file

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/ddskk/init.el")
  ;; -*- mode:emacs-lisp; -*-
  (setq skk-rom-kana-rule-list
        (append skk-rom-kana-rule-list
                '(("xka" nil ("ヵ" . "ヵ"))
                  ("xke" nil ("ヶ" . "ヶ"))
                  ("n" nil nil)
                  ("nn" nil ("ナノ" . "なの"))
                  ("nm" nil ("ノミ" . "のみ"))
                  ("ks" nil ("コソ" . "こそ"))
                  ("kz" nil ("コノ" . "この"))
                  ("ym" nil ("ヤマ" . "やま"))
                  ("tga" nil ("タガ" . "たが"))
                  ("vj" nil ("ヴン" . "ぶん"))
                  ;; followings are for preventing from changing to zenkaku eisu mode by pressing 'L'
                  ("bL" nil ("ボン" . "ぼん"))
                  ("byL" nil ("ビョン" . "びょん"))
                  ("cL" nil ("チョン" . "ちょん"))
                  ("dL" nil ("ドン" . "どん"))
                  ("fL" nil ("フォン" . "ふぉん"))
                  ("gL" nil ("ゴン" . "ごん"))
                  ("gyL" nil ("ギョン" . "ぎょん"))
                  ("hL" nil ("ホン" . "ほん"))
                  ("hgL" nil ("ヒョン" . "ひょん"))
                  ("hyL" nil ("ヒョン" . "ひょん"))
                  ("jL" nil ("ジョン" . "じょん"))
                  ("kL" nil ("コン" . "こん"))
                  ("kgL" nil ("キョン" . "きょん"))
                  ("kyL" nil ("キョン" . "きょん"))
                  ("mL" nil ("モン" . "もん"))
                  ("mgL" nil ("ミョン" . "みょん"))
                  ("myL" nil ("ミョン" . "みょん"))
                  ("nL" nil ("ノン" . "のん"))
                  ("ngL" nil ("ニョン" . "にょん"))
                  ("nyL" nil ("ニョン" . "にょん"))
                  ("pL" nil ("ポン" . "ぽん"))
                  ("pgL" nil ("ピョン" . "ぴょん"))
                  ("pyL" nil ("ピョン" . "ぴょん"))
                  ("rL" nil ("ロン" . "ろん"))
                  ("ryL" nil ("リョン" . "りょん"))
                  ("sL" nil ("ソン" . "そん"))
                  ("syL" nil ("ション" . "しょん"))
                  ("tL" nil ("トン" . "とん"))
                  ("tyL" nil ("チョン" . "ちょん"))
                  ("vL" nil ("ヴォン" . "う゛ぉん"))
                  ("wL" nil ("ウォン" . "うぉん"))
                  ("xL" nil ("ション" . "しょん"))
                  ("xxL" nil ("→" . "→"))
                  ("yL" nil ("ヨン" . "よん"))
                  ("zL" nil ("ゾン" . "ぞん"))
                  ("zyL" nil ("ジョン" . "じょん")))))

  (add-hook 'skk-azik-load-hook
            (lambda ()
              (dolist (key '("kA" "kE" "tU" "wA"))
                (setq skk-rom-kana-rule-list
                      (skk-del-alist key skk-rom-kana-rule-list)))))
#+end_src

*** fundamental key bindings

#+begin_src emacs-lisp
  ;; to be capable of distinguishing TAB and C-i
  (setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))

  (substitute-key-definition 'upcase-region
                             'upcase-dwim
                             global-map)
  (substitute-key-definition 'downcase-region
                             'downcase-dwim
                             global-map)
  (global-set-key (kbd "C-x C-c") #'capitalize-dwim)

  ;; suppress prompting in (up/down)case-region
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  (global-set-key (kbd "C-j") 'newline)
  (global-set-key (kbd "C-h") 'backward-delete-char-untabify)
  (global-set-key (kbd "M-h") 'backward-kill-word)
  (global-set-key (kbd "M-SPC") 'cycle-spacing)
  (global-set-key (kbd "M-k") 'kill-whole-line)
  (global-set-key (kbd "C-c k") 'kill-this-buffer)
#+end_src

** built-in features
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/features.el")
:END:
*** Auto Revert
[[info:emacs#Auto Revert][Auto Revert]]: Keeping buffers automatically up-to-date.

#+begin_src emacs-lisp
  (use-package autorevert
    :diminish (global-auto-revert-mode auto-revert-mode)
    :custom
    (auto-revert-verbose nil)
    (global-auto-revert-non-file-buffers t)
    :config
    (global-auto-revert-mode 1))
#+end_src

*** Abbrev

#+begin_src emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode
    :custom
    (save-abbrevs t)
    :config
    (quietly-read-abbrev-file))
#+end_src

*** EasyPG (epg)

#+begin_src emacs-lisp
  (use-package epg
    :custom
    (epg-pinentry-mode 'loopback))
#+end_src

*** auth-source

#+begin_src emacs-lisp
  (use-package auth-source
    :custom
    (auth-source-gpg-encrypt-to `(,user-mail-address))
    :config
    (add-to-list 'auth-sources "~/.netrc.gpg"))

  (use-package auth-source-pass
    :config
    (auth-source-pass-enable))
#+end_src

*** whitespace
[[info:emacs#Useless Whitespace][emacs#Useless Whitespace]]

#+begin_src emacs-lisp
  (use-package whitespace
    :diminish ((global-whitespace-mode . "Ws")
               (whitespace-mode . "ws"))
    :hook
    ((org-mode prog-mode dired-mode) . whitespace-mode)
    (eww-mode . whitespace-turn-off)
    (before-save . delete-trailing-whitespace)
    :custom
    (whitespace-style
     '(face trailing tabs tab-mark spaces space-mark empty))
    (whitespace-space-regexp "\\(\x3000+\\)")
    (whitespace-trailing-regexp "\\([ \t\u00A0]+\\)$")
    (whitespace-display-mappings
     '((space-mark ?\x3000 [?\u2423])
       (tab-mark   ?\t   [?\u00BB ?\t])))
    :config
    (global-whitespace-mode -1))
#+end_src

*** hippie-exp

#+begin_src emacs-lisp
  (use-package hippie-exp
    :bind ("M-/" . hippie-expand)
    :custom
    (hippie-expand-try-functions-list
     '(try-complete-file-name-partially
       try-complete-file-name
       try-expand-dabbrev
       try-expand-dabbrev-all-buffers
       try-expand-dabbrev-from-kill
       try-complete-lisp-symbol-partially
       try-complete-lisp-symbol)))
#+end_src

*** bookmark

#+begin_src emacs-lisp
  (use-package bookmark
    :bind ("C-c b" . bookmark-jump)
    :custom
    (bookmark-default-file
     (expand-file-name ".bookmarks.gpg" user-emacs-directory))
    (bookmark-watch-bookmark-file 'silent)
    :config
    (delight 'bookmark-bmenu-mode " BB"))
#+end_src

*** find-dired

#+begin_src emacs-lisp
  (use-package find-dired
    :custom
    (find-grep-options "-n -H --no-heading -q")
    (find-ls-option '("-print0 | xargs -0 ls -ldN" . "-ldN")))

  (with-eval-after-load 'hydra
    (defhydra hydra-find-dired (global-map "M-s d"
                                           :color teal)
      "find dired"
      ("f" find-dired)
      ("F" find-lisp-find-dired)
      ("g" find-grep-dired)
      ("n" find-name-dired)
      ("d" find-lisp-find-dired-subdirectories)
      ("q" nil "quit")))
#+end_src

*** hideshow

#+begin_src emacs-lisp
  (use-package hideshow
    :diminish "hs"
    :bind (("C-c TAB" . hs-toggle-hiding)))
#+end_src

*** uniquify
[[info:emacs#Uniquify][Uniquify]] makes buffer names unique.

#+begin_src emacs-lisp
  (use-package uniquify
    :custom
    (uniquify-buffer-name-style 'forward)
    ;; (uniquify-ignore-buffers-re "*[^*]+*")
    )
#+end_src
*** recentf
[[info:emacs#File Conveniences][emacs#File Conveniences]]

#+begin_src emacs-lisp
  (use-package recentf
    :custom
    (recentf-exclude '(".gz" ".xz" ".zip"))
    (recentf-max-saved-items 200)
    (recentf-max-menu-items 15)
    (recentf-auto-cleanup "1:23am")
    :config
    ;; (recentf-load-list)
    (recentf-mode 1))
#+end_src
*** server

#+begin_src emacs-lisp
  (use-package server
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src
*** calc

#+begin_src emacs-lisp
  (use-package calc
    :bind (("<f5>" . calc))
    :config
    (setf calc-display-trail nil))
#+end_src
*** proced

#+begin_src emacs-lisp
  (use-package proced
    :no-require t
    :custom
    (proced-auto-update-flag t)
    (proced-auto-update-interval 3))
#+end_src
*** vc (version control)                  :maintaining:
**** ediff

#+begin_src emacs-lisp
  (use-package ediff
    :commands ediff-files
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-default)
    (ediff-split-window-function 'split-window-horizontally))
#+end_src
**** vc-hooks

#+begin_src emacs-lisp
  (use-package vc-hooks
    :custom
    (vc-follow-symlinks t))
#+end_src
*** re-builder

#+begin_src emacs-lisp
  (use-package re-builder
    :custom
    (reb-re-syntax 'string))
#+end_src
*** isearch

#+begin_src emacs-lisp
  (use-package isearch
    :diminish "is"
    :config
    (bind-keys :map isearch-mode-map
               ("C-j" . isearch-exit)))
#+end_src

*** imenu                                    :programs:

#+begin_src emacs-lisp
  (use-package imenu
    :custom
    (imenu-auto-rescan t))
#+end_src
*** flyspell                                    :fixit:

#+begin_src emacs-lisp
  (use-package flyspell
    :diminish "fs"
    :if (executable-find "aspell")
    :after (hydra)
    :custom
    (ispell-program-name "aspell")
    (flyspell-issue-message-flag nil)
    :config
    ;; avoid checking for Japanese characters
    (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+"))
    (setq-default ispell-extra-args '("--sug-mode=ultra"
                                      "--lang=en_US"))
    (when (string-match-p "--camel-case"
                          (shell-command-to-string (concat ispell-program-name " --help")))
      (push "--camel-case" ispell-extra-args))
    (bind-keys :map flyspell-mode-map
               ("C-,"   . nil)
               ("C-."   . nil)
               ("C-;"   . nil)
               ("C-c $" . nil)
               ("C-M-i" . nil))
    (defhydra hydra-flyspell (flyspell-mode-map "C-c $"
                                                :color red)
      "Flyspell"
      ("c" flyspell-buffer)
      ("n" flyspell-goto-next-error)
      ("." flyspell-auto-correct-word)
      ("q" nil "quit")))
#+end_src
*** help                                         :help:
:PROPERTIES:
:ID:       a55da7a2-6525-4788-ba56-085eb61928d4
:END:

#+begin_src emacs-lisp
  (use-package help-mode
    :delight " HE"
    :config
    (bind-key "C-M-h" help-map)
    (bind-keys :map help-map
               ("C-h" . nil) ; for which-key
               ("c" . describe-face)
               ("l" . find-library)
               :map help-mode-map
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("SPC" . my/forward-paragraph)
               ("E" . my/backward-paragraph)
               ("2" . backward-button)
               ("3" . forward-button)
               ("4" . push-button)))
#+end_src
*** info                                         :help:

#+begin_src emacs-lisp
  (use-package Info
    :defer t
    :bind (:map Info-mode-map
                ("C-j" . Info-follow-nearest-node)
                ("C-c C-o" . Info-follow-nearest-node)
                ("a"   . info-apropos)
                ;; lazy control
                ("f" . scroll-up-line)
                ("e" . scroll-down-line)
                ("SPC" . my/forward-paragraph)
                ("E" . my/backward-paragraph)
                ("1" . Info-history-back)
                ("2" . Info-prev-reference)
                ("3" . Info-next-reference)
                ("4" . Info-follow-nearest-node)
                ("5" . Info-history-forward))
    :custom
    (Info-use-header-line nil)
    :config
    (require 'info-look)
    (autoload 'info-lookup-add-help "info-look"))
#+end_src
*** tramp

#+begin_src emacs-lisp
  (use-package tramp
    :defer t
    :config
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
    (add-to-list 'tramp-remote-path "~/bin")
    (add-to-list 'tramp-remote-path "~/usr/bin"))
#+end_src

*** view

#+begin_src emacs-lisp
  (use-package view
    :diminish view-mode "vw")
#+end_src
*** woman                                    :programs:

#+begin_src emacs-lisp
  (use-package woman
    :defer t
    :delight " WM"
    :config
    (bind-keys :map woman-mode-map
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("SPC" . my/forward-paragraph)
               ("E" . my/backward-paragraph)
               ("2" . backward-button)
               ("3" . forward-button)
               ("4" . push-button)))
#+end_src
*** executable
This customization is based on [[https://emacsredux.com/blog/2021/09/29/make-script-files-executable-automatically/][this advice]]

#+begin_src emacs-lisp
  (use-package executable
    :hook (after-save
           . executable-make-buffer-file-executable-if-script-p))
#+end_src
*** paren

#+begin_src emacs-lisp
  (use-package paren
    :custom
    (show-paren-style 'parenthesis)
    (show-paren-delay 0.25)
    :config
    (show-paren-mode -1))
#+end_src

** EWW
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/eww.el")
:END:

#+begin_src emacs-lisp
  (use-package eww
    :delight " EW"
    :hook
    (eww-after-render . my/eww-rename-buffer)
    :custom
    ;; set enough large column number to prevent from inserting line break
    (shr-width 10000)
    (shr-use-fonts nil)
    (shr-image-animate t)
    (eww-header-line-format nil)
    (shr-max-image-proportion 0.4)
    :config
    (bind-keys :map eww-mode-map
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("SPC" . my/forward-paragraph)
               ("E" . my/backward-paragraph)
               ("C" . eww-set-character-encoding)
               ("1" . eww-back-url)
               ("2" . shr-next-link)
               ("4" . eww-follow-link)
               ("C-j" . eww-follow-link)
               ("T" . eww-goto-title-heading)
               ("L" . my/eww-goto-heading)
               ("O" . my/eww-convert-to-org)
               :map eww-bookmark-mode-map
               ("C-j" . eww-bookmark-browse)))

  (defun my/eww-rename-buffer ()
    "Rename the name of current EWW buffer.

  If associated HTML file have a title tag, use title as a buffer name.
  Otherwise, use a current URL."
    (let ((title (plist-get eww-data :title))
          (url (file-name-base (eww-current-url))))
      (rename-buffer (format "eww: %s" (or (if (and title (> (length title) 0))
                                               title nil)
                                           url "")) t)))

  (defun my/eww-convert-to-org ()
    "Convert current html page into one org file and show it.

  This is handy if you would like to check a page index comfortably."
    (interactive)
    (let ((source (plist-get eww-data :source))
          (src-html (make-temp-file "source-"))
          (dst-org (expand-file-name (format "%s.org" (org-id-uuid)) "~/var/tmp/eww"))
          (coding-system-for-write 'utf-8-unix)
          (org-startup-folded t))
      (with-temp-buffer
        (insert source)
        (write-region (point-min) (point-max) src-html nil)
        (call-process-shell-command (format "pandoc %s -f html -t org -o %s"
                                            (shell-quote-argument src-html)
                                            (shell-quote-argument dst-org)))
        (delete-file src-html))
      (find-file dst-org t)
      (goto-char (point-min))
      (org-ctrl-c-tab)))

  (defun eww-headings-dom ()
    "Return heading list as a dom from xml."
    (let ((source (plist-get eww-data :source))
          (dom nil))
      (with-temp-buffer
        (let ((source-file (make-temp-file "source-"))
              (coding-system-for-write 'utf-8-unix))
          (insert source)
          (write-region (point-min) (point-max) source-file nil)
          (erase-buffer)
          (call-process "extract_headings" source-file t)
          (delete-file source-file)
          (libxml-parse-xml-region (point-min) (point-max))))))

  (defun eww-goto-title-heading ()
    "Set point to a line which contaings the possible heading."
    (interactive)
    (when-let* ((headings-dom (eww-headings-dom))
                (possible-heading (cl-reduce (lambda (node-a node-b)
                                               (if (not (bound-and-true-p node-a))
                                                   (if (not (bound-and-true-p node-b))
                                                       nil
                                                     node-b)
                                                 (if (>= (string-to-number (dom-attr node-a 'proximity))
                                                         (string-to-number (dom-attr node-b 'proximity)))
                                                     node-a node-b)))
                                             (dom-children headings-dom)
                                             :initial-value nil))
                (possible-text (dom-text possible-heading))
                (match-pos (or (re-search-forward (format "^*?[[:blank:]]*%s[[:blank:]]*$" (regexp-quote possible-text)) nil t 1)
                               (re-search-backward (format "^*?[[:blank:]]*%s[[:blank:]]*$" (regexp-quote possible-text)) nil t 1))))
      (beginning-of-line)
      (recenter-top-bottom 0)))

  (defun my/eww-goto-heading ()
    "Go to selected heading line."
    (interactive)
    (setq lexical-binding t)
    (when-let* ((headings-root (eww-headings-dom))
                (cur-buf (current-buffer))
                (heading (completing-read
                          "Heading : "
                          (mapcar (lambda (heading-node)
                                    (when-let* ((heading (dom-text heading-node))
                                                (tag (symbol-name (dom-tag heading-node)))
                                                (match-pos (string-match "h\\([1-6]\\{1\\}\\)" tag))
                                                (indent (- (string-to-number (match-string 1 tag)) 1)))
                                      (format "%s%s"
                                              (apply 'concat (make-list indent "  "))
                                              heading)))
                                  (dom-children headings-root))))
                (match (string-match "\\(?:  \\)*\\(.*\\)" heading))
                (heading (match-string 1 heading))
                (match-pos (or (re-search-forward (build-regex heading) nil t 1)
                               (re-search-backward (build-regex heading) nil t 1))))
      (with-current-buffer cur-buf
        (switch-to-buffer cur-buf)
        (beginning-of-line)
        (recenter-top-bottom 0))))

  (defmacro build-regex (str)
    "Return a regexp representation for `STR'."
    `(format "^[[:blank:]SVG Image]*%s[[:blank:]]*$"
             ,str))
#+end_src

*** extract_headings
#+begin_src python :tangle (expand-tangle-target ".local/bin/extract_headings") :tangle-mode (identity #o755)
  #!/usr/bin/env python3

  # This script extract most probable page heading.

  import sys
  import lxml.html as html
  from lxml import etree
  import difflib

  if len(sys.argv) == 1:
      INPUT_STR = sys.stdin.read()
      ROOT = html.fromstring(INPUT_STR).getroottree()
  else:
      sys.exit(1)

  OUT_ROOT = etree.Element("headings")

  # extract title text
  title = ''
  title_text_arr = ROOT.xpath('//title[1]//text()')
  if len(title_text_arr):
      title = title_text_arr[0]
      OUT_ROOT.set("title", title.strip())

  htag_text_arr = ROOT.xpath('//*[self::h1 or self::h2 or self::h3 or self::h4 or self::h5 or self::h6]')
  for i in range(len(htag_text_arr)):
      text = ''
      texts = htag_text_arr[i].xpath('.//text()')
      if len(texts) == 1:
          text = texts[0].strip()
      elif len(texts) > 1:
          text = ''.join(map(str.strip, texts))
      else:
          continue
      proximity = difflib.SequenceMatcher(None, title, text).ratio()
      heading = etree.Element(htag_text_arr[i].tag)
      heading.text = text
      heading.set('proximity', str(proximity))
      OUT_ROOT.append(heading)

  out_root_str = etree.tostring(OUT_ROOT, encoding='utf-8', method='xml', pretty_print=True)
  if type(out_root_str) is bytes:
      out_root_str = out_root_str.decode()
      print(out_root_str)
#+end_src

** [[https://github.com/djcb/mu/releases.atom][mu4e]]
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/mu4e.el")
:END:

You need to [[https://www.djcbsoftware.nl/code/mu/mu4e/Initializing-the-message-store.html][issue 'mu init' command]] after changing either maildir, email address or home-dir for mu.

#+begin_src emacs-lisp
  (use-package mu4e-utils
    :after org-contacts
    :delight
    (mu4e-main-mode    " MU")
    (mu4e-headers-mode " MU")
    (mu4e-view-mode    " MU")
    (mu4e-compose-mode " MU")
    :hook (after-init . mu4e~start)
    :custom
    (mu4e-mu-binary (expand-file-name "mu" "~/usr/bin"))
    (mail-user-agent 'mu4e-user-agent)
    (mu4e-hide-index-messages t)
    (mu4e-context-policy 'pick-first)
    (mu4e-compose-context-policy 'ask)
    (mu4e-update-interval 300)
    (mu4e-split-view t)
    (mu4e-headers-date-format "%y%m%d")
    (mu4e-headers-time-format " %R")
    (mu4e-headers-fields
     '((:human-date . 6)
       (:flags      . 3)
       (:from       . 16)
       (:subject)))
    (mu4e-headers-results-limit 1000)
    (mu4e-headers-advance-after-mark t)
    (mu4e-change-filenames-when-moving t)
    (mu4e-view-show-images t)
    (mu4e-html2text-command (lambda (msg)
                              (plist-put msg :body-html
                                         (with-temp-buffer
                                           (insert (or (mu4e-message-field msg :body-html) ""))
                                           (shell-command-on-region (point-min) (point-max) "nkf -w -Lu" (current-buffer) t)
                                           (or (buffer-string) "")))
                              (mu4e-shr2text msg)))
    (message-send-mail-function 'smtpmail-send-it)
    (mm-sign-option nil)
    (mml-secure-openpgp-sign-with-sender t)
    (mml-default-sign-method 'pgpmime)
    :config
    (require 'mu4e)
    (bind-keys :map mu4e-headers-mode-map
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("4" . mu4e-headers-view-message)
               ("C-j" . mu4e-headers-view-message)
               :map mu4e-view-mode-map
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("SPC" . my/forward-paragraph)
               ("E" . my/backward-paragraph)
               ("TAB" . shr-next-link)
               ("<backtab>" . shr-previous-link)
               ("3" . shr-next-link)
               ("4" . my/enter-thing-at-point)
               ("C-c C-a" . mu4e-view-attachment-action)
               :map mu4e-compose-mode-map
               ("C-x C-o" . org-mu4e-compose-org-mode))
    (add-to-list 'mu4e-view-actions
                 '("external browser" . mu4e-action-view-in-browser) t)
    (add-to-list 'mu4e-view-actions
                 '("XWidget View" . mu4e-action-view-with-xwidget) t)
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types)))
#+end_src

*** [[https://github.com/iqbalansari/mu4e-alert/releases.atom][mu4e-alert]]

#+begin_src emacs-lisp
  (use-package mu4e-alert
    :straight t
    :hook (after-init . (lambda ()
                          (mu4e-alert-enable-notifications)
                          (mu4e-alert-enable-mode-line-display)))
    :after mu4e
    :custom
    (mu4e-alert-modeline-formatter
     (lambda (count)
       (if (> count 0)
           (format " M:%d" count)
         "")))
    :config
    (mu4e-alert-set-default-style 'fringe))
#+end_src

*** additional tweaks

- file attachment in dired ([[https://www.djcbsoftware.nl/code/mu/mu4e/Dired.html][source]])
  : gnus-dired-attach (C-c RET C-a)

  #+begin_src emacs-lisp
    (use-package gnus-dired
      :after mu4e-compose
      :hook
      (dired-mode . turn-on-gnus-dired-mode)
      :custom
      (gnus-dired-mail-mode 'mu4e-user-agent))
  #+end_src

- use contact info from org-contacts

  #+begin_src emacs-lisp
    (use-package mu4e-actions
      :after org-contacts
      :config
      (setq mu4e-org-contacts-file (car org-contacts-files))
      (add-to-list 'mu4e-headers-actions
                   '("Contact to add" . mu4e-action-add-org-contact) t)
      (add-to-list 'mu4e-view-actions
                   '("Contact to add" . mu4e-action-add-org-contact) t))
  #+end_src

*** personal settings                           :crypt:

-----BEGIN PGP MESSAGE-----

hQEMA9uWvE5LJ2ejAQf/SAyyJGi3rfr2CpSC9cqiUy4CszLD4lNAuYDKZ0Zcsu1a
K7EEA/zfEgd8AZIvCLJoE5TU7HFtAWtuVJRxYUFhGX5uttQE7ukrmIZsKh1gHrqD
9hlY070RAQ8D/L4rbROJVsoYhg+E9owco6kX9MppTTJlu146UmvV09lrIp33bJFG
UaUKiNVItSX8pzuBKyHolLqTEP11cR8wzBIYjyO7DvMvj6Lgk1vQph1X9Lfqk35e
bI1Unf1H/t2Z6WuDOvfpbVh5x8n9oIXl0lLjDkuiyNET3xIdAgbgJGlixLcKwqBX
8BycC4r7FV2fpqRkcNvWCWOjt2Do/a/caSLBZjeSu9LqAbEuo9wiCAqLBuW3V0tH
/9lI7P8t6dUYI8K4VWU/u3egfLe5fbbM68VDT+ZEYMyunF4clw/LROx3SYHqh3Ye
aFTl5g0V5bhG6XOPNfD8WSIlx0FVxvBKHTuq9dms1rTBf+hO48zvl2hlkyeXTkC0
PL6JeDjiWOaUGwKFfFBG/em/mayuUrdltrFgTi7wdZ01Ydv0RfDKdPRe3GiX2XMY
e+qVnCNDQ6GGMrc5dnqA+qQC5rSyxP81Jb6rCDl4Py5/TCzRdrVmqRL9Rmqxynf8
badHyHyOcd0kXaphqxR4t2l1Ppbp5maaxjOxcBXcsrc4dVla97gpC1AkHns0GMEL
ZXjAUGJjdQJ9xbnMSCC9r871576WbZybkldXzr9YMUAUc04z98mxes678ooV0qbk
u+SJOv6uBH2OoLbuD8PMs7FAhvl/c0qcuLfAMaqoKH4xgjzEqiurZ5wtnqgisKEr
1jc1mM6J3R003fEDyi4RMza/be4anYIz5hH5uz6CWqSVp5EA36stQdENmkmzM31I
JzCLZcI1XlbRoVRDspyq48CArHEMqxDUn9wil5tgLGRq15gANcu+7MSeQ2gcOTG+
mP5EQmpnDOLCKepwltIm8WQtkIT7RDLJE260DkwXWuAlW/CtQO5TGgaTqRVv1A/3
5OgTGDhXSWSejyA2XuSbiJtyjW+8HSrDv0CZSzo8N0m5WBbM6xqoQAfAZ2m6T0X6
lyilVyRmOj72oy0tIApX0+vt+QvrTvD9iPt8LOnNR2YyEPei4GipOVx9yeBrLSQk
RlMGC+rFLgbkwaEBDx4vZS29bsl3o8MucdwcnK7ow4fXd2jAqndT8NRLK9QIhXwg
pPMU2xsxcgZCXkhAc66sWOP/vLoL3Cn74OXVACb8nT8fC4mWyefLguSnmsiX3vyI
OX4Qtz2KxxygRDa13bNdg/zk/k6KkHKAy6lCKiPfr+AWRnQKbXVtRRdPVd6yADuq
bW2BUZEpehu3Gw9pZ9UxdKNqCT5coHLlND32Su+1VyTuZrTOIfTxS39GOV93uSzY
pS8N2sKgC9UJ0bCaaJ1JaWaFcNb7rygSjYSrMZ+BSnX1K9RTl/ENrovVxP73/+v1
tAkBojuhvhYIyNYXUCGc9NU2pQxbOeIjhqaNOzmyRzpwuYEmFWUS/Y/Eyqt5XzSD
U/kx+2Wzd97YgjGpMwJmWdk2bBNSIQ5gCeU2QGeLNnMbr4mLP0frfHWkuo61iN2W
EcpcEillBEzi38UWA14cj5ASCkSQpn2WZUcozCv2cbSYT4n/sy55wl6t0YDJVWTZ
fbaJxAK0C8ziZYenirZvaroVRDXyvj1kkICkJGcnLidp0W2Y6G3OUmnOtk60bLF/
YjnaKMBLOLN1k5wMmUcWCPQzX8FCskFJoaiGzDbXeyZ/UnDqJpKSGxMG9yLZzyid
lDAmxVslTY94qV4=
=1X9o
-----END PGP MESSAGE-----

** [[https://github.com/skeeto/elfeed/releases.atom][elfeed]]
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/elfeed.el")
:END:

#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :delight
    (elfeed-show-mode   " EF")
    (elfeed-search-mode " EF")
    :commands (elfeed)
    :init
    (defface elfeed-search-unchecked-title-face
      nil
      "Face used in search mode for unchecked entry titles."
      :group 'elfeed)
    (defface elfeed-search-checked-title-face
      nil
      "Face used in search mode for checked entry titles."
      :group 'elfeed)
    :custom-face
    (elfeed-search-title-face ((t (:foreground "#4D4D4D"))))
    (elfeed-search-unchecked-title-face ((t (:foreground "cornflowerblue"))))
    (elfeed-search-checked-title-face ((t (:foreground "darkblue"))))
    :custom
    (elfeed-use-curl t)
    (elfeed-curl-program-name (expand-file-name "curl" "~/usr/bin"))
    (elfeed-db-directory (expand-file-name "~/var/lib/elfeed"))
    (elfeed-search-date-format '("%Y%m%d" 8 :left))
    (elfeed-search-title-min-width 100)
    (elfeed-search-title-max-width 120)
    (elfeed-search-trailing-width 160)
    (elfeed-sort-order 'ascending)
    (elfeed-enclosure-default-dir "~/Downloads/")
    (elfeed-save-multiple-enclosures-without-asking t)
    :config
    (setf elfeed-search-print-entry-function
          'my/elfeed-search-print-entry)
    (defalias 'elfeed-search-tag-all-unchecked
      (elfeed-expose #'elfeed-search-tag-all 'unchecked)
      "Add the `unchecked' tag to all selected entries.")
    (defalias 'elfeed-search-untag-all-unchecked
      (elfeed-expose #'elfeed-search-untag-all 'unchecked)
      "Remove the `unchecked' tag from all selected entries.")
    (defalias 'elfeed-search-tag-all-checked
      (elfeed-expose #'elfeed-search-tag-all 'checked)
      "Add the `checked' tag to all selected entries.")
    (defalias 'elfeed-search-untag-all-checked
      (elfeed-expose #'elfeed-search-untag-all 'checked)
      "Remove the `checked' tag from all selected entries.")
    (bind-keys :map elfeed-search-mode-map
               ("C-j" . elfeed-search-show-entry)
               ("o" . elfeed-search-open-url)
               ("C-c C-o" . elfeed-search-open-url)
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("q" . elfeed-kill-buffer)
               ("Q" . quit-window)
               ("x" . elfeed-search-update--force)
               ("c" . (lambda () (interactive)
                        (elfeed-search-untag-all-unread)
                        (unless (use-region-p) (forward-line -1))
                        (elfeed-search-tag-all-unchecked)))
               ("C" . elfeed-search-untag-all-unchecked)
               ("r" . (lambda () (interactive)
                        (elfeed-search-untag-all-unread)
                        (unless (use-region-p) (forward-line -1))
                        (elfeed-search-untag-all-unchecked)
                        (unless (use-region-p) (forward-line -1))
                        (elfeed-search-tag-all-checked)
                        (unless (use-region-p) (forward-line -1))
                        (elfeed-search-tag-all (intern (format-time-string "%Y%m%d")))))
               ("R" . elfeed-search-untag-all-checked)
               ("d" . elfeed-search-untag-all-unread)
               ("Dv" . elfeed-search-download-video)
               ("Da" . elfeed-search-download-audio)
               ("D=" . elfeed-search-show-media-duration)
               ("X" . elfeed-search-org-capture-derived)
               :map elfeed-show-mode-map
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("SPC" . my/forward-paragraph)
               ("E" . my/backward-paragraph)
               ("4" . my/enter-thing-at-point)
               ("TAB" . shr-next-link))
    (add-to-list 'elfeed-search-face-alist '(unchecked elfeed-search-unchecked-title-face))
    (add-to-list 'elfeed-search-face-alist '(checked elfeed-search-checked-title-face)))

  (defun my/elfeed-search-print-entry (entry)
    "Print ENTRY to the buffer with my style."
    (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (mapconcat
                      (lambda (s) (propertize s 'face 'elfeed-search-tag-face))
                      tags ","))
           (title-width (- (window-width) 10 elfeed-search-trailing-width))
           (title-column (elfeed-format-column
                          title (elfeed-clamp
                                 elfeed-search-title-min-width
                                 title-width
                                 elfeed-search-title-max-width)
                          :left)))
      (when feed-title
        (insert (propertize (elfeed-format-column feed-title 6 :left)
                            'face 'elfeed-search-feed-face) " "))
      (insert (propertize title-column 'face title-faces 'kbd-help title) " ")
      (insert (propertize date 'face 'elfeed-search-date-face) " ")
      (when tags
        (insert "(" tags-str ")"))))

  (defun elfeed-search-open-url ()
    "Visit the current entry in your browser using 'eww-browse-url'."
    (interactive)
    (let ((browse-url-browser-function 'open-url))
      (elfeed-search-untag-all-unchecked)
      (unless (use-region-p) (forward-line -1))
      (elfeed-search-tag-all-checked)
      (unless (use-region-p) (forward-line -1))
      (elfeed-search-tag-all (intern (format-time-string "%Y%m%d")))
      (unless (use-region-p) (forward-line -1))
      (elfeed-search-browse-url)))

  (defun elfeed-search-download-video ()
    "Downlaod video file."
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               when (or (caar (elfeed-entry-enclosures entry))
                        (elfeed-entry-link entry))
               do (let ((title (elfeed-entry-title entry)))
                    (my/download-video it title)))
      (mapc #'elfeed-search-update-entry entries)
      (unless (or elfeed-search-remain-on-entry (use-region-p))
        (forward-line))))

  (defun elfeed-search-download-audio ()
    "Download audio file."
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               when (or (caar (elfeed-entry-enclosures entry))
                        (elfeed-entry-link entry))
               do (let ((title (elfeed-entry-title entry)))
                    (my/download-audio it title)))
      (mapc #'elfeed-search-update-entry entries)
      (unless (or elfeed-search-remain-on-entry (use-region-p))
        (forward-line))))

  (defun elfeed-search-show-media-duration ()
    "Show duration of media attached to current entry."
    (interactive)
    (let* ((entry (elfeed-search-selected :single))
           (url (or (caar (elfeed-entry-enclosures entry))
                    (elfeed-entry-link entry))))
      (show-media-duration url)))

  (defun elfeed-search-org-capture-derived (&optional arg)
    "Create actionable org task derived from current elfeed entry.

  If called with C-u prefix, ask user to specify tags and target."
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (save-window-excursion
        (cl-loop for entry in entries
                 do (progn
                      (elfeed-show-entry entry)
                      (let ((org-capture-derived-todo org-todo-keyword-3)
                            (org-capture-derived-tags (format ":web:%s"
                                                              (cond
                                                               ((or (member 'video (elfeed-entry-tags entry))
                                                                    (member 'audio (elfeed-entry-tags entry)))
                                                                "ac_watch:")
                                                               (t "ac_read:"))))
                            (org-capture-derived-target "68d74115-1f70-448d-a76e-738e32b272d8")
                            (org-capture-derived-deadline-in-day 7))
                        (call-interactively #'org-capture-derived))
                      (elfeed-kill-buffer))))
      (elfeed-search-untag-all-unchecked)
      (unless (use-region-p) (forward-line -1))
      (elfeed-search-tag-all-checked)
      (mapc #'elfeed-search-update-entry entries)))
#+end_src

*** [[https://github.com/remyhonig/elfeed-org/releases.atom][elfeed-org]]

#+begin_src emacs-lisp
  (use-package elfeed-org
    :straight t
    :after (elfeed org)
    :custom
    (rmh-elfeed-org-files '("~/org/index/feed.org" "~/git/new_dotfiles/dotemacs.org"))
    (rmh-elfeed-org-ignore-tag "ignore")
    (rmh-elfeed-org-auto-ignore-invalid-feeds t)
    :config
    (elfeed-org))
#+end_src

*** personal tagging rules                      :crypt:

-----BEGIN PGP MESSAGE-----

hQEMA9uWvE5LJ2ejAQf8Ds9NGaRr8jpKfqEreKEOiV+fJp02H+w92XTv6yFu5jYY
8/cvKEYSsRYlzeLhZ65iDxBxqEnYlmv1FK2MzQbi8/enDAqo5z/A0gFan+oLWyP2
vXfO246vk+HnbxciuO1QZDIDMHdABFs9isQ0+/TSZ1irUDQbolepVuJs8RTqpvJ4
ogrkt+KSkWEuA+05yRcFAAPst0lMFvC2wNDN7uzW/NX1PDryzYJT2C3Hre50bXeN
4FqiWbLzcYP33iPlRZ5mc7e7AcUnl+TD/f/e6rZv53beAme2SXrOAeDmKnK5c+oU
QVBAYqAt6Yet/lZTELCJo2FiCmCDPZyjNAd9T0igZtLpAb4vhh3g5G8sdT5TtjL0
sBhQ+YhqcUlB7cda65b6UwQdFAB8QzJwC1ixHCobPDoEq1Q68dpWoh4Qm5buhCDm
3Zurn4oB1SqSYrs7d75DlD3zWzLgejJGc3aFVuKRl+ix+Kafmlx7Tdhxim2KJWDp
ahMFF4WWrC1gD3oIaz/ypFwXy02DoEBhf1+QW3EyFFIGvGk/7j8s30mN/U1Yv6Fv
J/l9hDR+AHVf7VG5b/kprNHcb2GQFdGr3ZTMFn+fK4rGAuYdKyNYzubOntmli06G
Zk5erOOfQM6JXFCZy8OxgcApW6LMbHMjWfRWou6s90NAKGH4rISd6nXDSFZlpubS
i95Qi0cJqixqmROI45rxpXLW5BS4TuwUviF7PuE+i3ZFvVRopTSFfAgCBcOOhB4U
0MNTuItdt3xVSbJTnIgirriAquXhoOAaYXicacgAcD0af2Pu5bQdJuHttn/JvVWU
WpGboJGLpo3rmXHcaWLrNvCO6o3MUdhn/KxEZDYtnMHK3lU/GImgp2CZmmtnRR0l
3Dpjj2t45xphH9L6L/cbJOjVf0LXz3HPC2cGhhKjIuTQ4OBmWy1bcQgM/aKyps3E
AztE/GYZ55S7f7NWPwVHrvHhqYL8oECXqVZXArrfR9ce+V9ONJfCpPY9YaBOfQU3
9Kr7XqGSNeQeZJn2wyAUUlXAtKmCxm2DqGBB0gmtmdM9mHGttPYqKXrEXyyd7Ncq
tdIjc58mGXwilPD6GGO32CNvJx8HPlAdEACReNIkIeuGbNBOhpcnQ9a7tb1feToo
rj9LnUzqDTBf2OcgnaQQKnNi5Sh96e8UqfyX+QtQ5SeBmSS621SGelQL3FIhePos
xxX4PiDuzOLUxaK9nxmO5QNXxx1bcxgRznBzJTF7h5Ttn3rMTY0zV7h8748K/phi
MQzj2qLFN3NkFRnUUE720PRvU8gadNcRwXmthuIcA/2P/65/nnhZw69RvsA2+Y6d
uxpGBDs9/n/vrN622GDWQdXrGToBGL9WA1Os9KtO/q9NBYIbj5ohUvPwNisEcyrJ
10LOq2e13nk5yGEtjznq4O96o7Bgj4PfnnqSXZ1D2zDVgt/xVuz1FX9tnOsp6De6
pj33Rl7Q056/4kDd+noyNSNmT5noMs0btG1iqO+6SCkOsPEtHsDJIacDinFbEShu
dMv+byk5Rw==
=bWDq
-----END PGP MESSAGE-----

** Dired
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/dired.el")
:END:

#+begin_src emacs-lisp
  (use-package dired
    :bind (:map dired-mode-map
                ("(" . dired-hide-details-mode)
                (")" . dired-hide-details-mode)
                ("E" . dired-create-empty-file)
                ("Y" . dired-do-relsymlink)
                ("r" . wdired-change-to-wdired-mode)
                ("C-o" . nil)
                ("o" . my/dired-open)
                ("C-c C-o" . my/dired-open)
                ("C-c C-s" . my/dired-share))
    :hook (dired-mode . dired-hide-details-mode)
    :custom
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'top)
    (dired-listing-switches "-ahgG --time-style=iso --group-directories-first")
    (dired-dwim-target 'dired-dwim-target-recent)
    (dired-hide-details-hide-information-lines nil)
    :config
    (put 'dired-find-alternate-file 'disabled nil)
    (setq dired-isearch-filenames t)
    (advice-add #'dired-do-delete :around #'my/advice-dired-control-deletion)
    (advice-add #'dired-do-flagged-delete :around #'my/advice-dired-control-deletion))

  (defun my/advice-dired-control-deletion (oldfun &rest r)
    "Enable file deleting functions to control deleting procedure
  whether files are going to be in trash box."
    (let ((delete-by-moving-to-trash
           (if (equal current-prefix-arg '(4))
               nil t)))
      (apply oldfun (cdr r))))

  (defun my/dired-open (&optional arg)
    "Open file in Dired.

  File is either on current line or marked targets.
  Optional argument `ARG' is passed to `my/view-file'."
    (interactive "P")
    (let ((files (dired-get-marked-files nil nil)))
      (mapc (lambda (file)
              (if (equal arg '(4))
                  (find-file file)
                (my/view-file file arg)))
            files)))

  (defun my/dired-share ()
    "Share file with remote device via KDE Connect."
    (interactive)
    (let ((files (dired-get-marked-files nil nil)))
      (mapc (lambda (file)
              (shell-command
               (mapconcat 'identity
                          (list "kdeconnect-cli" "-d" "a30587ededf4c2d2"
                                "--share" (shell-quote-argument
                                           file)) " ")))
            files)))
#+end_src

*** [[https://github.com/stsquad/dired-rsync/releases.atom][dired-rsync]]

#+begin_src emacs-lisp
  (use-package dired-rsync
    :straight t
    :after dired
    :bind (:map dired-mode-map
                ("C-c C-r" . dired-rsync))
    :custom
    (dired-rsync-options "-auz --info=progress2"))
#+end_src

*** [[https://github.com/crocket/dired-single/releases.atom][dired-single]]

#+begin_src emacs-lisp
  (use-package dired-single
    :straight t
    :after dired
    :bind (:map dired-mode-map
                ("C-j" . dired-single-buffer)
                ("^" . dired-single-up-directory)))
#+end_src

*** [[https://github.com/Fuco1/dired-hacks/releases.atom][dired-hacks]]

#+begin_src emacs-lisp
  (use-package dired-subtree
    :straight t
    :after dired
    :bind (:map dired-mode-map
                ("TAB" . dired-subtree-cycle)))

  (use-package dired-narrow
    :straight t
    :after dired
    :bind
    (:map dired-mode-map
          ("z" . dired-narrow))
    (:map dired-narrow-map
          ("C-j" . exit-minibuffer)))
#+end_src

*** [[https://github.com/mattiasb/dired-hide-dotfiles/releases.atom][dired-hide-dotfiles]]

#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :straight t
    :after dired
    :bind (:map dired-mode-map
                ("," . dired-clean-directory)
                ("." . dired-hide-dotfiles-mode))
    :config
    (dired-hide-dotfiles-mode -1))
#+end_src

*** [[https://github.com/emacs-straight/dired-du/releases.atom][dired-du]]

#+begin_src emacs-lisp
  (use-package dired-du
    :straight t
    :after dired
    :diminish ((dired-du-mode . "du"))
    :bind (:map dired-mode-map
                ("C-M-S-u" . dired-du-mode))
    :custom
    (dired-du-size-format t))
#+end_src

** Shells
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/shell.el")
:END:

*** shell

#+begin_src emacs-lisp
  (use-package shell
    :delight " SM"
    :commands (shell)
    :config
    (bind-keys :map shell-mode-map
               ("C-j" . comint-send-input)))
#+end_src

*** term

#+begin_src emacs-lisp
  (use-package term
    :delight
    (term-mode " TR")
    :config
    (bind-keys :map term-mode-map
               ("C-j" . term-send-input)))
#+end_src

*** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :commands (vterm)
    :delight " VT"
    :diminish ((vterm-copy-mode . "vc"))
    :bind
    :custom
    (vterm-min-window-width 55)
    (vterm-buffer-name-string "vterm %s")
    :config
    (bind-keys :map vterm-mode-map
               ("C-h" . vterm-send-backspace)
               ("M-h" . vterm-send-meta-backspace)
               ("C-y" . vterm-yank)
               ("M-y" . vterm-yank-pop)
               ("C-o" . nil)
               ("M-l" . nil)
               :map vterm-copy-mode-map
               ("C-j" . vterm-copy-mode-done))
    (advice-add 'consult-yank-from-kill-ring :around #'advice/vterm-yank-pop))

  (defun advice/vterm-yank-pop (orig-fun &rest args)
    (if (equal major-mode 'vterm-mode)
        (let ((inhibit-read-only t)
              (yank-undo-function (lambda (_start _end) (vterm-undo))))
          (cl-letf (((symbol-function 'insert-for-yank)
                     (lambda (str) (vterm-send-string str t))))
            (apply orig-fun args)))
      (apply orig-fun args)))
#+end_src

*** eshell

#+begin_src emacs-lisp
  (use-package eshell
    :delight " ES"
    :hook
    (eshell-kill . eshell-command-alert)
    :custom
    (eshell-prompt-function
     #'(lambda ()
         (format "[%s]\n%s"
                 (eshell/basename (eshell/pwd))
                 (if (= (user-uid) 0) "# " "$ "))))
    (eshell-prompt-regexp "[#$] ")
    (eshell-visual-subcommands '(("git" "log" "diff" "show")))
    :config
    (setq eshell-path-env (getenv "PATH"))
    (bind-keys :map eshell-mode-map
               ("C-j"    . eshell-send-input)
               ("<up>"   . previous-line)
               ("<down>" . next-line)))

  (defun eshell-command-alert (process status)
    "Send `alert' with severity based on STATUS when PROCESS finished."
    (let* ((cmd (process-command process))
           (buffer (process-buffer process))
           (msg (format "%s: %s" (mapconcat 'identity cmd " ")  status)))
      (if (string-prefix-p "finished" status)
          (alert msg :buffer buffer :severity  'normal)
        (alert msg :buffer buffer :severity 'urgent))))
#+end_src

** org mode
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/org.el")
:END:

*** org

#+begin_src emacs-lisp
  (use-package org
    :straight t
    :defer t
    :mode (("\\.org$" . org-mode))
    :interpreter (("org" . org-mode))
    :init
    (add-to-list 'load-path (concat (file-name-as-directory user-emacs-directory) "straight/repos/org/lisp"))
    (add-to-list 'load-path (concat (file-name-as-directory user-emacs-directory) "straight/repos/org/contrib/lisp"))
    (defvar org-warning-keyword-0 "UG" "TODO keyword acronym standing for 'UrGent'")
    (defvar org-todo-keyword-0 "TD" "TODO keyword acronym standing for 'To Do'")
    (defvar org-todo-keyword-1 "GO" "TODO keyword acronym standing for 'Get On'")
    (defvar org-todo-keyword-2 "IP" "TODO keyword acronym standing for 'In Progressn'")
    (defvar org-todo-keyword-3 "AC" "TODO keyword acronym standing for 'doABle'")
    (defvar org-todo-keyword-4 "SD" "TODO keyword acronym standing for 'SomeDay'")
    (defvar org-done-keyword-0 "DN" "TODO keyword acronym standing for 'DoNe'")
    (defvar org-done-keyword-1 "CX" "TODO keyword acronym standing for 'Cancel'")
    (defvar org-done-keyword-2 "PD" "TODO keyword acronym standing for 'PenDing'")
    :hook (org-after-todo-state-change . save-buffer)
    :custom
    (org-directory (expand-file-name "~/org"))
    (org-special-ctrl-a/e t)
    (org-adapt-indentation nil)
    (org-hide-emphasis-markers t)
    (org-bookmark-names-plist nil)
    ;; inline image
    (org-startup-with-inline-images t)
    (org-display-remote-inline-images 'cache)
    ;; do not split line at point
    (org-M-RET-may-split-line '((default . nil)))
    :config
    (require 'org-habit)
    (require 'org-mu4e)

    ;; local key bindings
    (bind-keys :map org-mode-map
               ("C-j"     . org-return)
               ("C-m"     . org-return-indent)
               ("M-j"     . org-meta-return)
               ("C-S-p"   . org-previous-item)
               ("C-S-n"   . org-next-item)
               ("C-S-u"   . org-up-element)
               ("C-$"     . org-down-element)
               ("C-<"     . org-previous-link)
               ("C->"     . org-next-link)
               ("C-c @"   . org-mark-element)
               ("C-c C-SPC" . org-mark-subtree)
               ("C-c D v" . org-download-video-link-at-point)
               ("C-c D a" . org-download-audio-link-at-point)
               ("C-c D =" . org-show-media-duration-at-point)
               ("C-c !"   . org-readable)
               ("C-c C-a" . nil)
               ("C-,"     . nil)
               ("M-h"     . nil))

    ;; attach
    (setq org-attach-preferred-new-method nil)

    ;; link
    (setq org-confirm-elisp-link-function nil) ; do not confirm when execute elisp
    (org-link-set-parameters
     "src" :follow #'org-babel-ref-resolve)
    (defun org-open-at-point-link ()
      "This function is responsible for org links when user calls `org-open-at-point'."
      (let* ((context (org-element-lineage
                       (org-element-context)
                       '(link)
                       t))
             (type (org-element-property :type context))
             (path (org-element-property :path context))
             (app (org-element-property :application context))
             (search-option (org-element-property :search-option context)))
        (if (stringp type)
            (cond
             ((string-match-p "https?" type)
              (let ((url-pos (split-location-uri (org-link-unescape (concat type ":" path)))))
                (cl-case (prefix-numeric-value current-prefix-arg)
                  (16 (browse-url-default-browser (car url-pos)))
                  (4 (eww-browse-url (car url-pos)))
                  (t (open-url (car url-pos) (cadr url-pos))))
                t))
             ((string= type "file")
              (let ((line-search (cond ((not search-option) nil)
                                       ((string-match-p "\\`[0-9]+\\'" search-option)
                                        (list (string-to-number search-option)))
                                       (t (list nil search-option)))))
                (apply #'my/org-open-file
                       path
                       (cond
                        ((equal app "sys") 'system)
                        ((equal app "emacs") 'emacs)
                        (t nil))
                       line-search))
              t))
          (my/enter-thing-at-point))))
    (add-to-list 'org-open-at-point-functions 'org-open-at-point-link)
    (setq org-file-apps
          '((t . (lambda (file-path link-string)
                   (my/view-file file-path)))))
    (org-add-link-type
     "sudo"
     (lambda (cmd)
       "Run CMD with sudo."
       (shell-command
        (concat "echo " (shell-quote-argument (read-passwd "Password? "))
                " | sudo -S " cmd))))

    ;; basic
    (setq org-hide-leading-stars t)
    (setq org-comment-string "####")
    (setq org-pretty-entities t)
    (setq org-use-sub-superscripts '{}) ; use _{}/^{} for sub/super script

    ;; display
    (add-hook 'org-mode-hook
              (lambda ()
                (setq-local truncate-lines t)))

    ;; tag/property
    (setq org-use-tag-inheritance "ARCHIVE")
    (setq org-tags-column -57)
    (setq org-global-properties
          '(("Effort_ALL". "0 0:10 0:20 0:30 1:00 1:30 2:00 3:00 4:00 6:00 8:00")))
    (setq org-use-property-inheritance "TIMELIMIT.*")
    (setq org-highest-priority ?A)
    (setq org-lowest-priority ?Z)
    (setq org-default-priority ?E)

    ;; todo
    (setq org-enforce-todo-dependencies t)
    (setq org-todo-keywords
          `((sequence ,(format "%s(t/!)" org-todo-keyword-0)
                      ,(format "%s(u/!)" org-warning-keyword-0)
                      ,(format "%s(g/!)" org-todo-keyword-1)
                      ,(format "%s(i/!)" org-todo-keyword-2)
                      "|"
                      ,(format "%s(d/@)" org-done-keyword-0)
                      ,(format "%s(x/@)" org-done-keyword-1)
                      ,(format "%s(p/@)" org-done-keyword-2))
            (sequence ,(format "%s(a/!)" org-todo-keyword-3)
                      "|"
                      ,(format "%s(d/@)" org-done-keyword-0)
                      ,(format "%s(x/@)" org-done-keyword-1)
                      ,(format "%s(p/@)" org-done-keyword-2))
            (sequence ,(format "%s(t/!)" org-todo-keyword-0)
                      ,(format "%s(s/!)" org-todo-keyword-4)
                      "|"
                      ,(format "%s(x/@)" org-done-keyword-1)
                      ,(format "%s(p/@)" org-done-keyword-2))))
    (setq org-todo-keyword-faces
          `((,org-warning-keyword-0 . "red1")
            (,org-todo-keyword-0    . "green1")
            (,org-todo-keyword-1    . "DeepPink1")
            (,org-todo-keyword-2    . "DodgerBlue1")
            (,org-todo-keyword-3    . "chocolate")
            (,org-todo-keyword-4    . "SpringGreen")
            (,org-done-keyword-0    . "gray30")
            (,org-done-keyword-1    . "dark gray")
            (,org-done-keyword-2    . "sea green")))
    (add-hook  'org-after-todo-state-change-hook
               (lambda ()
                 (save-excursion
                   (let* ((element (org-element-at-point))
                          (todo-state (org-get-todo-state))
                          (tags (org-get-tags))
                          (priority (org-element-property :priority element))
                          (category (org-entry-get (point) "CATEGORY"))
                          (style (org-entry-get (point) "STYLE")))
                     ;; remove priority level when the to-do state is changed to DN|CX|PD
                     (when (and
                            (s-matches? (format "%1$s\\|%2$s\\|%3$s"
                                                org-done-keyword-0
                                                org-done-keyword-1
                                                org-done-keyword-2)
                                        todo-state)
                            (bound-and-true-p priority))
                       (org-priority ? ))
                     ;; remove DN state if CATEGORY of the entry is "Cyclic"
                     (when (and (string= category "Cyclic")
                                (string= todo-state org-done-keyword-0)
                                (not (member "web" tags))
                                (not (string= style "habit")))
                       (org-todo ""))))))
    (add-hook 'org-after-todo-statistics-hook
              (lambda (n-done n-not-done)
                "Switch project entry to DONE when all subentries are done, to empty otherwise."
                (when (member "project" (org-get-tags))
                  (org-todo (if (= n-not-done 0)
                                (prog1 org-done-keyword-0
                                  (org-add-planning-info 'closed "now"))
                              "")))))

    ;; time
    (setq org-duration-format
          '(("d" . nil)
            (special . h:mm)))

    ;; time-stamp
    (setq org-time-stamp-custom-formats
          '("<%m-%d %a>" . "<%H:%M>"))
    (defun org-display-iso-week-at-point ()
      "Display ISO 8601 week number correspoinds to time stamp at point."
      (interactive)
      (let ((ts (org-timestamp-at-point)))
        (when ts
          (message "W%s" (format-time-string "%V" (org-read-date nil t ts nil))))))
    (defun org-timestamp-at-point ()
      "Return time stamp string at point."
      (let ((ts-bound (org-in-regexp (org-re-timestamp 'all))))
        (when ts-bound
          (buffer-substring (car ts-bound) (cdr ts-bound)))))

    ;; logging
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-log-states-order-reversed t)
    (setq org-reverse-note-order nil)
    (add-hook 'org-log-buffer-setup-hook
              (lambda ()
                (setq skk-dcomp-activate 'eolp)
                (setq skk-dcomp-multiple-activate nil)))

    ;; clock table
    ;;; work around for the bug in emacs 25
    (defalias 'calendar-absolute-from-iso 'calendar-iso-to-absolute)

    ;; image
    (setq org-image-actual-width 100)

    ;; structure template
    (add-to-list 'org-structure-template-alist (cons "sh" "src shell"))
    (add-to-list 'org-structure-template-alist (cons "el" "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist (cons "py" "src python")))
#+end_src

*** org-agenda

#+begin_src emacs-lisp
  (use-package org-agenda
    :after (org org-ql my/org-archive)
    :bind (:map org-agenda-mode-map
                ("C-j" . org-agenda-switch-to)
                ("M" . org-agenda-month-view))
    :hook
    (org-agenda-mode . (lambda ()
                         (delete-other-windows)
                         (org-agenda-to-appt t '((category "appt")))))
    :custom
    (org-agenda-start-on-weekday 1)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-include-diary t)
    ;; following three are for fast agenda view building
    (org-agenda-inhibit-startup t)
    (org-agenda-dim-blocked-tasks nil)
    (org-agenda-use-tag-inheritance nil)
    (org-agenda-files (directory-files (expand-file-name "agenda" org-directory) t "\.org$"))
    (org-agenda-prefix-format '((agenda   . "%?-12t% s")
                                (timeline . "  %s")
                                (todo     . " ")
                                (tags     . " ")
                                (search   . " ")))
    (org-agenda-custom-commands
     `(("a" "Week-agenda"
        agenda ""
        ((org-agenda-skip-function
          (lambda ()
            ;; skip entry which has 'web' tag even if it has deadline
            (and (save-excursion
                   (let ((tags (org-get-tags)))
                     (member "web" tags)))
                 (progn (outline-next-heading) (point)))))))
       ("r" . "Search for all record files")
       ("rs" "Entries containing search words entry or headline."
        search ""
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(time-down))))
       ("rm" "Match a TAGS/PROP/TODO query in record file"
        tags ""
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(time-down))))
       ("o" . "someday list")
       ("om" "someday to craft"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags-expanded "AC_CRAFT"))
                              ((org-ql-block-header "Someday to craft"))))
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(priority-down))))
       ("op" "someday to purchase"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags "ac_purchase"))
                              ((org-ql-block-header "Someday to purchase"))))
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(priority-down))))
       ("oc" "someday to cook"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags "ac_cook"))
                              ((org-ql-block-header "Someday to cook"))))
        ((org-agenda-files my/org-archive-files)
         (org-agenda-sorting-strategy '(priority-down))))
       ("O" "all someday entries"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags-expanded "AC_CRAFT"))
                              ((org-ql-block-header "Someday to craft")))
         (org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags "ac_purchase"))
                              ((org-ql-block-header "Someday to purchase")))
         (org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (tags "ac_cook"))
                              ((org-ql-block-header "Someday to cook")))
         (org-ql-search-block `(and (todo ,org-todo-keyword-4)
                                    (not (tags-expanded "ac_purchase" "ac_cook" "AC_CRAFT")))
                              ((org-ql-block-header "Someday things"))))
        ((org-agenda-files my/org-archive-files)))
       ("l" "Log entries in a week"
        agenda ""
        ((org-agenda-span (if (equal current-prefix-arg '(4))
                              'day 'week))
         (org-agenda-start-with-log-mode t)
         (org-agenda-include-inactive-timestamps nil)
         (org-agenda-include-diary t)
         (org-agenda-sorting-strategy
          '(time-up
            deadline-up
            todo-state-up
            priority-down))))
       ("L" "Log entry timeline on today with default org-agenda-prefix-format"
        agenda ""
        ((org-agenda-prefix-format (eval (car (get 'org-agenda-prefix-format 'standard-value))))
         (org-agenda-span (if (equal current-prefix-arg '(4))
                              'day 'week))
         (org-agenda-start-with-log-mode t)
         (org-agenda-include-inactive-timestamps nil)
         (org-agenda-include-diary t)
         (org-agenda-sorting-strategy
          '(time-up
            deadline-up
            todo-state-up
            priority-down))))
       ;; KEEP IN MIND
       ;; invoking `org-clock-sum-all' is required before showing effort table
       ("e" . "Effort table")
       ("ei" "today"
        ((org-ql-search-block `(or (todo ,org-warning-keyword-0)
                                   (todo ,org-todo-keyword-2)
                                   (and (clocked :on today)
                                        (or (todo) (done))
                                        (not (habit))
                                        (not (tags "web"))))
                              ((org-ql-block-header "Today's task"))))
        ((org-agenda-overriding-header "Today's Task")
         (org-overriding-columns-format "%26ITEM(Task) %Effort(Effort){:} %CLOCKSUM_T(Today){:} %CLOCKSUM(Total)")
         (org-agenda-view-columns-initially t)
         (org-agenda-sorting-strategy '(todo-state-up priority-down deadline-up))))
       ("eg" "this week"
        ((org-ql-search-block `(or (todo ,org-warning-keyword-0)
                                   (todo ,org-todo-keyword-1)
                                   (todo ,org-todo-keyword-2))
                              ((org-ql-block-header "This Week's task"))))
        ((org-agenda-overriding-header "This Week's Task")
         (org-overriding-columns-format "%26ITEM(Task) %Effort(Effort){:} %CLOCKSUM_T(Today){:} %CLOCKSUM(Total)")
         (org-agenda-view-columns-initially t)
         (org-agenda-sorting-strategy '(todo-state-up priority-down deadline-up))))
       ("ed" "done task"
        ((org-ql-search-block `(or (todo ,org-done-keyword-0)
                                   (todo ,org-done-keyword-1)
                                   (todo ,org-done-keyword-2))
                              ((org-ql-block-header "Done task"))))
        ((org-agenda-overriding-header "Done Task")
         (org-overriding-columns-format "%26ITEM(Task) %Effort(Effort){:} %CLOCKSUM(Total){:}")
         (org-agenda-view-columns-initially t)
         (org-agenda-sorting-strategy '(todo-state-up priority-down deadline-up))))
       ("i" "Today's agenda"
        ((todo "Today's agenda"
               ((org-agenda-sorting-strategy '(priority-up))))
         (org-ql-search-block `(heading ,(format-time-string "%Y-%m-%d %A"))
                              ((org-agenda-files `(,(my/org-archive-file)))
                               (org-ql-block-header "Today's tree node")))
         (org-ql-search-block `(or (todo ,org-warning-keyword-0)
                                   (todo ,org-todo-keyword-2))
                              ((org-ql-block-header "Today's task")))
         (org-ql-search-block `(and (planning :on today)
                                    (not (todo ,org-todo-keyword-2
                                               ,org-done-keyword-0
                                               ,org-done-keyword-1
                                               ,org-done-keyword-2))
                                    (not (tags "web"))
                                    (not (habit)))
                              ((org-ql-block-header "Scheduled/Deadlined on today")))
         (org-ql-search-block `(and (habit)
                                    (todo ,org-todo-keyword-0)
                                    (scheduled :to today)
                                    (not (tags "bad_habit"))
                                    (not (tags-inherited "ARCHIVE")))
                              ((org-ql-block-header "Habits to take")))
         (org-ql-search-block `(and (ts-active :on today)
                                    (not (or (todo ,org-todo-keyword-2)
                                             (habit) (done))))
                              ((org-ql-block-header "Today's common event")))
         (org-ql-search-block '(and (done)
                                    (closed :on today))
                              ((org-ql-block-header "Completed tasks on today")))))
       ("g" "This Week's agenda"
        ((org-ql-search-block `(heading ,(format-time-string "%G-W%V"))
                              ((org-agenda-files `(,(my/org-archive-file)))
                               (org-ql-block-header "This week's tree")))
         (org-ql-search-block `(or (todo ,org-todo-keyword-1))
                              ((org-ql-block-header "This week's tasks")))
         (org-ql-search-block `(or (todo ,org-warning-keyword-0)
                                   (todo ,org-todo-keyword-2))
                              ((org-ql-block-header "Today's tasks")))
         (org-ql-search-block `(and (planning :from 0 :to 6)
                                    (not (todo ,org-todo-keyword-2
                                               ,org-done-keyword-0
                                               ,org-done-keyword-1
                                               ,org-done-keyword-2))
                                    (not (tags "web"))
                                    (not (habit)))
                              ((org-ql-block-header "Scheduled/Deadlined this week")))
         (org-ql-search-block `(and (and (ts-active :from 0 :to 6)
                                         (not (deadline))
                                         (not (scheduled))
                                         (not (closed)))
                                    (not (or (todo ,org-todo-keyword-1
                                                   ,org-todo-keyword-2)
                                             (done))))
                              ((org-ql-block-header "This week's common event"))))
        ((org-agenda-sorting-strategy
          '(todo-state-up priority-down deadline-up))))
       ("c" "actionable thing list"
        ((org-ql-search-block `(and (todo ,org-todo-keyword-3)
                                    (not (deadline :to -1)))
                              ((org-ql-block-header "Doable things"))))
        ((org-agenda-sorting-strategy
          '(todo-state-up priority-down deadline-up))))
       ("n" "Anniversary"
        ((org-ql-search-block `(heading ,(let ((week-ago (decode-time)))
                                           (cl-incf (nth 3 week-ago) -7)
                                           (format-time-string "%Y-%m-%d %A"
                                                               (apply #'encode-time
                                                                      week-ago))))
                              ((org-ql-block-header "One week ago")))
         (org-ql-search-block `(heading ,(let ((month-ago (decode-time)))
                                           (cl-incf (nth 4 month-ago) -1)
                                           (format-time-string "%Y-%m-%d %A"
                                                               (apply #'encode-time
                                                                      month-ago))))
                              ((org-ql-block-header "One month ago")))
         (org-ql-search-block `(heading ,(let ((half-a-year-ago (decode-time)))
                                           (cl-incf (nth 4 half-a-year-ago) -6)
                                           (format-time-string "%Y-%m-%d %A"
                                                               (apply #'encode-time
                                                                      half-a-year-ago))))
                              ((org-ql-block-header "Half a year ago")))
         (org-ql-search-block `(heading ,(let ((year-ago (decode-time)))
                                           (cl-incf (nth 5 year-ago) -1)
                                           (format-time-string "%Y-%m-%d %A"
                                                               (apply #'encode-time
                                                                      year-ago))))
                              ((org-ql-block-header "One year ago"))))
        ((org-agenda-files `,(my/org-archive-files))))
       ("t" "All tasks"
        ((org-ql-search-block `(todo ,org-warning-keyword-0)
                              ((org-ql-block-header "Urgent task")))
         (org-ql-search-block `(todo ,org-todo-keyword-2)
                              ((org-ql-block-header "Today's task")))
         (org-ql-search-block `(todo ,org-todo-keyword-1)
                              ((org-ql-block-header "This week's task")))
         (org-ql-search-block `(todo ,org-todo-keyword-4)
                              ((org-ql-block-header "Someday's entries on agenda files")))
         (org-ql-search-block `(and (todo ,org-todo-keyword-0)
                                    (not (habit)))
                              ((org-ql-block-header "Remaining task")))))
       ("d" "Done tasks"
        ((org-ql-search-block '(done)
                              ((org-ql-block-header "Done/Canceled/Pending task")))))
       ("#" "stuck project"
        ((org-ql-search-block `(and (tags "project")
                                    ;; exclude projects
                                    (not (children (todo ,org-todo-keyword-0
                                                         ,org-todo-keyword-1
                                                         ,org-todo-keyword-2
                                                         ,org-todo-keyword-3))))
                              ((org-ql-block-header "Stuck projects")))))
       ("p" "Projects" tags "+project")
       ("h" "Habits in consistency graph"
        agenda ""
        ((org-agenda-span 'day)
         (org-agenda-use-time-grid nil)
         (org-agenda-prefix-format '((agenda . "")))
         (org-habit-show-all-today t)
         (org-habit-graph-column 32)
         (org-habit-preceding-days 14)
         (org-habit-following-days 21)
         (org-agenda-sorting-strategy '(scheduled-up))
         ;; display habits only
         (org-agenda-skip-function
          (lambda ()
            (and (save-excursion
                   (not (org-is-habit-p)))
                 (progn (outline-next-heading) (point)))))))
       ("H" "show all habits"
        ((org-ql-search-block '(habit)
                              ((org-ql-block-header "All Habits"))))
        ((org-agenda-sorting-strategy '(scheduled-up))))))
    :config
    (dolist (dir '("archive" "index" "wiki"))
      (mapc (lambda (org-file)
              (add-to-list 'org-agenda-text-search-extra-files
                           org-file))
            (directory-files (expand-file-name dir org-directory)
                             t
                             (rx (one-or-more not-newline)
                                 (or ".org" ".org.gpg")
                                 line-end)))))

  (defun org-agenda-cmp-latest-clock-log (a b)
    "Compare two org entry A and B in terms of clock log.

  This function can be used as `org-agenda-cmp-user-defined' in `org-agenda-sorting-strategy'."
    (let* ((marker-a (get-text-property 1 'org-marker a))
           (time-a (org-get-latest-clock-log-time marker-a))
           (marker-b (get-text-property 1 'org-marker b))
           (time-b (org-get-latest-clock-log-time marker-b)))
      (if (time-less-p time-a time-b) -1 +1)))

  (defun org-clock-sum-all ()
    "Sum the times for all agenda files."
    (interactive)
    (save-excursion
      (mapc (lambda (file)
              (with-current-buffer (or (org-find-base-buffer-visiting file)
                                       (find-file-noselect file))
                (org-clock-sum)
                (org-clock-sum-today)))
            (org-agenda-files))))

  (defun org-get-latest-clock-log-time (pom)
    "Get the latest clock log time stamp in org entry at POM as a time object.

  If entry at POM has no clock log time stamp, this function returns 0."
    (org-with-point-at pom
      (save-excursion
        (setq end-of-subtree (org-end-of-subtree))
        (setq latest-time 0)
        (org-back-to-heading t)
        (org-show-all)
        (while (re-search-forward org-drawer-regexp end-of-subtree t)
          (when (string= (match-string 1) (org-clock-drawer-name))
            (while (progn
                     (forward-line 1)
                     (when (org-match-line org-clock-ts-line-re)
                       (setq match-ts
                             (if (match-string 3)
                                 (match-string 3) (match-string 1)))
                       (when (time-less-p latest-time
                                          (apply 'encode-time (parse-time-string match-ts)))
                         (setq latest-time (apply 'encode-time (parse-time-string match-ts)))))
                     (not (org-match-line org-clock-drawer-end-re))))))))
    latest-time)
#+end_src

*** org-capture

#+begin_src emacs-lisp
  (use-package org-capture
    :after (org my/org-archive)
    :hook
    (org-capture-mode . (lambda ()
                          (skk-mode 1)
                          (delete-other-windows)))
    :custom
    (org-capture-bookmark nil)
    (org-capture-templates
     `(("t" "Task"
        entry (id "adcd63ea-f81a-4909-b659-6e5794052fcc")
        ,(format "* %s %%?\n %%U\n"
                 org-todo-keyword-0))
       ("p" "Project"
        entry (id "adcd63ea-f81a-4909-b659-6e5794052fcc")
        "* %? [/] :project:\n %U\n  - [ ] insert ID property if necessary"
        :prepend t :jump-to-captured t)
       ("m" "Memo"
        entry (file+datetree ,my/org-archive-file)
        "* %? %^g\n %U\n" :tree-type week)
       ("j" "Jotting down"
        entry (file "~/org/note/memo.org")
        "* %^{Title: }\n%U\n%?"
        :jump-to-captured t)
       ("s" "Someday memo")
       ("ss" "any"
        entry (file+datetree ,my/org-archive-file)
        ,(format "* %s %%?\n %%U\n  %%a"
                 org-todo-keyword-4)
        :tree-type week)
       ("sr" "purchase book"
        entry (file+datetree ,my/org-archive-file)
        ,(format "* %s %%? :ac_purchase:book:\n   %%U\n  %%a"
                 org-todo-keyword-4)
        :tree-type week)
       ("sc" "cook"
        entry (file+datetree ,my/org-archive-file)
        ,(format "* %s %%? :ac_cook:\n   %%U\n  %%a"
                 org-todo-keyword-4)
        :tree-type week)
       ("sp" "purchase"
        entry (file+datetree ,my/org-archive-file)
        ,(format "* %s %%? :ac_purchase:\n   %%U\n  %%a"
                 org-todo-keyword-4)
        :tree-type week)
       ("D" "Drill")
       ("Dd" "Drill entry in currently clocking or today's entry."
        entry (function org-goto-clocking-or-today)
        "* %i :drill:\n[%?]")
       ("De" "English drill entry in currently clocking or today's entry."
        entry (function org-goto-clocking-or-today)
        "* %i :drill:fd_en:\n[%^C%?]\n- %a")
       ("M" "Append memo to clocking task"
        item (clock)
        "- %i%?"))))

  (defun org-goto-clocking-or-today ()
    "Go to currently clocking entry.

  If no entry is clocked or CATEGORY on clocking entry is \"Cyclic\",
  go to today's entry in record file."
    (if (and (org-clocking-p)
             (save-excursion
               (with-current-buffer (org-clocking-buffer)
                 (org-clock-jump-to-current-clock)
                 (org-back-to-heading)
                 (not (string=
                       (org-entry-get (point) "CATEGORY" t)
                       "Cyclic")))))
        (org-clock-goto)
      (let* ((now (decode-time (current-time)))
             (day (nth 3 now))
             (month (nth 4 now))
             (year (nth 5 now))
             (org-refile-targets
              `((,my/org-archive-file :regexp . ,(format "%04d-%02d-%02d" year month day)))))
        (find-file my/org-archive-file)
        (org-datetree-find-iso-week-create `(,month ,day ,year) nil))))
#+end_src

*** org-timer and org-clock

#+begin_src emacs-lisp
  (use-package org-timer
    :after org
    :hook
    (org-timer-done . (lambda ()
                        (when (and (org-clocking-p)
                                   org-clock-marker)
                          (let ((alert (org-entry-get org-clock-marker
                                                      "ALERT")))
                            (if (and (stringp alert)
                                     (string= alert "alarm"))
                                (alert "Timer Done!" :style 'alarm)
                              (alert "Timer Done!" :style 'fringe :mode 'org-mode :buffer (org-clocking-buffer) :severity 'trivial)))))))

  (use-package org-clock
    :after org
    :hook
    ((org-clock-in org-clock-out org-clock-cancel) . save-buffer)
    (org-clock-in-prepare . my/org-clock-in-set-timer)
    (org-clock-out . my/org-clock-out-have-a-break)
    ((org-clock-out org-clock-cancel) .
     (lambda () (and org-timer-countdown-timer
                     (org-timer-stop))))
    :custom
    (org-clock-out-when-done t)
    (org-clock-persist t)
    (org-clock-persist-query-resume nil)
    (org-clock-string-limit 20)
    (org-clock-continuously t)
    (org-clock-ask-before-exiting nil)
    (org-clock-out-remove-zero-time-clocks t)
    :config
    (org-clock-persistence-insinuate)
    (defconst org-clock-ts-line-re
      (concat "^[ \t]*" org-clock-string "[ \t]*" org-tsr-regexp-both)
      "Matches a line with clock time stamp."))

  (defun my/org-clock-in-set-timer ()
    "Start count down timer for a clocked in entry.

  If the entry has ATTENTION_SPAN property, use it for `org-timer-default-timer'.
  Otherwise count down time is Effort property value.
  In neither case, count down time is 25 min which is suggested in the Pomodoro-technique."
    (let ((todo (org-get-todo-state))
          (attention-span (org-entry-get (point) "ATTENTION_SPAN" 'selective))
          (effort (org-entry-get (point) "Effort" 'selective)))
      (when org-clock-clocking-in
        (org-clock-out))
      (cond
       ((stringp attention-span)
        (let ((org-timer-default-timer attention-span))
          (org-timer-set-timer '(64))))
       ((and (stringp effort)
             (ts< (ts-parse effort) (ts-parse "01:40")))
        (org-timer-set-timer '(16)))
       (todo
        (let ((org-timer-default-timer "25"))
          (org-timer-set-timer '(64)))))))

  (defun my/org-clock-out-without-remove ()
    "Clock out and save record even if clock time is zero."
    (interactive)
    (let ((org-clock-out-remove-zero-time-clocks nil))
      (org-clock-out nil t)))

  (defun my/org-clock-out-have-a-break ()
    "Clock in 'Break' task if the task about to clock out manually has any kind of TODO keyword."
    (when (and (not org-clock-clocking-in)
               (org-get-todo-state))
      (org-id-goto "d49d97de-58ec-4e41-b58c-491a9e216e1c")
      (org-clock-in)
      (org-save-all-org-buffers)))
#+end_src

*** org-refile

#+begin_src emacs-lisp
  (use-package org-refile
    :after org
    :custom
    (org-refile-targets
     `((org-agenda-files :tag . "project")
       (,(directory-files-recursively org-directory "\\.org$") :tag . "refile"))))
#+end_src

*** org-plot

#+begin_src emacs-lisp
  (use-package org-plot
    :straight gnuplot gnuplot-mode
    :after org)
#+end_src

*** org-id

#+begin_src emacs-lisp
  (use-package org-id
    :after org
    :custom
    (org-id-locations-file
     (expand-file-name ".org-id-locations" org-directory))
    (org-id-track-globally t)
    (org-id-extra-files
     (append org-agenda-text-search-extra-files))
    (org-id-link-to-org-use-id 'create-if-interactive))
#+end_src

*** org-archive

#+begin_src emacs-lisp
  (use-package org-archive
    :after org
    :custom
    (org-archive-default-command 'org-archive-set-tag)
    (org-cycle-open-archived-trees t))
#+end_src

*** org-list

#+begin_src emacs-lisp
  (use-package org-list
    :after org
    :custom
    (org-list-demote-modify-bullet '(("-" . "+") ("+" . "-") ("*" . "-")
                                     ("1." . "1)") ("1)" . "1.") ("*" . "1.")))
    (org-cycle-include-plain-lists 'integrate)
    (org-list-use-circular-motion t)
    (org-list-allow-alphabetical t)
    :config
    (setf org-list-forbidden-blocks nil))
#+end_src

*** org-indent

#+begin_src emacs-lisp
  (use-package org-indent
    :after org
    :hook
    (org-mode . org-indent-mode)
    :custom
    (org-startup-indented t))
#+end_src

*** org-crypt

#+begin_src emacs-lisp
  (use-package org-crypt
    :after org
    :custom
    (org-crypt-key user-mail-address)
    (org-tags-exclude-from-inheritance '("crypt"))
    :config
    (org-crypt-use-before-save-magic))
#+end_src

*** org-babel

#+begin_src emacs-lisp
  (use-package ob-core
    :after org
    :custom
    (org-confirm-babel-evaluate nil)
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C        . t)
       (java     . t)
       (R        . t)
       (shell    . t)
       (ruby     . t)
       (python   . t)
       (org      . t)
       (lua      . t)
       (gnuplot  . t)
       (dot      . t)
       (plantuml . t)
       (lilypond . t)))
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
    (cond
     ((string= system-type "gnu/linux")
      (custom-set-variables '(org-plantuml-jar-path "~/var/lib/plantuml/plantuml.jar")))
     ((string= system-type "darwin")
      (custom-set-variables '(org-plantuml-jar-path "/usr/local/Cellar/plantuml/8041/plantuml.8041.jar")))))
#+end_src

**** [[https://github.com/astahlman/ob-async/releases.atom][ob-async]]

#+begin_src emacs-lisp
  (use-package ob-async
    :straight t
    :after ob-core)
#+end_src

**** ob-lilypond

#+begin_src emacs-lisp
  (use-package ob-lilypond
    :after (org lilypond-mode)
    :custom
    ;; (org-babel-lilypond-commands '("lilypond" "firefox" "fluidsynth -a alsa -m alsa_seq -l"))
    (org-babel-lilypond-commands '("lilypond" "firefox" "xdg-open"))
    (org-babel-lilypond-arrange-mode t))
#+end_src

*** org-src

#+begin_src emacs-lisp
  (use-package org-src
    :diminish (org-src-mode . "os")
    :custom
    (org-src-window-setup 'current-window)
    :config
    (advice-add #'org-edit-src-save
                :before
                #'my/delete-trailing-whitespace)
    (advice-add #'org-edit-src-exit
                :after
                #'save-buffer))

  (defun my/delete-trailing-whitespace ()
    (delete-trailing-whitespace))
#+end_src

*** org-export

#+begin_src emacs-lisp
  (use-package ox
    :defer t
    :after org
    :custom
    (org-export-with-smart-quotes t)
    (org-export-with-emphasize t)
    (org-export-with-special-strings t)
    (org-export-with-fixed-width t)
    (org-export-with-timestamps t)
    (org-export-preserve-breaks nil)
    (org-export-with-sub-superscripts nil)
    (org-export-with-archived-trees 'headline)
    (org-export-with-author nil)
    (org-export-with-broken-links 'mark)
    (org-export-with-clocks nil)
    (org-export-with-creator nil)
    (org-export-with-drawers '(not "LOGBOOK"))
    (org-export-with-date nil)
    (org-export-with-entities t)
    (org-export-with-email nil)
    (org-export-with-footnotes t)
    (org-export-headline-levels 5)
    (org-export-with-inlinetasks t)
    (org-export-with-section-numbers nil)
    (org-export-with-planning nil)
    (org-export-with-priority nil)
    (org-export-with-properties nil)
    (org-export-with-statistics-cookies t)
    (org-export-with-tags nil)
    (org-export-with-tasks t)
    (org-export-with-latex t)
    (org-export-time-stamp-file nil)
    (org-export-with-title t)
    (org-export-with-toc nil)
    (org-export-with-todo-keywords nil)
    (org-export-with-tables t)
    (org-export-default-language "ja")
    (org-export-dispatch-use-expert-ui nil))

  (use-package ox-html
    :defer t
    :after ox
    :custom
    (org-html-preamble t)
    (org-html-postamble 'auto)
    (org-html-with-latex t)
    (org-html-container-element "div")
    (org-html-doctype "xhtml-strict"))

  (use-package ox-latex
    :defer t
    :after ox
    :custom
    (org-latex-pdf-process '("platex %f"
                             "platex %f"
                             "bibtex %b"
                             "platex %f"
                             "platex %f"
                             "dvipdfmx %b.dvi"))
    (org-latex-default-class "jsarticle")
    :config
    (add-to-list 'org-latex-classes
                 '("jsarticle"
                   "\\documentclass[dvipdfmx,12pt]{jsarticle}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
                 `("beamer"
                   "\\documentclass[presentation,dvipdfmx,18pt]{beamer}\n"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))


#+end_src

*** org-contrib
org-contrib is a set of 3rd party add-ons for org-mode.

**** org-contacts

#+begin_src emacs-lisp
  (use-package org-contacts
    :after org
    :straight org-contrib
    :custom
    (org-contacts-files `(,(expand-file-name "index/contacts.org.gpg" org-directory))))
#+end_src

*** [[https://github.com/yjwen/org-reveal/releases.atom][org-reveal]]

#+begin_src emacs-lisp
  (use-package ox-reveal
    :straight t
    :after ox)
#+end_src

*** [[https://github.com/alphapapa/org-ql/releases.atom][org-ql]]

#+begin_src emacs-lisp
  (use-package org-ql
    :straight t
    :after org
    :custom
    (org-ql-search-directories-files-recursive t)
    :config
    (require 'org-ql-search)
    (org-ql-defpred (tags-expanded expanded-tags tags-x xtags) (&rest tags)
      "Return non-nil if current heading has one or more of TAGS.
  If TAGS contains a group tag, all tags in the group is used to match.
  Both inherited and local tags is tested."
      :normalizers ((`(,predicate-names . ,tags)
                     `(tags-expanded ,@tags)))
      :body (apply #'org-ql--predicate-tags
                   (seq-uniq (--mapcat (org-tags-expand it t)
                                       tags))))
    (org-ql-defpred (category-inherited) (&rest categories)
      "Return non-nil if current heading has CATEGORY.
  Ancestors are looked up If current heading has no CATEGORY."
      :body (when-let ((category (or (org-get-category (point))
                                     (org-entry-get (point) "CATEGORY" t))))
              (cl-typecase categories
                (null t)
                (otherwise (member category categories))))))
#+end_src

*** [[https://github.com/ndwarshuis/org-ml/releases.atom][org-ml]]

#+begin_src emacs-lisp
  (use-package org-ml
    :straight t
    :after org)
#+end_src

*** [[https://github.com/org-roam/org-roam/releases.atom][org-roam]]
org-roam v2

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :after org
    :bind (("C-c n l" . org-roam-buffer-toggle-display)
           ("C-c n D" . org-roam-find-directory)
           ("C-c n f" . org-roam-find-file)
           ("C-c n i" . org-roam-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :custom
    (org-roam-directory (expand-file-name "roam" org-directory))
    ;; DB does not have to be with org files since it is derived from org files uniquely
    (org-roam-db-location (expand-file-name "org-roam.db" "~/var/lib/org-roam"))
    (org-roam-buffer-position 'bottom))
#+end_src
*** [[https://gitlab.com/phillord/org-drill/-/tags?format=atom][org-drill]]

#+begin_src emacs-lisp
  (use-package org-drill
    :init (straight-use-package 'persist)
    :after (org persist)
    :straight t
    :custom
    (org-drill-spaced-repetition-algorithm 'sm5)
    (org-drill-sm5-initial-interval 10.0)
    (org-drill-add-random-noise-to-intervals-p t)
    (org-drill-adjust-intervals-for-early-and-late-repetitions-p t)
    (org-drill-days-before-old 20)
    (org-drill-learn-fraction 0.65)
    (org-drill-overdue-interval-factor 1.6))

#+end_src
*** [[https://github.com/org-mime/org-mime/releases.atom][org-mime]]

#+begin_src emacs-lisp
  (use-package org-mime
    :straight t
    :after org
    :config
    (push '("Send An Email") org-speed-commands))
#+end_src

*** [[https://github.com/alphapapa/org-web-tools/releases.atom][org-web-tools]]

#+begin_src emacs-lisp
  (use-package org-web-tools
    :straight t
    :after org
    :demand t
    :bind (("C-c C-;" . org-web-tools-insert-link-for-url)))
#+end_src

*** [[https://github.com/dfeich/org-clock-convenience/releases.atom][org-clock-convenience]]

#+begin_src emacs-lisp
  (use-package org-clock-convenience
    :straight t
    :after (org)
    :bind (:map org-agenda-mode-map
                ("@"   . org-clock-convenience-fill-gap)
                ("C-@" . org-clock-convenience-fill-gap-both)))
#+end_src

*** custom functions

#+begin_src emacs-lisp
  (defun my/org-open-file (path &optional in-emacs line search)
    "docstring"
    (cl-case (prefix-numeric-value current-prefix-arg)
      (16 (my/view-file path t))
      (4 (org-open-file path t line search))
      (t (cond
          ((member in-emacs '((16) system))
           (my/view-file path t))
          ((member in-emacs '((4) emacs))
           (org-open-file path t line search))
          (t (my/view-file path)
             (when (or line search)
               (goto-pos (or line search))))))))

  (defun my/org-babel-lob-ingest-batch ()
    (interactive)
    (mapc (lambda (dir)
            (dolist (f (directory-files (expand-file-name dir org-directory) "\.org$"))
              (org-babel-lob-ingest f)))
          '("agenda" "index" "wiki")))

  (defvar org-readable-directory "~/var/tmp/readable"
    "A directory where generated html files are located in org-readable.")

  (defun org-readable ()
    "Show current org subtree in EWW."
    (interactive)
    (let* ((heading (org-get-heading t t t t))
           (org-export-show-temporary-export-buffer nil)
           (export-buf-name "*Org HTML Export*")
           (org-export-with-broken-links 'mark)
           (id (org-id-get))
           (uuid (downcase (if id id (org-id-uuid))))
           (org-readable-file (format "%s/%s.html" org-readable-directory uuid)))
      (org-html-export-as-html nil t nil)
      (with-current-buffer export-buf-name
        (write-file org-readable-file)
        (eww-open-file org-readable-file))
      (kill-buffer export-buf-name)))

  (defun org-property-copy-as-kill ()
    "Prompt user to select property to append to the kill ring.

  If property's value matches $(...) format, ... is interpreted as shell command and execute it."
    (interactive)
    (let* ((properties (org-entry-properties))
           (prop-key-to-copy
            (completing-read "Property name: "
                             (mapcar #'(lambda (var) (car var)) properties))))
      (when (stringp prop-key-to-copy)
        (let* ((prop-value (cdr (assoc prop-key-to-copy properties)))
               (str-to-copy
                (cond
                 ((string-match "$(\\(.+\\))" prop-value)
                  (shell-command-to-string (match-string 1 prop-value)))
                 (t prop-value))))
          (kill-new str-to-copy)))))

  (defun my/org-reset-dwim ()
    "Do reset procedure in each context."
    (interactive)
    (cond
     ((org-at-table-p) (org-table-blank-field))
     ((org-in-subtree-not-table-p)
      (org-save-outline-visibility t
        (org-reset-checkbox-state-subtree)))))

  ;; WARN: This function does not work correctly
  ;;       Wait until library org-ml get mature
  (defun org-gc-drawer-subtree ()
    "Remove all clocks and items in drawer of subtrees older than a month before."
    (interactive)
    (let* ((month-before (->> (decode-time (current-time))
                              (--map-indexed (if (= it-index 4)
                                                 (- it 1) it))
                              (encode-time)))
           (config (list :log-into-drawer t
                         :clock-into-drawer t))
           (gc-clock-fun (lambda (headline)
                           (org-ml-update*
                             (org-ml-headline-map-logbook-clocks* config
                               (--filter
                                (time-less-p month-before
                                             (org-ml-time-to-unixtime
                                              (org-ml-timestamp-get-end-time
                                               (org-ml-get-property :value it))))
                                it)
                               it)
                             headline)))
           (gc-item-fun (lambda (headline)
                          (org-ml-update*
                            (org-ml-headline-map-logbook-items* config
                              (--filter
                               (time-less-p month-before
                                            (org-ml-logbook-item-get-timestamp it))
                               it)
                              it)
                            headline))))
      (->> (org-ml-parse-this-headline)
           (funcall gc-clock-fun))
      (->> (org-ml-parse-this-headline)
           (funcall gc-item-fun))
      (->> (org-ml-parse-this-subtree)
           (org-ml-headline-get-subheadlines)
           (-map gc-clock-fun))
      (->> (org-ml-parse-this-subtree)
           (org-ml-headline-get-subheadlines)
           (-map gc-item-fun))))

  (defun org-download-video-link-at-point (&optional playlistp)
    "Download video file at point.
  With `C-u' prefix arg, try to download all videos in playlist.

  Video file is expected to appear in org-link."
    (interactive "P")
    (org-link-at-point-map (lambda (url title)
                             (my/download-video url title playlistp))))

  (defun org-download-audio-link-at-point ()
    "Download audio file at point.

  Audio file is expected to appear in org-link."
    (interactive)
    (org-link-at-point-map (lambda (url title)
                             (my/download-audio url title))))

  (defun org-show-media-duration-at-point ()
    "Show duration of media at point."
    (interactive)
    (org-link-at-point-map (lambda (url title)
                             (show-media-duration url))))

  (defun org-link-at-point-map (function)
    "Call `FUNCTION' with url and title obtained from org-link at point."
    (let* ((context (org-element-lineage
                     (org-element-context)
                     '(link)
                     t))
           (type (org-element-property :type context))
           (path (org-element-property :path context))
           (desc (when-let ((begin (org-element-property :contents-begin context))
                            (end (org-element-property :contents-end context)))
                   (buffer-substring begin end))))
      (cond
       ((string-match-p "https?" type)
        (funcall function (org-link-unescape (concat type ":" path)) desc))
       ((string-match-p "elfeed" type)
        (save-excursion
          (org-open-at-point)
          (when (eq major-mode 'elfeed-show-mode)
            (when-let ((url (or (caar (elfeed-entry-enclosures elfeed-show-entry))
                                (elfeed-entry-link elfeed-show-entry)))
                       (title (elfeed-entry-title elfeed-show-entry)))
              (funcall function url title))
            (quit-window)))))))

  (defun org-send-email (&optional arg)
    "Send a html email extracted from current org entry.

  Given a `\\[universal-argument]' prefix `ARG', send an ascii email instead."
    (interactive "P")
    (cond
     ((equal arg '(4))
      (call-interactively #'org-send-email-ascii))
     (t
      (let ((org-mime-use-property-inheritance t))
        (call-interactively #'org-mime-org-subtree-htmlize)))))

  (defun org-send-email-ascii ()
    "Send a mail whose contents converted from current org entry.

  Format of mail contents is plain text."
    (interactive)
    (let ((heading (org-get-heading t t t t))
          (org-export-show-temporary-export-buffer nil)
          (export-buf-name "*Org ASCII Export*")
          (org-export-with-toc nil)
          (org-export-with-author nil))
      (org-ascii-export-as-ascii nil t t t)
      (mail-simple-send (or (org-entry-get (point) "MAIL_TO" t)
                            (read-string "MAIL_TO: "))
                        heading
                        (with-current-buffer export-buf-name
                          (buffer-string)))
      (kill-buffer export-buf-name)))

#+end_src

*** key bindings
speed commands and hydra-org.

#+begin_src emacs-lisp
  (use-package org-keys
    :after org
    :custom
    (org-use-speed-commands
     (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))
    (org-speed-commands
     '(("Outline Navigation")
       ("n" . (org-speed-move-safe 'org-next-visible-heading))
       ("p" . (org-speed-move-safe 'org-previous-visible-heading))
       ("f" . (org-speed-move-safe 'org-forward-heading-same-level))
       ("b" . (org-speed-move-safe 'org-backward-heading-same-level))
       ("F" . org-next-block)
       ("B" . org-previous-block)
       ("u" . (org-speed-move-safe 'outline-up-heading))
       ("j" . org-goto)
       ("g" . (org-refile t))
       ("Outline Visibility")
       ("c" . org-cycle)
       ("C" . org-shifttab)
       (" " . org-display-outline-path)
       ("N" . my/toggle-narrow-dwim)
       ("z" . org-toggle-narrow-to-subtree)
       ("=" . org-columns)
       ("/" . org-sparse-tree)
       ("Outline Structure Editing")
       ("U" . org-metaup)
       ("D" . org-metadown)
       ("r" . org-metaright)
       ("l" . org-metaleft)
       ("R" . org-shiftmetaright)
       ("L" . org-shiftmetaleft)
       ("i" . (progn (forward-char 1) (call-interactively 'org-insert-heading-respect-content)))
       ("^" . org-sort)
       ("w" . org-refile)
       ("a" . org-archive-subtree-default-with-confirmation)
       ("@" . org-mark-subtree)
       ("#" . org-toggle-comment)
       ("Clock Commands")
       ("I" . org-clock-in)
       ("O" . my/org-clock-out-without-remove)
       ("X" . org-clock-cancel)
       ("Meta Data Editing")
       ("t" . org-todo)
       ("," . (org-priority))
       ("0" . (org-priority ?\ ))
       (":" . org-set-tags-command)
       ("P" . org-set-property)
       ("e" . org-set-effort)
       ("E" . org-inc-effort)
       ("s" . org-schedule)
       ("d" . org-deadline)
       ("v" . org-property-copy-as-kill)
       ("W" . (lambda (m) (interactive "sMinutes before warning: ") (org-entry-put (point) "APPT_WARNTIME" m)))
       ("Org Capture")
       ("Misc")
       ("$" . my/org-archive-subtree)
       ("!" . org-readable)
       ("o" . org-open-at-point)
       ("M" . org-send-email)
       ("?" . org-speed-command-help)
       ("<" . (org-agenda-set-restriction-lock 'subtree))
       (">" . (org-agenda-remove-restriction-lock)))))

  (with-eval-after-load 'hydra
    (defhydra hydra-org (global-map "C-o"
                                    :color teal)
      "Org Search"
      ("a" org-agenda)
      ("c" org-capture)
      ("t" org-set-tags-command)
      ("j" org-clock-goto)
      ("h" consult-org-agenda)
      ("g" consult-outline)
      ("ee" my/org-english-capture)
      ("ed" my/org-english-drill)
      ("eD" my/org-english-drill-resume)
      ("et" my/org-english-drill-test-display)
      ("s" org-store-link)
      ("C-s" org-save-all-org-buffers)
      ("TAB" org-indent-mode)
      ("i" org-info-find-node)
      ("&" org-mark-ring-goto)
      ("I" org-clock-in)
      ("O" my/org-clock-out-without-remove)
      ("X" org-clock-cancel)
      ("qq" org-ql-search)
      ("qv" org-ql-view)
      ("qr" my/org-archive-search)
      ("r" my/org-archive-find-date)
      ("l" my/lookup-org-archive)
      ("bi" my/org-babel-lob-ingest-batch)
      ("@" org-mark-subtree)
      ("=" org-clock-sum-all)
      ("SPC" my/org-reset-dwim)
      ("C-g" nil "quit")))
#+end_src

** comletion
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/completion.el")
:END:

*** [[https://github.com/minad/vertico/releases.atom][vertico]]

#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :custom
    (vertico-cycle t)
    :config
    (vertico-mode))
#+end_src

*** [[https://github.com/minad/consult/releases.atom][consult]]

#+begin_src emacs-lisp
  (use-package consult
    :straight t
    :after vertico
    :bind
    (:map global-map
          ("C-s" . consult-line)
          ("C-;" . consult-buffer)
          ("C-c m" . consult-mode-command)
          ("C-c r" . consult-recent-file)
          ("C-c g" . consult-outline)
          ("C-x M-:" . consult-complex-command)
          ("M-y" . consult-yank-pop)
          ("C-M-y" . consult-yank-from-kill-ring)
          ("M-g M-g" . consult-goto-line)
          ("M-g m" . consult-mark)
          ("M-g M" . consult-global-mark)
          ("M-g i" . consult-imenu)
          ("M-g I" . consult-imenu-multi)
          ("M-s e" . consult-isearch)
          ("M-s \\" . consult-locate)
          ("M-s g" . consult-grep)
          ("M-s G" . consult-git-grep)
          ("M-s r" . consult-ripgrep)
          ("M-s l" . consult-line)
          ("M-s L" . consult-line-multi)
          ("M-s m" . consult-multi-occur)
          ("M-s k" . consult-keep-lines)
          ("M-s u" . consult-focus-lines)
          :map isearch-mode-map
          ("M-e" . consult-isearch)
          ("M-s e" . consult-isearch)
          ("M-s l" . consult-line)
          ("M-s L" . consult-line-multi)
          ("C-c h" . consult-history)
          :map minibuffer-local-map
          ("C-c h" . consult-history)
          :map help-map
          ("a" . consult-apropos))
    :custom
    (consult-project-root-function #'project-root-function))

  (defun project-root-function ()
    (when-let (project (project-current))
      (car (project-roots project))))
#+end_src

**** consult-dir

#+begin_src emacs-lisp
  (use-package consult-dir
    :straight t
    :bind (("C-x C-d" . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file)))
#+end_src

*** [[https://github.com/oantolin/embark/releases.atom][embark]]

#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :bind (("C-." . embark-act)
           ("M-." . embark-dwim)
           ("<help> B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command) ;
    :config
    (bind-keys :map embark-collect-mode-map
               ("C-j" . push-button)))

  (use-package embark-consult
    :straight t
    :after (embark consult)
    :demand t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** [[https://github.com/minad/marginalia/releases.atom][marginalia]]

#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :custom
    (marginalia-align-offset nil)
    (marginalia-truncate-width 180)
    (marginalia-margin-threshold 250)
    (marginalia-separator-threshold 200)
    :config
    (marginalia-mode))
#+end_src

*** [[https://github.com/oantolin/orderless/releases.atom][orderless]]

#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :custom (completion-styles '(orderless)))
#+end_src

**** migemo support

#+begin_src emacs-lisp
  (defun orderless-migemo (component)
    (let ((pattern (migemo-get-pattern component)))
      (condition-case nil
          (progn (string-match-p pattern "") pattern)
        (invalid-regexp nil))))

  (orderless-define-completion-style orderless-default-style
    (orderless-matching-styles '(orderless-literal
                                 orderless-regexp)))

  (orderless-define-completion-style orderless-migemo-style
    (orderless-matching-styles '(orderless-literal
                                 orderless-regexp
                                 orderless-migemo)))

  ;; uncomment below if you wish to apply migemo globally
  ;; (setq orderless-matching-styles '(orderless-literal orderless-regexp orderless-migemo))

  (setq completion-category-overrides
        '((command (styles orderless-default-style))
          (file (styles orderless-migemo-style))
          (buffer (styles orderless-migemo-style))
          (symbol (styles orderless-default-style))
          (consult-location (styles orderless-migemo-style)) ; category `consult-location' は `consult-line' などに使われる
          (consult-multi (styles orderless-migemo-style)) ; category `consult-multi' は `consult-buffer' などに使われる
          (consult-org-heading (styles orderless-migemo-style))
          (org-roam-node (styles orderless-migemo-style)) ; category `org-roam-node' は `org-roam-node-find' で使われる
          (unicode-name (styles orderless-migemo-style))
          (variable (styles orderless-default-style))))
#+end_src

** major modes for programming/editing        :programs:
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/prog.el")
:END:

*** prog

#+begin_src emacs-lisp
  (use-package prog-mode
    :hook (prog-mode . my/prog-mode-hook-function))

  (defun my/prog-mode-hook-function ()
    (hl-line-mode -1)
    (hs-minor-mode -1)
    (flyspell-prog-mode)
    (display-fill-column-indicator-mode))
#+end_src

*** sh

#+begin_src emacs-lisp
  (use-package sh-script
    :delight " SH"
    :commands sh-mode
    :mode ("\\.sh$" . sh-mode)
    ;; :dash "Bash"
    :custom
    (sh-basic-offset 2)
    (sh-indent-after-if '+)
    (sh-indent-for-case-label 0)
    (sh-indent-for-case-alt '+))
#+end_src

*** emacs lisp

#+begin_src emacs-lisp
  (use-package elisp-mode
    :commands emacs-lisp-mode
    :delight
    (emacs-lisp-mode " EL")
    (lisp-interaction-mode " LispInt")
    :hook (emacs-lisp-mode . (lambda ()
                               (setq-local tab-width 4)
                               (setq-local counsel-dash-docsets '("Emacs Lisp" "Common Lisp"))
                               (eldoc-mode 1)))
    :config
    (require 'eldoc))
#+end_src

*** cc-mode

#+begin_src emacs-lisp
  (use-package cc-mode
    :hook (c-mode-common . (lambda ()
                             (setq-local counsel-dash-docsets '("C"))))
    :custom
    (c-tab-always-indent t)
    (c-auto-align-backslashes nil)
    (c-echo-syntactic-information-p t)
    (c-default-style "my/c-style")
    :config
    (c-toggle-auto-newline 1)
    (c-add-style "my/c-style"
                 '((c-basic-offset . 4)
                   (c-comment-only-line-offset . 0)
                   (c-hanging-braces-alist
                    . ((brace-if-brace before after)
                       (substatement-open before after)))
                   (c-hanging-colons-alist
                    . ((case-label after)))
                   (c-cleanup-list
                    . (brace-else-brace
                       brace-elseif-brace
                       empty-defun-braces
                       defun-close-semi
                       list-close-comma
                       scope-operator))
                   (c-offsets-alist
                    . ((arglist-intro . +)
                       (arglist-cont-nonempty . c-lineup-arglist)))))
    (c-add-style "my/objc-style"
                 '((c-basic-offset . 2)
                   (c-comment-only-line-offset . 0)
                   (c-hanging-braces-alist
                    . ((brace-if-brace before after)
                       (substatement-open before after)))
                   (c-hanging-colons-alist
                    . ((case-label after)))
                   (c-cleanup-list
                    . (brace-else-brace
                       brace-elseif-brace
                       empty-defun-braces
                       defun-close-semi
                       list-close-comma
                       scope-operator))
                   (c-offsets-alist
                    . ((arglist-intro . +)
                       (arglist-cont-nonempty . c-lineup-arglist))))))
#+end_src

*** python-mode

#+begin_src emacs-lisp
  (use-package python
    :mode "\\.py\\'"
    :interpreter "python"
    :delight " PY"
    :hook
    ((python-mode inferior-python-mode) . my-python-mode-hook)
    (lsp-mode . (lambda ()
                  (add-to-list 'lsp-disabled-clients 'jedi)
                  (add-to-list 'lsp-enabled-clients 'pyls))))

  (defvar python-mode-initialized nil)

  (defun my-python-mode-hook ()
    (setq-local flycheck-checker 'python-pylint)
    (jedi:setup)
    (jedi-mode 1)
    (setq-local counsel-dash-docsets
                '("Python 3" "Pandas" "NumPy" "Matplotlib" "Scrapy" "PEPs" "lxml"))
    (unless python-mode-initialized
      (setq python-mode-initialized t)
      (info-lookup-add-help
       :mode 'python-mode
       :regexp "[a-zA-Z_0-9.]+"
       :doc-spec
       '(("(python)Python Module Index" )
         ("(python)Index"
          (lambda
            (item)
            (cond
             ((string-match
               "\\([A-Za-z0-9_]+\\)() (in module \\([A-Za-z0-9_.]+\\))" item)
              (format "%s.%s" (match-string 2 item)
                      (match-string 1 item))))))))))
#+end_src

**** [[https://github.com/emacsorphanage/company-jedi/releases.atom][company-jedi]]

#+begin_src emacs-lisp
  (use-package company-jedi
    :straight t
    :after python
    :hook (python-mode . my/python-mode-hook)
    :custom
    (jedi:tooltip-method nil)
    :config
    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi)))
#+end_src

*** ruby-mode

#+begin_src emacs-lisp
  (use-package ruby-mode
    :delight " RB"
    :mode (("\\.rb$"   . ruby-mode)
           ("Capfile$" . ruby-mode)
           ("Gemfile$" . ruby-mode))
    :interpreter (("ruby"    . ruby-mode)
                  ("rbx"     . ruby-mode)
                  ("jruby"   . ruby-mode))
    :config
    (setq ruby-indent-level 2)
    (setq ruby-insert-encoding-magic-comment nil)
    (add-hook 'ruby-mode-hook
              '(lambda ()
                 (setq-local flycheck-checker 'ruby-rubocop)
                 (setq-local counsel-dash-docsets '("Ruby"))))
    (add-to-list 'hs-special-modes-alist
                 `(ruby-mode
                   ,(rx (or "def" "class" "module" "do" "if" "{" "[")) ; Block start
                   ,(rx (or "}" "]" "end"))                       ; Block end
                   ,(rx (or "#" "=begin"))                        ; Comment start
                   ruby-forward-sexp nil)))
#+end_src

*** [[https://github.com/nonsequitur/inf-ruby/releases.atom][inf-ruby]]

#+begin_src emacs-lisp
  (use-package inf-ruby
    :straight t
    :config
    (setq inf-ruby-default-implementation "pry")
    (add-to-list 'inf-ruby-implementations '("pry" . "pry"))
    (setq inf-ruby-eval-binding "Pry.toplevel_binding")
    (setq inf-ruby-first-prompt-pattern "^\\[[0-9]+\\] pry\\((.*)\\)> *")
    (setq inf-ruby-prompt-pattern "^\\[[0-9]+\\] pry\\((.*)\\)[>*\"'] *"))
#+end_src

*** [[https://github.com/yoshiki/yaml-mode/releases.atom][yaml-mode]]

#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t)
#+end_src

*** [[https://github.com/immerrr/lua-mode/releases.atom][lua-mode]]

#+begin_src emacs-lisp
  (use-package lua-mode
    :straight t)
#+end_src

*** perl-mode

#+begin_src emacs-lisp
  (use-package perl-mode
    :delight " PL")
#+end_src

*** tex-mode

#+begin_src emacs-lisp
  (use-package tex-mode
    :mode ("\\.tex$" . latex-mode)
    :hook (latex-mode . (lambda ()
                          (setq-local counsel-dash-docsets '("LaTeX")))))
#+end_src

*** [[https://github.com/fxbois/web-mode/releases.atom][web-mode]]

#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :delight " WB"
    :mode (("\\.phtml$"     . web-mode)
           ("\\.tpl\\.php$" . web-mode)
           ("\\.jsp$"       . web-mode)
           ("\\.as[cp]x$"   . web-mode)
           ("\\.erb$"       . web-mode)
           ("\\.html?$"     . web-mode))
    :hook (web-mode . (lambda ()
                        (setq-local counsel-dash-docsets '("HTML" "HTTP"))))
    :custom
    (web-mode-attr-indent-offset        2)
    (web-mode-attr-value-indent-offset  2)
    (web-mode-code-indent-offset        2)
    (web-mode-css-offset                2)
    (web-mode-markup-indent-offset      2)
    (web-mode-sql-indent-offset         2)
    (web-mode-block-padding             2)
    (web-mode-script-padding            2))
#+end_src

*** css-mode

#+begin_src emacs-lisp
  (use-package css-mode
    :hook (css-mode . (lambda ()
                        (setq-local counsel-dash-docsets '("CSS"))))
    :custom
    (css-indent-offset 2))
#+end_src

*** [[https://github.com/mooz/js2-mode/releases.atom][js2-mode]]

#+begin_src emacs-lisp
  (use-package js2-mode
    :straight t
    :delight " J2"
    :mode (("\\.js\\(on\\)?\\'" . js2-mode)
           ("\\.eslintrc\\'"    . js2-mode))
    :hook (js2-mode . (lambda ()
                        (setq-local flycheck-checker 'javascript-eslint)
                        (setq-local flycheck-disabled-checkers '(javascript-jshint javascript-jscs))
                        (setq-local counsel-dash-docsets '("JavaScript" "HTTP" "NodeJS"))))
    :custom
    (flycheck-javascript-eslint-executable "eslint"))

  (use-package js
    :delight " JS"
    :custom
    (js-indent-level 2))
#+end_src

*** text-mode

#+begin_src emacs-lisp
  (use-package text-mode
    :mode ("\\.txt$" . text-mode)
    :delight " TX")
#+end_src
*** nxml

#+begin_src emacs-lisp
  (use-package nxml-mode
    :delight (nxml-mode " XM")
    :mode (("\.xml$"   . nxml-mode)
           ("\.xsl$"   . nxml-mode)
           ("\.xhtml$" . nxml-mode)
           ("\.page$"  . nxml-mode)
           ("\.plist$" . nxml-mode))
    :hook (nxml-mode . my/prog-mode-hook-function)
    :custom
    (nxml-child-indent 2)
    (nxml-attribute-indent 2)
    (nxml-slash-auto-complete-flag t)
    :config
    (setq-local tab-width 2)
    ;; pattern in hideshow mode for nxml mode
    (add-to-list 'hs-special-modes-alist
                 (list 'nxml-mode
                       "<!--\\|<[^/>]*[^/]>"
                       "-->\\|</[^/>]*[^/]>"
                       "<!--"
                       'nxml-forward-element
                       nil)))
#+end_src

*** sql-mode

#+begin_src emacs-lisp
  (use-package sql
    :delight " SQ"
    :commands (sql-mode)
    :mode (("\\.sql$" . sql-mode))
    :bind (:map sql-interactive-mode-map
                ("C-j" . comint-send-input))
    :hook (sql-mode . (lambda ()
                        (setq-local flycheck-checker 'sql-sqlint)
                        (setq-local counsel-dash-docsets '("MySQL")))))
#+end_src

*** project

Use hosting version of project.el on GitHub via straight until Emacs 28 which ships with latest version of project.el is released.

#+begin_src emacs-lisp
  (use-package project
    :straight t)
#+end_src

*** grep

#+begin_src emacs-lisp
  (use-package grep
    :custom
    (grep-program "rg")
    :config
    (bind-keys :map grep-mode-map
               ("C-j" . compile-goto-error)))

  (defun my/grep-ripgrep-all ()
    "Grep many kind of files like pdf, epub and more."
    (interactive)
    (let ((grep-find-command '("rga --with-filename --no-heading --line-number --color never -e ''" . 66)))
      (call-interactively 'grep-find)))

  (global-set-key (kbd "M-s A") 'my/grep-ripgrep-all)
#+end_src

*** compile

#+begin_src emacs-lisp
  (use-package compile
    :bind (:map compilation-mode-map
                ("C-j" . compile-goto-error)))
#+end_src

*** log-view

#+begin_src emacs-lisp
  (use-package log-view
    :delight
    (log-view-mode " LV")
    :mode ("\\.log$" . log-view-mode)
    :hook ((log-view-mode . my/prog-mode-hook-function )
           (log-view-mode . auto-revert-tail-mode)))
#+end_src

*** [[https://github.com/skuro/plantuml-mode/releases.atom][plantuml-mode]]

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :straight t
    :delight " UM"
    :hook
    (plantuml-mode . (lambda ()
                       (setq-local counsel-dash-docsets '("PlantUML"))))
    :custom
    (plantuml-jar-path "/usr/share/plantuml/plantuml.jar"))
#+end_src

*** [[https://github.com/lilypond/lilypond/releases.atom][lilypond]]

[[https://lilypond.org/unix.html][LilyPond]] elisp package is included in source tarball available at [[https://lilypond.org/download/source][here]],
you are required to locate that package where emacs can search.

#+begin_src emacs-lisp
  (use-package lilypond-mode
    :delight (LilyPond-mode " LP")
    :mode ("\\.ly$" . LilyPond-mode)
    :custom
    (LilyPond-pdf-command "firefox")
    (LilyPond-midi-command "fluidsynth -a alsa -m alsa_seq -l"))
#+end_src

*** conf

#+begin_src emacs-lisp
  (use-package conf-mode
    :delight " CF")
#+end_src

*** generic-x

#+begin_src emacs-lisp
  (use-package generic-x
    :mode (("\\.conf$"     . apache-conf-generic-mode)
           ("\\.htaccess$" . apache-conf-generic-mode)))
#+end_src

*** fundamental mode

#+begin_src emacs-lisp
  (use-package emacs
    :delight (fundamental-mode " FU"))
#+end_src

** other third-party packages
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/packages.el")
:END:

*** [[https://github.com/magit/magit/releases.atom][Magit]]                                 :maintaining:

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :delight
    (magit-status-mode " MG")
    (magit-revision-mode " MG")
    :bind (:map magit-status-mode-map
                ("C-j" . magit-visit-thing)
                ("/"   . magit-file-checkout)
                :map magit-log-mode-map
                ("C-j" . magit-visit-thing)))
#+end_src

**** [[https://github.com/magit/git-modes/releases.atom][git-modes]]

#+begin_src emacs-lisp
  (use-package git-modes
    :straight t)
#+end_src

**** [[https://github.com/magit/orgit/releases.atom][orgit]]

#+begin_src emacs-lisp
  (use-package orgit
    :straight t
    :after (magit org)
    :custom
    (orgit-remote "github"))
#+end_src

*** [[https://github.com/bbatsov/projectile/releases.atom][projectile]]             :maintaining:ARCHIVE:ignore:

#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :hook
    (find-file . projectile-mode-switch-dwim)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :custom
    (projectile-project-search-path (expand-file-name "~/git"))
    (projectile-switch-project-action 'projectile-dired)
    (projectile-track-known-projects-automatically nil)
    (projectile-mode-line-prefix " P")
    (projectile-mode-line-function 'projectile-short-mode-line)
    :config
    (projectile-load-known-projects)
    (bind-keys :map projectile-command-map
               ("C-s" . projectile-save-project-buffers)))

  (defun projectile-mode-switch-dwim ()
    "Intelligently switch on/off projectile mode."
    (when-let* ((bfn (buffer-file-name))
                (vc-registered (buffer-file-name)))
      (setq-local projectile-mode t)))

  (defun projectile-short-mode-line ()
    "Report project name and type in the modeline."
    (let ((project-name (projectile-project-name)))
      (format "%s:%s"
              projectile-mode-line-prefix
              (or project-name "-"))))
#+end_src

*** [[https://github.com/ericdanan/counsel-projectile/releases.atom][counsel-projectile]]     :maintaining:ARCHIVE:ignore:

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :straight t
    :after projectile
    :config
    (bind-keys :map projectile-command-map
               ("p" . counsel-projectile-switch-project)
               ("sG" . counsel-projectile-grep)
               ("sS" . counsel-projectile-ag)
               ("sR" . counsel-projectile-rg)
               ("si" . counsel-projectile-git-grep)))
#+end_src
*** [[https://github.com/Wilfred/ag.el/releases.atom][ag.el]]                     :programs:ARCHIVE:ignore:

#+begin_src emacs-lisp
  ;; (use-package ag :straight t)
#+end_src

*** [[https://github.com/nlamirault/ripgrep.el/releases.atom][ripgrep.el]]                :programs:ARCHIVE:ignore:

#+begin_src emacs-lisp
  ;; (use-package ripgrep :straight t)
#+end_src

*** [[https://github.com/mhayashi1120/Emacs-wgrep/releases.atom][Emacs-wgrep]]

#+begin_src emacs-lisp
  (use-package wgrep
    :straight t)
#+end_src

*** [[https://github.com/jacktasia/dumb-jump/releases.atom][dumb-jump]]                                :programs:

#+begin_src emacs-lisp
  (use-package dumb-jump
    :straight t
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window)
           ("M-g /" . dumb-jump-back)
           ("M-g l" . dumb-jump-quick-look)))
#+end_src

*** [[https://github.com/benma/visual-regexp.el/releases.atom][visual-regexp.el]]

#+begin_src emacs-lisp
  (use-package visual-regexp
    :straight t
    :bind ("C-%" . vr/query-replace))
#+end_src

**** [[https://github.com/benma/visual-regexp-steroids.el/releases.atom][visual-regexp-steroids.el]]

#+begin_src emacs-lisp
  (use-package visual-regexp-steroids
    :straight t
    :after (visual-regexp)
    :config
    (setq vr/engine 'python))
#+end_src

*** [[https://github.com/abo-abo/avy/releases.atom][avy]]

#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :bind (("M-a" . avy-goto-char-timer)
           :map isearch-mode-map
           ("C-a" . avy-isearch)))
#+end_src

*** paredit

Handy commands
- press '(' to insert '()' pair
- C-<left/right> to barf and slurp s-expressions
- call paredit-splice-sexp to strip embracing parenthes
- press M-<up> or M-r to delete upper sexp except pointing one
- DEL, C-d, C-k act like originals but care for parenthes
- press DEL to remedy unbalanced parenthes
- press C-q ( to insert ( char manually


#+begin_src emacs-lisp
  (use-package paredit
    :straight t
    :bind (:map paredit-mode-map
                ("C-h" . paredit-backward-delete)
                ("C-M-g" .  paredit-splice-sexp)
                ("M-s" . nil)
                ("C-M-;" . paredit-comment-dwim)
                ("M-;" . nil))
    :hook ((emacs-lisp-mode . enable-paredit-mode)
           (paredit-mode . show-paren-mode)))
#+end_src

- bug fix
  Thanks to [[https://andreyorst.gitlab.io/posts/2021-09-30-why-is-paredit-is-so-un-emacsy/][this blog post]], a couple of commands in paredit.el are fixed with transient-mark-mode

  #+begin_src emacs-lisp
    (defvar my/paredit-delete-region-functions
      '(paredit-forward-delete
        paredit-backward-delete)
      "List of `paredit-mode' functions that should support tmm region deletion.")

    (defvar my/paredit-kill-region-functions
      '(paredit-forward-kill-word
        paredit-backward-kill-word)
      "List of `paredit-mode' functions that should support tmm region killing.")

    (defun my/paredit-fix-transient-mark-mode (orig-fn &rest args)
      "Allow deleting/killing a region if expression is balanced."
      (if (and transient-mark-mode
               mark-active)
          (cond ((memq this-command my/paredit-delete-region-functions)
                 (paredit-delete-region (region-beginning) (region-end)))
                ((memq this-command my/paredit-kill-region-functions)
                 (paredit-kill-region (region-beginning) (region-end)))
                (t (apply orig-fn args)))
        (apply orig-fn args)))

    (dolist (fun (append my/paredit-delete-region-functions
                         my/paredit-kill-region-functions))
      (advice-add fun :around #'my/paredit-fix-transient-mark-mode))
  #+end_src

*** [[https://github.com/emacs-lsp/lsp-mode/releases.atom][lsp-mode]]

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :hook ((python-mode) . lsp-deferred))
#+end_src

**** [[https://github.com/emacs-lsp/lsp-ivy/releases.atom][lsp-ivy]]                          :ARCHIVE:ignore:

#+begin_src emacs-lisp
  (use-package lsp-ivy
    :straight t
    :after lsp
    :hook (lsp-mode . lsp-ivy-mode))
#+end_src

*** [[https://github.com/flycheck/flycheck/releases.atom][flycheck]]

#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :diminish
    :hook ((c-mode sh-mode emacs-lisp-mode ruby-mode python-mode js2-mode sql-mode) . flycheck-mode)
    :custom
    (flycheck-check-syntax-automatically
     '(save new-line idle-change))
    (flycheck-display-errors-delay 10.0)
    (flycheck-checker-error-threshold 1000)
    :config
    (add-to-list 'display-buffer-alist
                 `(,flycheck-error-message-buffer
                   . (display-buffer-reuse-window
                      display-buffer-in-previous-window
                      display-buffer-pop-up-window
                      . ((window-height . 5)))))
    (with-eval-after-load 'hydra
      (defhydra hydra-flycheck (flycheck-mode-map "C-c !"
                                                  :color red)
        "Flycheck"
        ("C-c" flycheck-compile)
        ("C-w" flycheck-copy-errors-as-kill)
        ("?" flycheck-describe-checker)
        ("C" flycheck-clear)
        ("H" display-local-help)
        ("V" flycheck-version)
        ("c" flycheck-buffer)
        ("e" flycheck-explain-error-at-point)
        ("d" flycheck-display-error-at-point)
        ("i" flycheck-manual)
        ("l" flycheck-list-errors)
        ("n" flycheck-next-error)
        ("p" flycheck-previous-error)
        ("s" flycheck-select-checker)
        ("v" flycheck-verify-setup)
        ("x" flycheck-disable-checker)
        ("q" nil "quit"))))
#+end_src

*** [[https://github.com/hayamiz/twittering-mode/releases.atom][twittering-mode]]

useful tips:
- invoke twittering-toggle-show-replied-statuses on "in reply to" state to show replied messages
- invoke twittering-view-user-page (C-c C-v) on user name to jump to user profile page in default browser

CAUTION: An unexpected incident might occur if twittering-icon-mode call lay at :config section of use-package

#+begin_src emacs-lisp
  (use-package twittering-mode
    :straight (twittering-mode
               :host github
               :repo "hayamiz/twittering-mode"
               :fork (:host github
                            :repo "p-snow/twittering-mode"))
    :delight " TW"
    :after hydra
    :commands twit
    :init
    (defvar my/twittering-resource-dir "~/var/lib/twmode")
    :hook
    (twittering-mode . twittering-icon-mode)
    :custom
    (twittering-private-info-file
     (expand-file-name "twittering-mode.gpg" my/twittering-resource-dir))
    (twittering-user-id-db-file
     (expand-file-name "user-info.gz" my/twittering-resource-dir))
    (twittering-use-master-password t)
    (twittering-use-ssl t)
    (twittering-number-of-tweets-on-retrieval 50)
    (twittering-use-icon-storage t)
    (twittering-icon-storage-file
     (expand-file-name "icons.gz" my/twittering-resource-dir))
    (twittering-icon-storage-limit 2000)
    (twittering-convert-fix-size 24)
    (twittering-initial-timeline-spec-string '(":home" ":mentions"))
    (twittering-edit-skeleton 'inherit-any)
    (twittering-display-remaining t)
    (twittering-timeline-header "")
    (twittering-timeline-footer "")
    (twittering-status-format
     (concat "%RT{%FACE[bold]{RT by %S\n}}"
             "%i %S,"
             "%FACE[font-lock-constant-face]{%FIELD-IF-NONZERO[ ↺%d]{retweet_count}}"
             "%FACE[font-lock-warning-face]{%FIELD-IF-NONZERO[ ♡%d]{favorite_count}}"
             " %@{}:\n"
             "%T %r%QT{\n+----\n%i %S, %@{}:\n%T %r%R\n+----}\n "))
    :config
    (bind-keys :map twittering-mode-map
               ;; move cursor
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("E" . my/twittering-previous-status-and-top)
               ("SPC" . my/twittering-next-status-and-top)
               ("<" . twittering-goto-first-status)
               (">" . twittering-goto-last-status)
               ("TAB" . twittering-goto-next-thing)
               ("<backtab>" . twittering-goto-previous-thing)
               ("2" . twittering-goto-previous-thing)
               ("3" . twittering-goto-next-thing)
               ("4" . my/twittering-open)
               ;; create/delete tweets(messages)
               ("u" . twittering-update-status-interactive)
               ("j" . twittering-enter)
               ("J" . twittering-reply-to-user)
               ("RET" . twittering-enter)
               ("o" . my/twittering-open)
               ("C-c C-o" . my/twittering-open)
               ("d" . twittering-direct-message)
               ("k" . twittering-delete-status)
               ("y" . twittering-push-uri-onto-kill-ring)
               ("Y" . twittering-push-tweet-onto-kill-ring)
               ;; response to tweets
               ("r" . twittering-native-retweet)
               ("R" . my/twittering-quote-retweet)
               ("b" . twittering-favorite)
               ("B" . twittering-unfavorite)
               ("l" . twittering-follow)
               ("L" . twittering-unfollow)
               ("t" . twittering-toggle-show-replied-statuses)
               ("T" . twittering-toggle-or-retrieve-replied-statuses)
               ;; switch between timelines
               ("n" . twittering-switch-to-next-timeline)
               ("p" . twittering-switch-to-previous-timeline)
               ("." . twittering-visit-timeline)
               ("@" . twittering-other-user-timeline)
               ("/" . my/twittering-search)
               ("?" . twittering-search)
               ("c1" . twittering-home-timeline)
               ("c2" . (lambda ()
                         (interactive)
                         (twittering-visit-timeline ":mentions")))
               ("c3" . (lambda ()
                         (interactive)
                         (twittering-visit-timeline ":retweets_of_me")))
               ("c4" . (lambda ()
                         (interactive)
                         (twittering-search "from:_p_snow")))
               ("c5" . (lambda ()
                         (interactive)
                         (twittering-visit-timeline ":favorites")))
               ("c6" . (lambda ()
                         (interactive)
                         (twittering-visit-timeline ":direct_message_events")))))

  (defun my/twittering-next-status-and-top ()
    "docstring"
    (interactive)
    (twittering-goto-next-status)
    (recenter-top-bottom 0))

  (defun my/twittering-previous-status-and-top ()
    "docstring"
    (interactive)
    (twittering-goto-previous-status)
    (recenter-top-bottom 0))

  (defun my/twittering-quote-retweet ()
    "docstring"
    (interactive)
    (let ((orig-tweet-uri (twittering-push-uri-onto-kill-ring)))
      (twittering-update-status (format "\n%s" orig-tweet-uri))
      (next-line -1 t)))

  (defun my/twittering-search (&optional arg)
    ""
    (interactive "P")
    (let* ((spec (get-text-property (point) 'goto-spec))
           (username (get-text-property (point) 'username))
           (word (cond
                  ((use-region-p) (buffer-substring (region-beginning) (region-end)))
                  ((stringp spec) spec)
                  ((eq (car spec) 'user) (format "@%s" (cadr spec)))
                  ((stringp username) username))))
      (twittering-search (and (not arg) word))))

  (defun my/twittering-open (&optional arg)
    ""
    (interactive "P")
    (unless (my/enter-thing-at-point)
      (let ((uri (or (get-text-property (point) 'uri)
                     (if (get-text-property (point) 'field)
                         (let* ((id (get-text-property (point) 'id))
                                (status (twittering-find-status id)))
                           (twittering-get-status-url-from-alist status))
                       nil))))
        (cl-case (prefix-numeric-value arg)
          (16 (browse-url-default-browser uri))
          (4 (eww-browse-url uri))
          (t (open-url uri))))))
#+end_src

*** [[https://github.com/remyferre/comment-dwim-2/releases.atom][comment-dwim-2]]                           :programs:

#+begin_src emacs-lisp
  (use-package comment-dwim-2
    :straight t
    :defer 1
    :bind ("M-;" . comment-dwim-2)
    :config
    (setf comment-dwim-2--inline-comment-behavior 'reindent-comment
          cd2/region-command 'cd2/comment-or-uncomment-region))
#+end_src

*** [[https://github.com/leoliu/easy-kill/releases.atom][easy-kill]]                                    :kill:

#+begin_src emacs-lisp
  (use-package easy-kill
    :straight t
    :bind ("M-w" . easy-kill))
#+end_src

*** undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :diminish undo-tree-mode
    :hook
    (after-init . global-undo-tree-mode)
    :custom
    (undo-tree-enable-undo-in-region t)
    :config
    (setq undo-tree-visualizer-buffer-name "*undo tree*")
    (add-to-list 'display-buffer-alist
                 `(,undo-tree-visualizer-buffer-name . (display-buffer-in-side-window
                                                        . ((side . right)
                                                           (window-width . 15))))))
#+end_src

*** [[https://github.com/emacsorphanage/quickrun/releases.atom][quickrun]]                                 :programs:

#+begin_src emacs-lisp
  (use-package quickrun
    :straight t)
#+end_src

*** [[https://github.com/magnars/expand-region.el/releases.atom][expand-region.el]]                             :mark:

#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind (("C-,"   . er/expand-region)
           ("C-M-," . er/contract-region))
    :config
    (push 'er/mark-outside-pairs er/try-expand-list))
#+end_src

*** [[https://github.com/Wilfred/helpful/releases.atom][helpful]]                                      :help:

helpful-mode shows  than [[id:a55da7a2-6525-4788-ba56-085eb61928d4][help-mode]].

#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :bind
    (:map help-map
          ("f" . helpful-callable)
          ("v" . helpful-variable)
          ("k" . helpful-key))
    (:map helpful-mode-map
          ("w" . helpful-push-symbol-onto-kill-ring) )
    :config
    (bind-keys :map helpful-mode-map
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("SPC" . my/forward-paragraph)
               ("E" . my/backward-paragraph)
               ("2" . backward-button)
               ("3" . forward-button)
               ("4" . push-button)))

  (defun helpful-push-symbol-onto-kill-ring ()
    "Push symbol name to kill ring."
    (interactive)
    (let ((symbol (symbol-name helpful--sym)))
      (kill-new (symbol-name helpful--sym))
      (message "COPY: %s" symbol)))
#+end_src

*** [[https://github.com/abo-abo/define-word/releases.atom][define-word]]

#+begin_src emacs-lisp
  (use-package define-word
    :straight t
    :custom
    (define-word-displayfn-alist
      '((wordnik . my/define-word--display-in-buffer)
        (openthesaurus . my/define-word--display-in-buffer)
        (webster . my/define-word--display-in-buffer)
        (weblio . my/define-word--display-in-buffer)))
    (define-word-default-service 'wordnik)
    :config
    (setf (cdr (assoc 'wordnik define-word-services))
          '("http://wordnik.com/words/%s" my/define-word--parse-wordnik-all))
    (push '(weblio "https://ejje.weblio.jp/content/%s"
                   my/define-word--parse-weblio)
          define-word-services)
    (push '("<b>\\(.*?\\)</b>" bold)
          define-word--tag-faces)
    ;; fix issue #31 temporally
    (defun my/define-word--fix-31 (define-word-orig &rest args)
      "Fix `define-word' backends that require a user agent (like wordnik)."
      (let ((url-request-extra-headers
             '(("User-Agent" .
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36"))))
        (apply define-word-orig args)))
    (advice-add #'define-word :around #'my/define-word--fix-31))

  (defun my/define-word ()
    "docstring"
    (interactive)
    (if (use-region-p)
        (call-interactively #'define-word-at-point)
      (call-interactively #'define-word)))

  (defun my/define-word--display-in-buffer (definition)
    "docstring"
    (let* ((buf-name "*DEFINE WORD*")
           (buffer (get-buffer-create buf-name))
           (display-buffer-alist
            `((,buf-name
               (display-buffer-same-window)))))
      (with-current-buffer buffer
        (read-only-mode -1)
        (erase-buffer)
        (insert definition)
        (goto-char (point-min))
        (save-excursion (xml-parse-string))
        (read-only-mode 1)
        (buffer-face-set 'my/medium-large-gothic-face))
      (display-buffer buffer)))

  (defun my/define-word--parse-wordnik-example ()
    (save-excursion
      (let (beg
            results
            (define-word-limit 10))
        (re-search-forward "<h2>Examples" nil t)
        (save-excursion
          (setq beg (re-search-forward "<div class=\"relatedWords-module\">" nil t)))
        (while (re-search-forward "<p class=\"text\">\\(.*\\)</p>" beg t)
          (push "---" results)
          (push (match-string 1) results))
        (when (setq results (nreverse results))
          (define-word--convert-html-tag-to-face (define-word--join-results results))))))

  (defvar my/define-word-part-map-alist '(("adjective" "adj.")
                                          ("adverb" "adv.")
                                          ("intransitive verb" "v.i.")
                                          ("transitive verb" "v.t.")))


  (defun my/define-word--parse-wordnik ()
    (let ((str (define-word--parse-wordnik)))
      (with-temp-buffer
        (insert str)
        (mapc (lambda (abbrev-map)
                (goto-char (point-min))
                (while (re-search-forward (format "\\(%s\\)" (car abbrev-map)) nil t)
                  (let ((match (match-string 1)))
                    (replace-match
                     (propertize (cadr abbrev-map) 'face (text-properties-at (point)))))))
              my/define-word-part-map-alist)
        (buffer-string))))

  (defun my/define-word--parse-wordnik-related-word ()
    "docstring"
    (save-excursion
      (save-match-data
        (seq-reduce
         (lambda (accum group)
           (let (results
                 (define-word-limit 20))
             (if (re-search-forward (format "<h3>%s" group) nil t)
                 (progn (save-excursion
                          (setq beg (re-search-forward "<div class=\"related-group-header clearfix\">" nil t)))
                        (push (concat group ":") results)
                        (while (re-search-forward "<span data-definition-for=\"\\([^\"]*\\)\"" beg t)
                          (push (concat "- " (match-string 1)) results)
                          (re-search-forward "</span>"))
                        (concat (when accum (concat accum "\n\n"))
                                (when (setq results (nreverse results))
                                  (define-word--convert-html-tag-to-face (define-word--join-results results)))))
               accum)))
         '("antonym" "equivalents" "hypernyms" "hyponyms" "same context")
         nil))))

  (defun my/define-word--parse-wordnik-all ()
    ""
    (let* ((def (funcall #'my/define-word--parse-wordnik))
           (rel (funcall #'my/define-word--parse-wordnik-related-word))
           (exp (funcall #'my/define-word--parse-wordnik-example)))
      (concat ;; "Definitions:\n" (funcall #'define-word--parse-wordnik) "\n\n"
       (when def (format "Definitions:\n%s\n\n" def))
       (when rel (format "%s\n\n" rel))
       (when exp (format "Examples:\n%s\n" exp)))))

  (defun my/define-word--parse-weblio ()
    (save-excursion
      (let (beg
            results
            (define-word-limit 10))
        (re-search-forward "<td><b class=\"squareCircle description\">主な意味</b></td>" nil t)
        (save-excursion
          (setq beg (re-search-forward "<div " nil t)))
        (while (re-search-forward "<td[^>]*>\\([^<]*\\)</td>" beg t)
          (push (match-string 1) results))
        (when (setq results (nreverse results))
          (define-word--convert-html-tag-to-face (define-word--join-results results))))))
#+end_src

*** [[https://github.com/hpdeifel/synosaurus/releases.atom][synosaurus]]

#+begin_src emacs-lisp
  (use-package synosaurus
    :straight t
    :custom
    (synosaurus-choose-method 'default))
#+end_src

*** [[https://github.com/purcell/exec-path-from-shell/releases.atom][exec-path-from-shell]]
A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config
    (when (memq window-system '(mac))
      (exec-path-from-shell-initialize)))
#+end_src

*** [[https://github.com/emacs-jp/migemo/releases.atom][migemo]]

migemo allows us to search incrementally Japanese words using roma-ji expression.

#+begin_src emacs-lisp
  (use-package migemo
    :straight t
    :ensure-system-package cmigemo
    :custom
    (migemo-command "cmigemo")
    (migemo-options '("-q" "--emacs"))
    (migemo-user-dictionary nil)
    (migemo-coding-system 'utf-8-unix)
    (migemo-regex-dictionary nil)
    :config
    (cond
     ((string= system-type "gnu/linux")
      (setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict"))
     ((string= system-type "darwin")
      (setq migemo-dictionary "/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict")))
    (load-library "migemo")
    (migemo-init))
#+end_src

**** [[https://github.com/ROCKTAKEY/ivy-migemo/releases.atom][ivy-migemo]]                       :ARCHIVE:ignore:

#+begin_src emacs-lisp
  (use-package ivy-migemo
    :straight t
    :after migemo)
#+end_src

*** [[https://github.com/nflath/hungry-delete/releases.atom][hungry-delete]]
Aggressively delete successive white spaces.

#+begin_src emacs-lisp
  (use-package hungry-delete
    :straight t
    :diminish
    :config
    (global-hungry-delete-mode 1))
#+end_src
*** [[https://github.com/Malabarba/aggressive-indent-mode/releases.atom][aggressive-indent-mode]]
:PROPERTIES:
:ID:       4a58219c-74dd-4135-b56d-876b0db2cd83
:END:

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :straight t
    :diminish (aggressive-indent-mode . "ai")
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
*** [[https://github.com/emacsmirror/adaptive-wrap/releases.atom][adaptive-wrap]]

adaptive-wrap and visual-line-mode are active in a bundle in a bunch of major modes.

#+begin_src emacs-lisp
  (use-package adaptive-wrap
    :straight t)
#+end_src

*** [[https://github.com/iqbalansari/restart-emacs/releases.atom][restart-emacs]]

#+begin_src emacs-lisp
  (use-package restart-emacs
    :straight t
    :bind (("C-M-<delete>"   . restart-emacs)
           ("C-M-S-<delete>" . save-buffers-kill-emacs)))
#+end_src
*** [[https://github.com/coldnew/pangu-spacing/releases.atom][pangu-spacing]]

#+begin_src emacs-lisp
  (use-package pangu-spacing
    :straight t
    :diminish pangu-spacing-mode
    :custom
    (pangu-spacing-real-insert-separtor t)
    :config
    (setq pangu-spacing-chinese-before-english-regexp
          (rx (group-n 1 (category japanese))
              (group-n 2 (in "a-zA-Z0-9"))))
    (setq pangu-spacing-chinese-after-english-regexp
          (rx (group-n 1 (in "a-zA-Z0-9"))
              (group-n 2 (category japanese)))))
#+end_src
*** [[https://github.com/justbur/emacs-which-key/releases.atom][emacs-which-key]]

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :diminish which-key-mode
    :custom
    (which-key-use-C-h-commands t)
    (which-key-max-description-length 43)
    (which-key-idle-delay 0.7)
    (which-key-separator " : ")
    (which-key-side-window-max-height 0.5)
    :config
    (which-key-mode 1)
    (which-key-setup-side-window-bottom))
#+end_src
*** [[https://github.com/abo-abo/hydra/releases.atom][hydra]]

#+begin_src emacs-lisp
  (use-package hydra
    :straight t
    :custom
    (hydra-is-helpful nil))
#+end_src
*** [[https://github.com/NicolasPetton/pass/releases.atom][pass]]

Major mode for manupulating password store file.

#+begin_src emacs-lisp
  (use-package pass
    :straight t
    :config
    (bind-keys :map pass-mode-map
               ("C-j" . pass-view)))
#+end_src

*** [[https://github.com/zx2c4/password-store/releases.atom][password-store]]

#+begin_src emacs-lisp
  (use-package password-store
    :straight t
    :custom
    (password-store-time-before-clipboard-restore 25))
#+end_src

*** nov.el

#+begin_src emacs-lisp
  (use-package nov
    :straight t
    :demand t
    :mode ("\\.epub$" . nov-mode)
    :hook (nov-mode . nov-abbreviate-file-name)
    :custom
    (nov-variable-pitch nil)
    (nov-text-width t)
    :config
    (bind-keys :map nov-mode-map
               ("f" . scroll-up-line)
               ("e" . scroll-down-line)
               ("SPC" . my/forward-paragraph)
               ("E" . my/backward-paragraph)
               ("2" . shr-next-link)
               ("4" . nov-browse-url)
               ("C-j" . nov-browse-url)))

  (defun nov-abbreviate-file-name ()
    "Shorten `nov-file-name' using `directory-abbrev-alist'."
    (setq nov-file-name (abbreviate-file-name nov-file-name)))
#+end_src
*** [[https://github.com/joaotavora/yasnippet/releases.atom][yasnippet]]

#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :delight (snippet-mode " SN")
    :diminish (yas-minor-mode . "ys")
    :hook
    ((prog-mode org-mode shell-mode) . yas-minor-mode-on)
    :custom
    (yas-triggers-in-field t)
    :config
    ;; work around code
    (yas-reload-all))
#+end_src
**** [[https://github.com/AndreaCrotti/yasnippet-snippets/releases.atom][yasnippet-snippets]]

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :straight t
    :after yasnippet)
#+end_src
*** [[https://github.com/politza/pdf-tools/releases.atom][pdf-tools]]

#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :delight
    (pdf-view-mode " PV")
    :mode ("\\.pdf$" . pdf-view-mode)
    :hook
    (pdf-view-mode . pdf-view-midnight-minor-mode)
    (pdf-view-mode . pdf-view-fit-page-to-window)
    :custom
    (pdf-info-epdfinfo-program "/usr/bin/epdfinfo")
    (pdf-view-display-size 'fit-width))
#+end_src

*** [[https://github.com/emacs-straight/rainbow-mode/releases.atom][rainbow-mode]]

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :diminish
    (rainbow-mode . "rb")
    :hook
    ((css-mode scss-mode php-mode html-mode) . rainbow-mode)
    :custom
    (rainbow-html-colors t)
    (rainbow-x-colors t)
    (rainbow-latex-colors t)
    (rainbow-ansi-colors t))
#+end_src
*** [[https://github.com/protesilaos/modus-themes/releases.atom][modus-themes]]

I love modus-theme which [[https://protesilaos.com/codelog/2019-08-07-emacs-modus-themes/][conforms to WCAG AAA]]

#+begin_src emacs-lisp
  (use-package modus-themes
    :straight (modus-themes
               :host github
               :repo "protesilaos/modus-themes"
               :branch "main")
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil
          modus-themes-region 'no-extend)
    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    (modus-themes-load-vivendi))
#+end_src
*** [[https://github.com/jwiegley/alert/releases.atom][alert]]

#+begin_src emacs-lisp
  (use-package alert
    :straight t
    :config
    (set-face-background 'alert-saved-fringe-face nil)
    (alert-add-rule :status '(buried)
                    :mode   'mu4e-alert
                    :style  'fringe)
    (alert-add-rule :status '(buried)
                    :mode   'dired-mode
                    :style  'fringe)
    (alert-add-rule :status '(buried)
                    :mode   'org-mode
                    :style  'libnotify))

  (defvar alarm-sound (expand-file-name "~/Music/levelup.mp3"))
  (alert-define-style 'alarm
                      :title "alarm"
                      :notifier
                      (lambda (info)
                        (let ((message (plist-get info :message))
                              (severity (plist-get info :severity))
                              (title (plist-get info :title))
                              (icon (plist-get info :icon))
                              (category (plist-get info :category))
                              (buffer (plist-get info :buffer))
                              (mode (plist-get info :mode))
                              (data (plist-get info :data))
                              (style (plist-get info :style))
                              (persistent (plist-get info :persistent))
                              (id (plist-get info :id))
                              (system-volume (string-trim (shell-command-to-string "volget"))))
                          (if (string= system-volume "0")
                              (alert message :severity severity :title title :icon icon :category category :buffer buffer :mode mode :data data :style 'fringe :persistent persistent :id id)
                            (start-process-shell-command "system-alarm" nil
                                                         (mapconcat #'shell-quote-argument
                                                                    (list "mpg321" alarm-sound)
                                                                    " "))))))
#+end_src
*** [[https://github.com/alphapapa/ts.el/releases.atom][ts.el]]

#+begin_src emacs-lisp
  (use-package ts
    :straight t)
#+end_src

*** [[https://github.com/SebastienWae/app-launcher/releases.atom][app-launcher]]

#+begin_src emacs-lisp
  (use-package app-launcher
    :straight '(app-launcher
                :host github
                :repo "SebastienWae/app-launcher"))
#+end_src

* further customization
** handy functionalities
:PROPERTIES:
:header-args+: :tangle (expand-tangle-target ".config/emacs/extensions.el")
:END:

*** power management
Shut down emacs automatically when remaining power of laptop PC lower than [[help:battery-load-low][battery-load-low]]
to avoid accidental data loss.

#+begin_src emacs-lisp
  (require 'battery)

  (run-with-timer 60 60 #'kill-emacs-auto)

  (defun kill-emacs-auto ()
    "Kill Emacs if remaining machine power lower than `battery-load-low'."
    (let* ((data (and battery-status-function (funcall battery-status-function)))
           (percentage (car (read-from-string (cdr (assq ?p data)))))
           (power (cdr (assq ?L data))))
      (when (and (< percentage battery-load-low)
                 (string= power "BAT"))
        (save-buffers-kill-emacs t))))
#+end_src

*** cursor movement

#+begin_src emacs-lisp
  (defun my/forward-paragraph ()
    (interactive)
    (forward-paragraph 2)
    (backward-paragraph 1)
    (forward-line 1)
    (recenter-top-bottom 0))

  (defun my/backward-paragraph ()
    (interactive)
    (backward-paragraph 2)
    (forward-paragraph 1)
    (backward-paragraph 1)
    (forward-line 1)
    (recenter-top-bottom 0))

  (defun my/drag-line-backward ()
    "Drag up current line for one."
    (interactive)
    (transpose-lines 1)
    (previous-line 2))

  (global-set-key (kbd "M-S-<up>") 'my/drag-line-backward)

  (defun my/drag-line-forward ()
    "Drag down current line for one."
    (interactive)
    (next-line 1)
    (transpose-lines 1)
    (previous-line 1))

  (global-set-key (kbd "M-S-<down>") 'my/drag-line-forward)
#+end_src

*** lookup functions

#+begin_src emacs-lisp
  (defmacro define-lookup-function (fun search-prefix &optional word-fixed &rest post-process)
    "Create lookup function named FUN using SEARCH-PREFIX for querying.

  if WORD-FIXED is given, use it as a search word."
    (declare (indent 1))
    `(defun ,fun (word)
       (interactive (list (cond
                           (,word-fixed)
                           ((use-region-p)
                            (buffer-substring (region-beginning) (region-end)))
                           (t (read-string "Enter URL or keywords: ")))))
       (let ((eww-search-prefix ,search-prefix))
         (eww word 4)
         (call-interactively)
         ,@post-process)))

  (define-lookup-function lookup-google "https://www.google.com/search?q=")
  (define-lookup-function lookup-wikipedia-en "https://en.wikipedia.org/wiki/")
  (define-lookup-function lookup-wikipedia-ja "https://ja.wikipedia.org/wiki/")
  (define-lookup-function lookup-amazon "https://www.amazon.co.jp/gp/search/?field-keywords=")
  (define-lookup-function lookup-duckduckgo "https://duckduckgo.com/html/?kl=jp-jp&k1=-1&kc=1&kf=-1&q=")
  (define-lookup-function lookup-eijiro "https://eow.alc.co.jp/search?q=")
  (define-lookup-function lookup-weblio "https://www.weblio.jp/content/")
  (define-lookup-function lookup-youtube "https://www.youtube.com/results?search_query="
                          nil (eww-browse-with-external-browser))

  (with-eval-after-load 'hydra
    (defhydra hydra-lookup (global-map "C-c l"
                                       :color blue)
      "Lookup"
      ("g" lookup-google)
      ("w" lookup-wikipedia-ja)
      ("W" lookup-wikipedia-en)
      ("a" lookup-amazon "amazon.co.jp")
      ("d" lookup-duckduckgo "duckduckgo")
      ("l" lookup-weblio "weblio")
      ("y" lookup-youtube "youtube")
      ("e" my/define-word)
      ("j" (lambda ()
             (interactive)
             (let ((define-word-default-service 'weblio))
               (my/define-word)))
       "japanese translation")
      ("J" lookup-eijiro)
      ("s" synosaurus-lookup "synosaurus-lookup")
      ("S" synosaurus-choose-and-replace "synosaurus-replace")
      ("o" my/lookup-org-archive)
      ("'" utl-say)
      ("q" nil "quit")))
#+end_src

*** perspective control

This hydra definition enalbes the user to focus on changing font size, moving window to display.

#+begin_src emacs-lisp
  (with-eval-after-load 'hydra
    (defhydra hydra-perspective
      (global-map "C-&"
                  :foreign-keys warn
                  :pre (set-face-attribute 'fringe nil :background "LightSeaGreen")
                  :post (set-face-attribute 'fringe nil :background nil))
      "Hydra perspective"
      ("f" scroll-up-line)
      ("e" scroll-down-line)
      (">" (scroll-left 1))
      ("<" (scroll-right 1))
      ("t" visual-line-mode)
      ("+" text-scale-adjust)
      ("=" text-scale-adjust)
      ("-" text-scale-adjust)
      ("0" text-scale-adjust)
      ("C-f" forward-char)
      ("M-f" forward-word)
      ("C-b" backward-char)
      ("M-b" backward-word)
      ("C-n" next-line)
      ("C-p" previous-line)
      ("C-v" scroll-up-command)
      ("M-v" scroll-down-command)
      ("C-a" move-beginning-of-line)
      ("C-e" move-end-of-line)
      ("C-g" keyboard-quit :exit t)
      ("q" nil :exit t)))
#+end_src

*** tldr

#+begin_src emacs-lisp
  (defun my/tldr (command)
    "Show the output of tldr for COMMAND in a dedicated buffer."
    (interactive (list (read-string "Coomand: ")))
    (let* ((buf-name "*TL;DR*")
           (buffer (get-buffer-create buf-name)))
      (with-current-buffer buffer
        (read-only-mode -1)
        (erase-buffer)
        (insert (shell-command-to-string (format "tldr %s"
                                                 (shell-quote-argument command))))
        (ansi-color-apply-on-region (point-min) (point-max))
        (goto-char (point-min))
        (read-only-mode 1))
      (display-buffer buffer '((display-buffer-pop-up-window)
                               . ((window-height . 8))))
      (switch-to-buffer-other-window buffer)))
#+end_src

*** sending email

#+begin_src emacs-lisp
  (defun mail-simple-send (mailto subject body)
    "Default function to send a mail with SUBJECT and BODY to myself."
    (save-excursion
      (let ((message-kill-buffer-on-exit t))
        (message-mail mailto subject)
        (message-goto-body)
        (insert body)
        (message-send-and-exit))))

  (defun mail-buffer (mailto)
    "Send the current buffer contents as a email.

  If region is active, send the string in the region instead."
    (let ((mail-subj (buffer-name))
          (mail-body (if (use-region-p)
                         (buffer-substring (region-beginning) (region-end))
                       (buffer-string))))
      (mail-simple-send mailto mail-subj mail-body)))
#+end_src

*** open url or something

#+begin_src emacs-lisp
  (require 'thingatpt)

  (global-set-key (kbd "C-c C-o") 'my/enter-thing-at-point)

  (defun my/enter-thing-at-point ()
    "Enter thing in appropriate manner."
    (interactive)
    (let* ((thing nil)
           (region-thing (when (use-region-p)
                           (buffer-substring (region-beginning) (region-end)))))
      (cond
       ((setq thing
              (if region-thing
                  (when (string-match thing-at-point-email-regexp
                                      region-thing)
                    (match-string 0 region-thing))
                (thing-at-point 'email t)))
        (mu4e~compose-mail thing)
        t)
       ((setq thing (car (eww-links-at-point)))
        (cl-case (prefix-numeric-value current-prefix-arg)
          (16 (browse-url-default-browser thing))
          (4 (eww-browse-url thing))
          (t (open-url thing)))
        t)
       ((setq thing
              (if region-thing
                  (when (string-match browse-url-button-regexp
                                      region-thing)
                    (match-string 0 region-thing))
                (thing-at-point 'url t)))
        (let ((url-pos (split-location-uri thing)))
          (cl-case (prefix-numeric-value current-prefix-arg)
            (16 (browse-url-default-browser (car url-pos)))
            (4 (eww-browse-url (car url-pos)))
            (t (open-url (car url-pos) (cadr url-pos))))
          t))
       ((and (setq thing
                   (if region-thing
                       (when (string-match (format "[%s].+" thing-at-point-file-name-chars)
                                           region-thing)
                         (match-string 0 region-thing))
                     (thing-at-point 'filename t)))
             (file-exists-p thing))
        (let ((url-pos (split-location-uri thing))
              (prefix-arg current-prefix-arg))
          (if (equal prefix-arg '(4))
              (find-file (car url-pos))
            (my/view-file (car url-pos) prefix-arg)
            (unless prefix-arg
              (goto-pos (cadr url-pos))))
          t))
       ;; this clause must be last in cond
       ((setq thing (button-at (point)))
        (push-button)
        t))))

  (defun split-location-uri (location-uri)
    "Split LOCATION-URI into normal uri and location specifier.

  Location specifier is either line number or string.
  If splitting is successful, this function returns a list containing uri and location specifier."
    (cond
     ((string-match "\\(.+\\)::\\([[:digit:]]+\\)$" location-uri)
      (list (match-string 1 location-uri) (string-to-number (match-string 2 location-uri))))
     ((string-match "\\(.+\\)::\\([[:graph:][:blank:]]+\\)$" location-uri)
      (list (match-string 1 location-uri) (match-string 2 location-uri)))
     (t (list location-uri))))

  (defun goto-pos (pos)
    "Move the cursor to the location where `POS' is pointing.

  if `POS' is a number assumed to be a line number.
  If `POS' is a string assumed to be a searching word."
    (interactive)
    (when (cond
           ((numberp pos)
            (forward-line (- pos (line-number-at-pos)))
            t)
           ((stringp pos)
            (let ((pos-num (string-to-number pos)))
              (cl-case pos-num
                (0 (goto-char
                    (re-search-forward
                     (string-join (split-string pos "" t "[ \t\r\n]*") "[ \t\r\n]*") nil nil)))
                (t (forward-line (- pos-num (line-number-at-pos))))))
            t))
      (beginning-of-line)
      (recenter-top-bottom 0)))

  (defun open-url (url &optional pos)
    "Open URL in an appropriate manner and jump to POS.

  If URL points to a multimedia contents such as youtube video and mp3 audio file,
  play it in media player."
    (cond
     ((or (string-match "\\([^/]+\\.pdf\\)" url)
          (string-match "\\([^/]+\\.epub\\)" url))
      (let ((dl-file (expand-file-name (match-string 0 url)
                                       temporary-file-directory)))
        (call-process-shell-command (format "curl %s -s -o %s" url dl-file))
        (my/view-file dl-file)
        (when pos (goto-pos pos))))
     ((string-match-p "^https?://www.youtube.com.*" url)
      ;; convert greedily watch url to playlist url if possible
      (let ((url (if (string-match "&list=\\([[:graph:]]+\\)" url)
                     (format "https://www.youtube.com/playlist?list=%s" (match-string 1 url))
                   url))
            (ytdl-opts
             (remove nil
                     (list (when (numberp pos)
                             (format "--ytdl-raw-options=playlist-start=%d" pos))
                           (format "--ytdl-format=%s" (shell-quote-argument (youtube-dl-format)))))))
        (start-process-shell-command "mpv" nil (format "nohup mpv --force-window %s \"%s\" >/dev/null 2>&1" (mapconcat 'identity ytdl-opts " ") url))))
     ((seq-some (lambda (suffix)
                  (string-suffix-p suffix url))
                '(".mp3" ".m4a" ".mp4" ".mkv" ".web" ".|m3" ".|jp" ".|jp" ".png"))
      (start-process-shell-command "mpv" nil (format "nohup mpv --force-window \"%s\" >/dev/null 2>&1" url)))
     (t (browse-web url)
        (setq lexical-binding t)
        (setq position pos)
        (add-hook 'eww-after-render-hook
                  (lambda ()
                    (when position (goto-pos position))
                    (setq-local eww-after-render-hook nil))
                  0 t))))
#+end_src

*** media file handling

#+begin_src emacs-lisp
  (defvar my/download-video-dir "~/Videos" "Directory where downloaded video locate.")

  (defun my/download-video (url &optional filename playlistp)
    "Download video from `URL'.

  If optional argument `FILENAME' is passed, try to use this as filename.
  If optional argument `PLAYLISTP' is passed, try to download all videos in playlist
  instead of single video."
    (interactive (list (read-string "URL: ")))
    (when (string-match "https?://www.youtube.com.+" url)
      (let* ((url-orig (match-string 0 url))
             (urlobj-orig (url-generic-parse-url url-orig))
             (pq-orig (url-path-and-query urlobj-orig))
             (yt-url
              (if (and (not playlistp)
                       (string= (car pq-orig) "/watch")
                       (assoc-string "list" (url-parse-query-string (cdr pq-orig))))
                  (url-recreate-url
                   (url-parse-make-urlobj (url-type urlobj-orig)
                                          (url-user urlobj-orig)
                                          (url-password urlobj-orig)
                                          (url-host urlobj-orig)
                                          (url-portspec urlobj-orig)
                                          (concat (car pq-orig) "?"
                                                  (url-build-query-string
                                                   (list (assoc "v" (url-parse-query-string (cdr pq-orig))))))
                                          (url-target urlobj-orig)
                                          (url-attributes urlobj-orig)
                                          (url-fullness urlobj-orig)))
                url)))
        (setq lexical-binding t)
        (setq url-lex url)
        (setq filename-lex (if filename
                               (replace-regexp-in-string
                                "[\\?\"/:|’]" "" filename)
                             nil))
        (princ (format "Downloading: %s" (or filename-lex url)))
        (set-process-sentinel
         (start-process-shell-command
          "download video" nil
          (format "cd \"%1$s\" && youtube-dl %2$s \"%3$s\""
                  (expand-file-name my/download-video-dir)
                  (mapconcat #'identity
                             (list (format "--format \"%s\"" (youtube-dl-format))
                                   (when (and filename-lex
                                              (not playlistp)
                                              (not (string= (car pq-orig) "/playlist")))
                                     (format "--output %s" (shell-quote-argument filename-lex)))
                                   (when playlistp "--yes-playlist --ignore-errors --download-archive downloaded.txt"))
                             " ")
                  yt-url))
         (lambda (process desc)
           (when (eq (process-status process) 'exit)
             (let ((exit-status (process-exit-status process)))
               (if (= exit-status 0)
                   (alert (format "Downloaded: %s" (or filename-lex url-lex)) :severity 'normal :style 'fringe)
                 (alert (format "Failed(%d): %s" exit-status (or filename-lex url-lex)) :severity 'urgent :style 'fringe)))))))))

  (defvar my/download-audio-dir "~/Audio" "Directory where downloaded audio locate.")

  (defun my/download-audio (url &optional filename)
    "Download audio from `URL'.

  If optional argument `FILENAME' is given use this as a filename."
    (interactive (list (read-string "URL: ")))
    (let* ((temp-fname (make-temp-name (if (directory-name-p my/download-audio-dir)
                                           my/download-audio-dir
                                         (concat my/download-audio-dir "/")))))
      (setq lexical-binding t)
      (setq url-lex url)
      (setq filename-lex (if filename
                             (replace-regexp-in-string
                              "[\\?\"/:|’]" "" filename)
                           nil))
      (princ (format "Downloading: %s" (or filename-lex url)))
      (set-process-sentinel
       (start-process-shell-command
        "download audio" nil
        (format "%s; %s; %s"
                (if (string-match "https?://www.youtube.com.+" url)
                    (format "youtube-dl --extract-audio --audio-format mp3 \"%1$s\" -o %2$s.mp3; mv -f %2$s.mp3 %2$s" (match-string 0 url) temp-fname)
                  (format "curl -LJs \"%s\" -o %s" url temp-fname))
                (format "cd \"%s\" && ffmpeg -n %s %s.mp3"
                        (expand-file-name my/download-audio-dir)
                        (mapconcat #'identity
                                   (list (format "-i %s" temp-fname)
                                         (if (equal '(undecided) (find-coding-systems-string (or filename-lex url)))
                                             "-filter:a \"atempo=1.1\""
                                           "-filter:a \"atempo=1.7\"")
                                         "-vn")
                                   " ")
                        (if filename-lex
                            (shell-quote-argument filename-lex)
                          (file-name-base temp-fname)))
                (format "rm -f %s" temp-fname)))
       (lambda (process desc)
         (when (eq (process-status process) 'exit)
           (let ((exit-status (process-exit-status process)))
             (if (= exit-status 0)
                 (alert (format "Downloaded: %s" (or filename-lex url-lex)) :severity 'normal :style 'fringe)
               (alert (format "Failed(%d): %s" exit-status (or filename-lex url-lex)) :severity 'urgent :style 'fringe))))))))

  (defun show-media-duration (url)
    "Return a duration value for media located at URL."
    (when-let ((duration (cond
                          ((string-match "https?://www.youtube.com.+" url)
                           (car (split-string (shell-command-to-string
                                               (format "youtube-dl --get-duration %s" url)))))
                          ((string-match "https?://.+" url)
                           (car (split-string (shell-command-to-string
                                               (format "ffmpeg -i \"%s\" 2>&1 | grep Duration | awk -F '[ ]+' '{print substr($3, 0, length($3)-1)}'" url))))))))
      (message "Duration: %s" (if (stringp duration)
                                  duration "N/A"))))

  (defun my/download-video-at-point ()
    "Download video file from url currently pointed."
    (interactive)
    (when-let ((url (thing-at-point-url-at-point)))
      (my/download-video url)))

  (defun my/download-audio-at-point ()
    "Download audio file from url currently pointed."
    (interactive)
    (let ((url (thing-at-point-url-at-point)))
      (when url
        (my/download-audio url))))

  (defun my/show-media-duration-at-point ()
    "Show duration of media file which cursor currently pointed."
    (interactive)
    (if-let* ((url (thing-at-point-url-at-point)))
        (show-media-duration url)))

  (defmacro youtube-dl-format ()
    "Return appropriate format option value for youtube-dl command."
    "worstvideo+worstaudio mp4")

  (global-set-key (kbd "C-c D v") 'my/download-video-at-point)
  (global-set-key (kbd "C-c D a") 'my/download-audio-at-point)
  (global-set-key (kbd "C-c D =") 'my/show-media-duration-at-point)
#+end_src

**** confidential settings                     :crypt:

-----BEGIN PGP MESSAGE-----

hQEMA9uWvE5LJ2ejAQf+LnxAHJ0vJk6rHxHtu2cnBeIqc/IIlp4Q5D4TgX2p91/P
5drEy/FHViLkJRvmZ+UoNlv4+yQTEXpxqeW+oSPrQ5q1SVYYpDRMx9kip/0nWnHX
hvbScPYZom5QRK7SOWXzFhMzeZe3Fc/LFpqGRpn+/XStHVMn3XTgkIVeGD3tiqNS
5Epsdgm+fQrMTJkanGwTaaCJYcvDIcuV+wWDA/t5gOM5lOwmr1wOyLNyuKV6DHqe
x83vIeUs/WDTHKv/slQupTUMuUxBSMO8n7sOr5VfsALH3qMIq6WYfS5He6+neB6B
vmsEtiO59lILcKSx7e3B1XbXAEIOhlLvIk0YCH1G+NLBIQGnX8Zz+ehBr5UPfCCU
BLxFGcdqqRvQzaOvEYNCSXdJsCtusfBkWvPE7gRkk8cCBJivsp4looHNI1YwfpZo
QiGzqXAWIf0bWrD1uCZJZ9sKV8TqJeSUv//R07DQ1FWP8KXdz0jx+T0ODUn+qAEc
VlwjhKb7HRXwzPvBpX9Gt6QxR/B0iZ6k1uhU5DKoKLK/hmFST9hXEin2retjb7yE
Sgv7CjQkpaSJv8MTfFc+XC/WtnZV3qu0btSblvgfVEKYr6qDo7+rHe71SOHx3cxr
TBcLEzH9KaJgVq+MrjLc2BWddh/aeMFLiWEyq0ENY2WgHkxFQ1gQ8THQ2hIQ3Oik
sCTdB5LLPYg138Pi6zXqW+/joDYhvr9U9w60d730eRoYEes1qHBQe1389QTt9kqG
Qqwhsi5EbTNCInkgbQVJmTf0K/6iC65EUbxggcAi9NvpBA3hSYbI7/meYOhIImmz
e31Hsf6QIuZe8dXqsfQmmPP4lLC/469ojrbRH66O6zHpfzj7dZEB8dLuOjgUiq0a
uITNB/ymtjH0gRJp2FsS2n0CSXM9uuUQM3Lne3hD5JFbTTusifXRRUnyxb3jCdGu
MvHkcNaUqgU+pTSh/vqm38/pmqk1BE6mPp1dNMllXv1QUW4=
=ZjCr
-----END PGP MESSAGE-----

*** using speech synthesis

#+begin_src emacs-lisp
  (defun utl-say ()
    "read out using open-jtalk"
    (interactive)
    (let* ((read-text-raw (buffer-substring (region-beginning) (region-end)))
           (read-text (replace-regexp-in-string "[ \t\r\n\v\f]+" "" read-text-raw))
           (say-cmd (if (string-match
                         (format "\\`[%s]+\\'" "[:ascii:]’“”–")
                         read-text)
                        "esay" "jsay")))
      (call-process-shell-command (format "echo %s | %s &" read-text say-cmd))))
#+end_src

**** jsay

#+begin_src shell :tangle (expand-tangle-target ".local/bin/jsay") :tangle-mode (identity #o755)
  #!/usr/bin/env bash

  readonly DIC="${HOME}/usr/share/hts/dic"
  readonly VOICE="${HOME}/usr/share/hts/voice/mei_normal.htsvoice"
  readonly AUDIO_FILE=`mktemp ${HOME}/var/tmp/jsay_XXXXXXXX.wav`

  open_jtalk -x ${DIC} -m ${VOICE} -ow ${AUDIO_FILE}
  aplay --quiet ${AUDIO_FILE}
  rm -f ${AUDIO_FILE}

  exit 0
#+end_src

**** esay

#+begin_src shell :tangle (expand-tangle-target ".local/bin/esay") :tangle-mode (identity #o755)
  #!/usr/bin/env bash

  readonly VOICE="${HOME}/usr/share/hts/voice/cmu_us_arctic_slt.htsvoice"
  readonly AUDIO_FILE=`mktemp ${HOME}/var/tmp/esay_XXXXXXXX.wav`

  flite_hts_engine -m ${VOICE} -o ${AUDIO_FILE}
  aplay --quiet ${AUDIO_FILE}
  rm -f ${AUDIO_FILE}

  exit 0
#+end_src

*** collective hydra definitions

#+begin_src emacs-lisp
  (with-eval-after-load 'hydra
    (defhydra hydra-launcher (global-map "M-l"
                                         :color blue)
      "Launch"
      ("xe" eshell)
      ("xg" gdb)
      ("xi" ielm)
      ("xs" shell)
      ("xt" term)
      ("xv" vterm)
      ("D" dired-jump)
      ("=" ediff)
      ("@" twit)
      ("v" magit-status)
      ("r" re-builder)
      ("a" app-launcher-run-app)
      ("w" lookup-google)
      ("W" eww-switch-to-buffer)
      ("m" mu4e)
      ("M" mu4e-alert-view-unread-mails)
      ("f" elfeed)
      ("p" proced)
      ("P" list-processes)
      ("b" battery)
      ("c" calendar)
      ("?" woman)
      (";" my/tldr)
      ("q" quickrun)
      ("C-g" nil "cancel"))
    (defhydra hydra-toggle
      (global-map "C-c t"
                  :color pink
                  :pre (set-face-background 'mode-line "DarkOrange4")
                  :post (set-face-background 'mode-line "gray10"))
      "Toggle"
      ("t" visual-line-mode)
      ("T" toggle-truncate-lines)
      ("i" adaptive-wrap-prefix-mode)
      ("p" variable-pitch-mode)
      ("w" whitespace-mode)
      ("l" display-line-numbers-mode)
      ("L" line-number-mode)
      ("C" column-number-mode)
      ("v" view-mode)
      ("r" rainbow-mode)
      ("\\" toggle-input-method)
      ("F" toggle-frame-fullscreen)
      ("SPC" pangu-spacing-mode)
      ("q" nil "quit"))
    (defhydra hydra-transpose (global-map "C-t"
                                          :color blue)
      "Transpose"
      ("c" transpose-chars "chars")
      ("w" transpose-words "words")
      ("l" transpose-lines "lines")
      ("S" transpose-sentences "sentences")
      ("p" transpose-paragraphs "paragraphs")
      ("s" transpose-sexps "sexp")
      ("ow" org-transpose-words "Org mode words")
      ("oe" org-transpose-elements "Org mode elements")
      ("ot" org-table-transpose-table-at-point "Org mode table")
      ("q" nil "cancel" :exit t)))
#+end_src

*** utilities

#+begin_src emacs-lisp
  (defun my/copy-line-number ()
    "Copy the line number of current point into the kill ring."
    (interactive)
    (let ((line-number (number-to-string (line-number-at-pos))))
      (message "Line number: %s" line-number)
      (kill-new line-number)))

  (global-set-key (kbd "C-M-S-w") 'my/copy-line-number)

  (defun my/insert-time-stamp (&optional arg)
    "Insert date string with format derived in deterministic way with ARG."
    (interactive "P")
    (let* ((simple-fmt "%Y%m%d")
           (concise-fmt "%Y-%m-%d")
           (verbose-fmt "%Y-%m-%d %H:%M:%S")
           (fmt-in-use (cond
                        ((equal arg '(16))
                         (read-string "time format: "
                                      "%Y-%m-%d %H:%M:%S"))
                        ((equal arg '(4))
                         verbose-fmt)
                        (t (cond
                            ((eq major-mode 'text-mode) concise-fmt)
                            ((eq major-mode 'dired-mode) simple-fmt)
                            (t simple-fmt))))))
      (insert (format-time-string fmt-in-use))))

  (global-set-key (kbd "C-c .") 'my/insert-time-stamp)
#+end_src

** original features
*** org-english

Learning Workflow for English words:
1. Capture an word to study by invoking my/org-english-capture
2. Review words periodically with my/org-english-drill-test-display or its variants

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/site-lisp/org-english.el")
  (defun my/org-english-capture (word)
    "Capture an english WORD as a org-mode entry suitable for org-drill.

  Capture URL or file currently visiting as well as a sentence at point."
    (interactive (list (if (use-region-p)
                           (buffer-substring (region-beginning) (region-end))
                         (read-string "Phrase: "))))
    (let* ((sentence-end-double-space nil)
           (org-english-word word)
           (match-entry (org-ql-select
                          (my/org-archive-files)
                          `(and (heading ,(format "%s" word))
                                (tags "drill"))
                          :action 'element-with-markers))
           (sentence (sentence-at-point)))
      (kill-new (if (and (stringp sentence)
                         (stringp word))
                    (replace-regexp-in-string word (format "[%s]" word)
                                              sentence)
                  ""))
      (cond
       (match-entry (org-capture nil "!1"))
       (t (org-capture nil "!0")))))

  (with-eval-after-load 'org-ql-view
    (push '("English phrase list"
            :buffers-files my/org-archive-files
            :query (and (tags "drill")
                        (tags "fd_en")))
          org-ql-views))

  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("!0" "drill entry for english word"
                   entry (function org-goto-clocking-or-today)
                   "* %i :drill:fd_en:
  [%(my/org-english-insert-japanese-translation)]
  %(my/org-english-insert-english-translation)
  - %a
    ,#+begin_quote
  %c
    ,#+end_quote"))
    (add-to-list 'org-capture-templates
                 '("!1" "drill entry for english word"
                   item(function my/org-english-goto-match)
                   "- %a
    ,#+begin_quote
  %c
    ,#+end_quote")))

  (defun my/org-english-goto-match ()
    "Goto function for org-capture-template designed to insert an edditional example
  to existing english word entry."
    (org-goto-marker-or-bmk
     (plist-get (cadar match-entry) :org-marker)))

  (defun my/org-english-insert-english-translation ()
    "Insert English translation into org capture entry."
    (let* ((url (format "http://wordnik.com/words/%s" (downcase org-english-word)))
           (buffer (url-retrieve-synchronously url t t)))
      (with-temp-buffer
        (url-insert-buffer-contents buffer url)
        (completing-read "match" (split-string (funcall 'my/define-word--parse-wordnik) "\n")))))

  (advice-add #'my/org-english-insert-english-translation :around #'my/define-word--fix-31)

  (defun my/org-english-insert-japanese-translation ()
    "Insert Japanese translation into org capture entry."
    (let* ((url (format "https://ejje.weblio.jp/content/%s" (downcase org-english-word)))
           (buffer (url-retrieve-synchronously url t t)))
      (with-temp-buffer
        (url-insert-buffer-contents buffer url)
        (funcall 'my/define-word--parse-weblio))))

  (defmacro with-org-drill-english-config (&rest body)
    "Evaluate BODY with config for Org-Drill for english words review."
    `(progn
       (let ((org-drill-scope '("~/org/agenda/life.org"
                                "~/org/archive/archive_2021.org"
                                "~/org/archive/archive_2020.org"
                                "~/org/archive/archive_2019.org"))
             (org-drill-question-tag "drill")
             (org-drill-maximum-items-per-session 20)
             (org-drill-hide-item-headings-p t)
             (org-startup-indented nil))
         (global-visual-line-mode 1)
         (org-indent-mode -1)
         ,@body)
       (global-visual-line-mode 0)
       (org-indent-mode 1)
       (org-save-all-org-buffers)))

  (defun my/org-english-drill ()
    "Invoke Org-Drill for English word review."
    (interactive)
    (with-org-drill-english-config (org-drill)))

  (defun my/org-english-drill-resume ()
    "Resume Org-Drill session for english word review."
    (interactive)
    (with-org-drill-english-config (org-drill-resume)))

  (defun my/org-english-drill-nontrivial ()
    ""
    (interactive)
    (let ((org-drill-match "-trivial"))
      (with-org-drill-english-config (org-drill))))

  (defun my/org-english-drill-new ()
    ""
    (interactive)
    (let ((org-drill-match "-DRILL_TOTAL_REPEATS>0"))
      (with-org-drill-english-config (org-drill))))

  (defun my/org-english-drill-test-display ()
    "Show Org-Drill entry in the same way as english drill session."
    (interactive)
    (with-org-drill-english-config (org-drill-test-display)))

  (provide 'my/org-english)
#+end_src

*** org-password-store

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/site-lisp/org-password-store.el")
  (require 'password-store)

  (defcustom my/org-password-store-property "PASSWORD_STORE"
    "Property used in my/password-store feature to get password-store entry name attached to current org entry.")

  (defmacro with-password-store-entry (entry &rest body)
    "Eval BODY which can refer password-store ENTRY.."
    (declare (indent defun))
    `(let ((entry (or ,entry
                      (when (derived-mode-p 'org-mode) (org-entry-get (point) my/org-password-store-property))
                      (password-store--completing-read t))))
       ,@body))

  (defmacro with-password-store-entry-field (entry field &rest body)
    "Eval BODY which can refer password-store ENTRY and FIELD..

  Plus, OBDY can refer value of FIELD named field-value."
    (declare (indent defun))
    `(let* ((entry (or ,entry
                       (when (derived-mode-p 'org-mode) (org-entry-get (point) my/org-password-store-property))
                       (password-store--completing-read t)))
            (field (or ,field
                       (password-store-read-field entry)))
            (field-value (password-store-get-field entry field)))
       ,@body))

  (defun my/password-store-copy ()
    "Add password for ENTRY into the kill ring.

  `password-store-copy' is responsible for managing the kill ring."
    (interactive)
    (with-password-store-entry nil
      (password-store-copy entry)))

  (defun my/password-store-copy-field ()
    "Add field for entry into the kill ring.

  entry and field is determined by appropriate manner."
    (interactive)
    (with-password-store-entry-field nil nil
      (password-store-copy-field entry field)))

  (defun my/password-store-url (&optional arg)
    "Browse url stored in entry by appropriate manner determined by ARG."
    (interactive "P")
    (with-password-store-entry-field nil "url"
      (cl-case (prefix-numeric-value arg)
        (16 (browse-url field-value))
        (4 (eww-browse-url field-value))
        (t (open-url field-value)))))

  (defun my/password-store-show-field ()
    "Show a field value in the minibuffer.

  Password-store entry and field used to derive this value are from org property
  or selected by user."
    (interactive)
    (with-password-store-entry-field nil nil
      (message "%s: %s" field field-value)))

  (defun my/password-store-create ()
    (interactive)
    (let* ((input (read-string "Entry-name or URL: "))
           (domain (when (string-match-p browse-url-button-regexp input)
                     (string-trim-right
                      (shell-command-to-string (format "echo %s | awk -F[/:] '{print $4}'"
                                                       (shell-quote-argument input)))))))
      (with-password-store-entry (cond
                                  ((> (length domain) 0) domain)
                                  (input))
        (when (derived-mode-p 'org-mode)
          (org-entry-put (point) my/org-password-store-property entry))
        (password-store-edit entry))))

  (defun my/password-store-edit ()
    (interactive)
    (with-password-store-entry nil
      (password-store-edit entry)))

  ;; TODO: make my/password-store-insert as soon after
  ;;     : password-store--run-insert has been implemented

  (defun my/password-store-remove ()
    (interactive)
    (with-password-store-entry nil
      (password-store-remove entry)
      (when (derived-mode-p 'org-mode)
        (org-entry-delete (point) my/org-password-store-property))))

  (defun my/password-store-web-login ()
    (interactive)
    (with-password-store-entry-field nil "username"
      (password-store-copy entry)
      (sleep-for 0.2) ; work around for overlapping message
      (if field-value
          (message "%s: %s" field field-value)
        (message (string-trim-right
                  (concat
                   (when-let ((email (assoc "email" (password-store-parse-entry entry))))
                     (format "%s: %s\n" (car email) (cdr email)))
                   (when-let ((second (nth 1 (password-store-parse-entry entry))))
                     (format "%s: %s\n" (car second) (cdr second)))))))
      (sleep-for 3)
      (funcall-interactively #'my/password-store-url '(16))))

  (advice-add #'password-store-clear :before #'my/password-store-clear)

  (defun my/password-store-clear (&optional field)
    "Overwrite clipboard data so that password once saved in clipboard is deleted
   for security risk.

  FIELD originally for messaging is ignored in this function."
    (interactive)
    (when password-store-kill-ring-pointer
      (kill-new "")
      (setcar kill-ring-yank-pointer "")))

  (with-eval-after-load 'hydra
    (defhydra hydra-password-store (global-map "C-o p"
                                               :color teal)
      "Password store"
      ("cc" my/password-store-copy)
      ("cf" my/password-store-copy-field)
      ("s" my/password-store-show-field)
      ("w" my/password-store-url)
      ("l" my/password-store-web-login)
      ("n" my/password-store-create)
      ("e" my/password-store-edit)
      ("v" my/password-store-edit)
      ("k" my/password-store-remove)
      ("q" nil "quit")))
#+end_src

*** clocktable-by-tag with org-clock

Provide a function to Build a clock table summing up time by tag.

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/site-lisp/clocktable-by-tag.el")
  (require 'org-table)
  (require 'org-clock)

  (defun clocktable-by-tag/shift-cell (n)
    (let ((str ""))
      (dotimes (i n)
        (setq str (concat str "| ")))
      str))

  (defun clocktable-by-tag/insert-tag (params)
    (let ((match (plist-get params :match)))
      (insert "|--\n")
      (insert (format "| %s | *Tag time* |\n" match))
      (let ((total 0))
        (mapcar
         (lambda (file)
           (let ((clock-data (with-current-buffer (find-file-noselect file)
                               (org-clock-get-table-data (buffer-name) params))))
             (when (> (nth 1 clock-data) 0)
               (setq total (+ total (nth 1 clock-data)))
               (insert (format "| | File *%s* | %.2f |\n"
                               (file-name-nondirectory file)
                               (/ (nth 1 clock-data) 60.0)))
               (dolist (entry (nth 2 clock-data))
                 (insert (format "| | . %s%s | %s %.2f |\n"
                                 (org-clocktable-indent-string (nth 0 entry))
                                 (replace-regexp-in-string "|" "\\vert\{\}" (nth 1 entry) nil t)
                                 (clocktable-by-tag/shift-cell (nth 0 entry))
                                 (/ (nth 4 entry) 60.0)))))))
         (org-agenda-files))
        (if (= total 0)
            (save-excursion
              (re-search-backward "*Tag time*")
              (forward-line -1)
              (dotimes (i 2)
                (org-table-kill-row)))
          (save-excursion
            (re-search-backward "*Tag time*")
            (org-table-next-field)
            (org-table-blank-field)
            (insert (format "*%.2f*" (/ total 60.0))))))
      (org-table-align)))

  (defun org-dblock-write:clocktable-by-tag (params)
    (funcall indent-line-function)
    (insert "| Tag | Headline | Time (h) |\n")
    (insert "|     |          | <r>  |\n")
    (let ((matches
           (org-global-tags-completion-table)))
      (mapcar (lambda (match)
                (let ((match-str (car match)))
                  (when (string= (substring match-str 0 3) "AC_")
                    (setq params (plist-put params :match match-str))
                    (clocktable-by-tag/insert-tag params))))
              matches)))

  (provide 'clocktable-by-tag)
#+end_src

*** narrow-dwim

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/site-lisp/narrow-dwim.el")
  (bind-key* "C-x n" 'my/toggle-narrow-dwim)

  (defun my/toggle-narrow-dwim (arg)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix ARG, don't widen, just narrow even if buffer is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not arg))
           (when (org-buffer-narrowed-p)
             (when org-startup-indented
               (org-indent-mode 1))
             (visual-line-mode -1)
             (adaptive-wrap-prefix-mode -1))
           (widen)
           (setq-local truncate-lines t))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((and (boundp 'org-src-mode) org-src-mode (not arg))
           (org-edit-src-exit))
          ((condition-case err
               (org-edit-src-code)
             (user-error nil)))
          ((derived-mode-p 'org-mode)
           (cond ((org-at-block-p)
                  (org-narrow-to-block))
                 ((org-at-heading-p)
                  (org-narrow-to-subtree)
                  (adaptive-wrap-prefix-mode))
                 (t (org-narrow-to-element)))
           (org-indent-mode -1)
           (visual-line-mode 1))
          ((eq major-mode 'dired-mode)
           (dired-subtree-narrow))
          (t (narrow-to-defun))))

  ;; (add-hook 'post-command-hook 'highlight-narrowed-buffer)
  ;; (defun highlight-narrowed-buffer ()
  ;;   "Highlight narrowed buffer.

  ;; Narrowed buffer have a fringe with highlighting color.
  ;; Plus text size in the buffer becomes a little bit larger."
  ;;   (unless (or (member last-command
  ;;                       '(text-scale-adjust))
  ;;               (eq major-mode 'Info-mode)
  ;;               (string-match-p (rx (seq line-start "CAPTURE-" (one-or-more ascii) line-end))
  ;;                               (buffer-name)))
  ;;     (let ((hl-fringe-color "purple2")
  ;;           (hl-text-scale (sqrt 2)))
  ;;       (set-face-attribute
  ;;        'fringe nil :background (if (buffer-narrowed-p)
  ;;                                    (progn
  ;;                                      (text-scale-set hl-text-scale)
  ;;                                      hl-fringe-color)
  ;;                                  (progn
  ;;                                    (when (= text-scale-mode-amount hl-text-scale)
  ;;                                      (text-scale-set 0))
  ;;                                    nil))))))
#+end_src
*** weather

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/site-lisp/weather.el")
  ;; 気象庁配信の天気情報を加工して表示

  (require 'request)
  (require 'cl)

  (defvar weather-areas
    '(((url . "http://www.drk7.jp/weather/xml/14.xml")
       (pref . "神奈川県")
       (area . "西部"))
      ((url . "http://www.drk7.jp/weather/xml/22.xml")
       (pref . "静岡県")
       (area . "中部"))))

  (defun weather-area-show (weather-area-alist weather-buffer)
    (lexical-let ((url (assoc-default 'url weather-area-alist))
                  (pref (assoc-default 'pref weather-area-alist))
                  (area (assoc-default 'area weather-area-alist))
                  (buffer weather-buffer))
      (request
        url
        :parser
        (lambda ()
          (let ((xml-string (string-as-multibyte (string-as-unibyte (buffer-string)))))
            (with-temp-buffer
              (erase-buffer)
              (insert xml-string)
              (libxml-parse-xml-region (point-min) (point-max)))))
        :success
        (cl-function
         (lambda (&key data &allow-other-keys)
           (when data
             (with-current-buffer buffer
               (insert (format "%s %s\n" pref area))
               (mapcar
                (lambda (info-node)
                  (insert
                   (format "%s %s %s %s\n"
                           (dom-attr info-node 'date)
                           (apply (lambda (max-temp-node min-temp-node)
                                    (format "%2d/%2d℃"
                                            (string-to-number (dom-text min-temp-node))
                                            (string-to-number (dom-text max-temp-node))))
                                  (dom-by-tag (dom-child-by-tag info-node 'temperature) 'range))
                           (apply (lambda (node-1 node-2 node-3 node-4)
                                    (format "%2d-%2d-%2d-%2d％"
                                            (string-to-number (dom-text node-1))
                                            (string-to-number (dom-text node-2))
                                            (string-to-number (dom-text node-3))
                                            (string-to-number (dom-text node-4))))
                                  (dom-by-tag (dom-child-by-tag info-node 'rainfallchance) 'period))
                           (dom-text (dom-child-by-tag info-node 'weather)))))
                (dom-by-tag (dom-by-id data area) 'info))
               (insert "\n"))))))))

  (defun weather ()
    (interactive)
    (let ((buffer (get-buffer-create "weather")))
      (mapcar (lambda (weather-area)
                (weather-area-show weather-area buffer))
              weather-areas)
      (switch-to-buffer buffer)))

  (provide 'weather)
#+end_src
*** view-file

#+begin_src emacs-lisp :tangle (expand-tangle-target ".config/emacs/site-lisp/view-file.el")
  (defcustom my/view-file--temp-dir "~/var/tmp/view-file"
    "Directory in which we will work for uncompresssing, decrypting and htmlize.")
  (defvar my/view-file--open-file nil
    "Target file which we will actually open.
  User should not change this value.")
  (defvar my/view-file--remove-files nil
    "List of files which we will remove afterward.
  User should not change this value.")

  ;; TODO: support line/search args to jump to the desired position
  (defun my/view-file (file &optional system)
    "Open FILE in my preferable way.

  if SYSTEM is non-nii open FILE using preferable application in system."
    (setq my/view-file--open-file (expand-file-name file))
    (make-directory my/view-file--temp-dir t)

    ;; decrypt file if it is encrypted
    (when-let* ((match (string-match "\\(.+\\)\.gpg$" my/view-file--open-file))
                (decrypt-file (expand-file-name (file-name-base my/view-file--open-file)
                                                (expand-file-name my/view-file--temp-dir)))
                (context (epg-make-context epa-protocol)))
      (epg-context-set-passphrase-callback context
                                           #'epa-passphrase-callback-function)
      (epg-decrypt-file context my/view-file--open-file decrypt-file)
      (setq my/view-file--open-file decrypt-file)
      (add-to-list 'my/view-file--remove-files decrypt-file))

    ;; uncompress file if it is tarball
    (let* (uncompress-file
           (uncompress-command
            (cond
             ((string-match "\\(.+\\)\\.t\\(ar\\.\\)?gz$" my/view-file--open-file)
              (setq uncompress-file (expand-file-name (file-name-base (match-string 1 my/view-file--open-file))
                                                      my/view-file--temp-dir))
              (format "gzip -dc %s | tar -xf - -C %s"
                      (shell-quote-argument my/view-file--open-file)
                      (shell-quote-argument uncompress-file)))
             ((string-match "\\(.+\\)\\.t\\(ar\\.\\)?zst$" my/view-file--open-file)
              (setq uncompress-file (expand-file-name (file-name-base (match-string 1 my/view-file--open-file))
                                                      my/view-file--temp-dir))
              (format "unzstd -c %s | tar -xf - -C %s"
                      (shell-quote-argument my/view-file--open-file)
                      (shell-quote-argument uncompress-file)))
             ((string-match "\\(.+\\)\\.zip$" my/view-file--open-file)
              (setq uncompress-file (expand-file-name (file-name-base (match-string 1 my/view-file--open-file))
                                                      my/view-file--temp-dir))
              (format "unzip -o -d %s %s"
                      (shell-quote-argument uncompress-file)
                      (shell-quote-argument my/view-file--open-file))))))
      (when (and (stringp uncompress-file)
                 (stringp uncompress-command))
        (make-directory uncompress-file t)
        (call-process-shell-command
         uncompress-command)
        (add-to-list 'my/view-file--remove-files uncompress-file)
        (setq my/view-file--open-file uncompress-file)))

    ;; convert pdf/epub to html
    (let* ((dirname-html
            (expand-file-name (file-relative-name my/view-file--open-file "~")
                              (expand-file-name my/view-file--temp-dir)))
           (filename-html
            (concat (file-name-as-directory dirname-html)
                    "index.html"))
           (command
            (cond
             ((= (call-process-shell-command (format "filetype-cli check --type pdf %s" (shell-quote-argument my/view-file--open-file))) 0)
              (format "cat %s 2>/dev/null | pdftohtml -p -s -noframes -nomerge -nodrm - %s"
                      (shell-quote-argument my/view-file--open-file)
                      (shell-quote-argument filename-html)))
             ((= (call-process-shell-command (format "filetype-cli check --type epub %s" (shell-quote-argument my/view-file--open-file))) 0)
              (format "cat %s 2>/dev/null | pandoc --from=epub --to=html --extract-media=%s - | strip_ruby > %s"
                      (shell-quote-argument my/view-file--open-file)
                      (shell-quote-argument dirname-html)
                      (shell-quote-argument filename-html))))))
      (when (and (null system)
                 (stringp command))
        (unless (file-exists-p filename-html)
          (make-directory dirname-html t)
          (call-process-shell-command command)
          ;; reuse html only if pdf/epub file is not ecrypted
          (when (member my/view-file--open-file my/view-file--remove-files)
            (add-to-list 'my/view-file--remove-files dirname-html)))
        (setq my/view-file--open-file filename-html)))

    ;; open file
    (cond
     ((or system
          (string-match-p "\\.midi?$" my/view-file--open-file)
          (= (call-process-shell-command (format "filetype-cli check --type pdf %s" (shell-quote-argument my/view-file--open-file))) 0)
          (= (call-process-shell-command (format "filetype-cli check --type epub %s" (shell-quote-argument my/view-file--open-file))) 0))
      (let ((process-connection-type nil))
        (call-process-shell-command (format "xdg-open %s" (shell-quote-argument my/view-file--open-file)))
        (sleep-for 3)
        (funcall 'my/view-file--finalize-function)))
     ((or (= (call-process-shell-command (format "filetype-cli check --type playable %s" (shell-quote-argument my/view-file--open-file))) 0)
          (seq-some (lambda (suffix)
                      (string-suffix-p suffix my/view-file--open-file t))
                    '(".m3u" ".mts" ".m2ts")))
      (when-let ((mpv-proc (start-process-shell-command
                            "mpv" nil
                            (format "nohup mpv --force-window %s >/dev/null 2>&1" (shell-quote-argument my/view-file--open-file)))))
        (set-process-sentinel
         mpv-proc
         (lambda (process desc)
           (when (eq (process-status process) 'exit)
             (funcall 'my/view-file--finalize-function))))))
     ((= (call-process-shell-command
          (format "filetype-cli check --type html %s"
                  (shell-quote-argument my/view-file--open-file))) 0)
      (add-hook 'eww-after-render-hook 'my/view-file--eww-finalize-function)
      (eww-open-file my/view-file--open-file))
     ((file-directory-p my/view-file--open-file)
      (dired my/view-file--open-file)
      (funcall 'my/view-file--finalize-function))
     (t
      (find-file my/view-file--open-file)
      (funcall 'my/view-file--finalize-function))))

  (defun my/view-file--finalize-function ()
    "Remove files and initialize variables."
    (mapc (lambda (file)
            (when (stringp file)
              (cond
               ((file-directory-p file)
                (delete-directory file t nil))
               ((file-exists-p file)
                (let ((delete-by-moving-to-trash t))
                  (delete-file file))))))
          my/view-file--remove-files)
    (setq my/view-file--open-file nil
          my/view-file--remove-files nil))

  (defun my/view-file--eww-finalize-function ()
    "Finalize function for `EWW'."
    (remove-hook 'eww-after-render-hook 'my/view-file--eww-finalize-function)
    (funcall 'my/view-file--finalize-function))

  (defun my/view-file-filter-org-link-store-props (&rest plist-orig)
    "Filter PLIST-ORIG to original file name if value of `eww-current-url'
   is in `my/view-file--temp-dir'."
    (let ((plist-filtered (car plist-orig)))
      (if (plist-member plist-filtered :link)
          (plist-put plist-filtered
                     :link
                     (replace-regexp-in-string (format "%s\\(.*\\)/index.html"
                                                       (expand-file-name my/view-file--temp-dir))
                                               (format "%s\\1"
                                                       (expand-file-name "~"))
                                               (plist-get plist-filtered
                                                          :link))))
      (car plist-orig)))

  (advice-add #'org-link-store-props :filter-args
              #'my/view-file-filter-org-link-store-props)

  (provide 'my/view-file)
#+end_src
**** strip_ruby
A program strips all ruby tags in a HTML stream. All HTML contents are expected to be from STDIN and go out as STDOUT. This procedure is mainly for html files converted from pdf and epub files.
Stripping rules are:
- <ruby> tag will be stripped
- <rt> tree for furigana tree will be removed
- <rp> tree contains parenthes for non-ruby-support brouwser will be removed
- <rb> tag for delimiter will be stripped
- <rtc> tree for semantic word will be removed

#+begin_src python :tangle (expand-tangle-target ".local/bin/strip_ruby") :tangle-mode (identity #o755)
  #!/usr/bin/env python3

  import sys
  import lxml.html as html

  INPUT_STR = sys.stdin.read()
  ROOT = html.fromstring(INPUT_STR).getroottree()

  for ruby in ROOT.xpath('//ruby'):
      for rt in ruby.xpath('//rt'):
          rt.drop_tree()
      for rp in ruby.xpath('//rp'):
          rp.drop_tree()
      for rb in ruby.xpath('//rb'):
          rb.drop_tag()
      for rtc in ruby.xpath('//rtc'):
          rtc.drop_tree()
      ruby.drop_tag()

  CONTENT = html.tostring(ROOT, encoding="utf-8", method='html', pretty_print=True)
  print(CONTENT.decode())
#+end_src
