#+SETUPFILE: ./export.setup

#+TITLE: Software Configuration (.files)
#+PROPERTY: header-args       :tangle-mode (identity #o444)
#+PROPERTY: header-args+      :mkdirp yes
#+PROPERTY: tangle-target-dir .files

#+STARTUP: hideblocks

* Noweb References
- my home directory
  #+name: home-dir
  #+begin_src bash
    echo "${HOME}"
  #+end_src
- my user name on system
  #+name: whoami
  #+begin_src bash
    whoami
  #+end_src
- my email address
  #+name: email
  #+begin_src bash
    echo -n "${EMAIL}"
  #+end_src
- user account part of my email
  #+name: account
  #+begin_src bash
    echo -n "${EMAIL}" | cut -d'@' -f1
  #+end_src
- network part of my email
  #+name: my-network
  #+begin_src bash
    echo -n "${EMAIL}" | cut -d'@' -f2
  #+end_src
- utility functions
  #+name: hours-in-sec
  #+begin_src emacs-lisp :var h=1
    (* h 60 60)
  #+end_src

* Bash
- bash profile
  #+BEGIN_SRC bash :tangle (expand-tangle-target ".bash_profile")
    #!/usr/bin/env bash

    if [ -f ~/.bashrc ]; then
       source ~/.bashrc
    fi
  #+END_SRC
- bashrc
  #+BEGIN_SRC bash :tangle (expand-tangle-target ".bashrc")
    #!/usr/bin/env bash

    export VIEWER=less

    USER_PATHS=(
      "${HOME}/usr/bin"
      "${HOME}/.local/bin"
    )
    for path in "${USER_PATHS[@]}"; do
      if [ -d "${path}" ]; then
        export PATH="${path}:$PATH"
      fi
    done

    if [ -e $HOME/.bash_aliases ]; then
      source $HOME/.bash_aliases
    fi
    if [ -e $HOME/.bash_functions ]; then
      source $HOME/.bash_functions
    fi

    # prompt
    MACHINE=$(echo $(uname -n) | awk -F . '{print $1}')
    PS1="[\u@${MACHINE}:\\W]\n\$ "

    # function/variable used in libvterm/emacs
    vterm_printf(){
      if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
      elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
      else
        printf "\e]%s\e\\" "$1"
      fi
    }

    vterm_prompt_end(){
      vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
    }

    PROMPT_COMMAND='echo -ne "\033]0;${HOSTNAME}:${PWD}\007"'

    case ${TERM} in
    dumb)
      ;;
    xterm-256color)
      export LANG=en_US.UTF-8
      PS1=$PS1'\[$(vterm_prompt_end)\]'
      ;;
    ,*)
      export LANG=ja_JP.UTF-8
      ;;
    esac

    export WINEARCH=win64
    export WINEPREFIX=~/.wine
  #+END_SRC
- aliases
  #+begin_src bash :tangle (expand-tangle-target ".bash_aliases")
    alias ..="cd ../"
    alias l="ls -F"
    alias ll="l -lh"
    alias la="l -a"
    alias lal="l -alh"
    alias lld="l -ld"
    alias cp="cp -i"
    alias mv="mv -i"
    alias rm="rm -i"
    alias rmf="rm -rf"
    alias mkdir="mkdir -pv"
    alias rmdir="rmdir -v"
    alias ff='find . -type f -iname'

    alias cputemp='cat /sys/class/thermal/thermal_zone0/temp'
    alias ipaddr="hostname -I | cut -f1 -d' '"
  #+end_src
- functions
  #+begin_src bash :tangle (expand-tangle-target ".bash_functions")
    function cl() {
        DIR="$*";
            # if no DIR given, go home
            if [ $# -lt 1 ]; then
              DIR=$HOME;
        fi;

        builtin cd "${DIR}" && \
          # use your preferred ls command
          ls -F --color=auto
    }

    function cpuinfo {
      cores=$(nproc)
      frequency=$(grep MHz /proc/cpuinfo | head -1 | awk -F ' ' '{print $4" MHz"}')
      model=$(grep "model name" /proc/cpuinfo | head -1 | sed -r 's/^.{13}//')
      echo "CPU Model: $model"
      echo "CPU Cores: $cores"
      echo "Frequency: $frequency"
    }

    function dual() {
      if [ $# -eq 0 ]; then
        du_arg="./* ./.[^.]*"
      else
        du_arg=""
        for v in "$@"
        do
          if [ -f ${v} ]; then
            du_arg="${du_arg} ${v}"
          elif [ -d ${v} ]; then
            du_arg="${du_arg} ${v}/* ${v}/.[^.]*"
          fi
        done
      fi

      ionice -c2 -n7 nice -n19 du -sc ${du_arg} 2>/dev/null
    }

    function mkcdir() {
      mkdir -p -- "$1" && cd -P -- "$1"
    }

    function rms() {
      read -p 'shred all files - are you sure (y/n) ? ' ans
      test x$ans == xy && (
        for file in "$@"; do
          if [ -f "${file}" ]; then
            shred -uzv "${file}"
          elif [ -d "${file}" ]; then
            find "${file}" -type f -exec shred -uzv {} \;
            rm -rf "${file}"
          fi
        done
      )
    }

    # A simple script to check on system resources
    function chksys() {
      clear

      echo "Memory Usage:"
      /usr/bin/free -h

      echo $'\n'$"Disk Usage:"
      /bin/df -h /dev/sd[a-z][1-9] 2>/dev/null

      echo $'\n'$"Uptime:"
      /usr/bin/uptime
    }
  #+end_src
- profile
  #+BEGIN_SRC bash :tangle (expand-tangle-target ".profile")
    # ~/.profile: executed by the command interpreter for login shells.
    # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
    # exists.
    # see /usr/share/doc/bash/examples/startup-files for examples.
    # the files are located in the bash-doc package.

    # the default umask is set in /etc/profile; for setting the umask
    # for ssh logins, install and configure the libpam-umask package.
    #umask 022

    # if running bash
    if [ -n "$BASH_VERSION" ]; then
        # include .bash_profile if it exists
        if [ -f "$HOME/.bash_profile" ]; then
            . "$HOME/.bash_profile"
        fi
    fi

    # set PATH so it includes user's private bin if it exists
    if [ -d "$HOME/bin" ] ; then
        PATH="$HOME/bin:$PATH"
    fi

    # set PATH so it includes user's private bin if it exists
    if [ -d "$HOME/.local/bin" ] ; then
        PATH="$HOME/.local/bin:$PATH"
    fi
  #+END_SRC
** secret parts                                   :crypt:
-----BEGIN PGP MESSAGE-----

hQEMA9uWvE5LJ2ejAQgArGORah6PhZQyWd8kqSGEwIXRkASbFg7cRhVeqngN02Ji
myXYGFNOGf6yhRQb9BWUvOD9+GfGYn8Jp/LlKVRQxIwhZDj1gb6SGcEJeg1qWAQY
AT4aowLdxyDt+rw3p+ezuZU5V2xXV4QHhT721A0+E4EU40FuY0DoHlE7RurSotXw
fyJn2nu70XOyALvM+rsEE+T3HimvZZ1czubN721QBafmA6BaAbbG0xAKqX00DZ4I
EpDA8xAkEupTh5QXIoq45PKifs09gxd2zuzBhUH2XGR75XoriAr/ZJx6INqyuBbQ
Um6lhw6YclvDhkk7tFY4DKw7jHwxEBoNsefJMy/tENKkAQRsZkDUk4hYw0a0VaMf
W8QEyJYqZKZHnhIvOJeawzvF04ryI/ok6LVlySWwwsK8TxNlXImNDr3jqdTTEJVD
esnevCcl5Gon8qiUjFXwX6bomE+T9/jUK88HWJ9G5v2PUS/2QDmbU0o1MU+tUYp+
i4IvaH/QeyE4KQkwJ25yAl6/juJZfXsA9uiWlH9hWhYBMyG+zYxx/kepJqtStCV0
Q7sbt0I=
=sBHC
-----END PGP MESSAGE-----

* SSH
#+begin_src conf  :tangle (expand-tangle-target ".ssh/config")
  Include config.d/*
#+end_src
* abcde
#+BEGIN_SRC conf :tangle (expand-tangle-target ".abcde.conf")
  FDKAACENCOPTS='--bitrate 256k'

  OUTPUTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${TRACKNUM}.${TRACKFILE}'
#+END_SRC
* Git
- git ignore
  #+BEGIN_SRC conf :tangle (expand-tangle-target ".config/git/info/ignore")
    #
    # ~/.gitignote
    #
    ## archive ##
    ,*.zip
    ,*.lzh
    ,*.tar.gz
    ,*.tgz
    ,*.bz2
    ,*.dmg

    ## Compiled object files ##
    ,*.slo
    ,*.lo
    ,*.o
    ,*.obj

    ## Compiled Dynamic libraries ##
    ,*.so
    ,*.dylib
    ,*.dll

    ## Compiled Static libraries ##
    ,*.lai
    ,*.la
    ,*.a
    ,*.lib

    ## Executables ##
    ,*.exe
    ,*.out
    ,*.app

    ## Windows ##
    Thumbs.db
    ehthumbs.db
    Desktop.ini
    $RECYCLE.BIN/
    ,*.cab
    ,*.msi
    ,*.msm
    ,*.msp

    ## Mac ##
    .DS_Store
    .AppleDouble
    .LSOverride
    .Spotlight-V100
    .Trashes
    ._*

    ## Linux ##
    locate.db

    ## version control system ##
    .git/
    .hg/
    .svn/

    ## backup,log ##
    ,*~
    ~*
    ,*.swp
    .swp.*
    ,*.tmp
    ,*.bak
    ,*.old
    ,*.log
    .cache/
    ,*.autosave

    ## Emacs ##
    ,*.elc

    ## Vim ##
    ,*.un~
    Session.vim
    .netrwhist

    ## GNU GLOBAL ##
    GPATH
    GRTAGS
    GTAGS

    ## netbeans ##
    nbproject/
    ## intellij idea ##
    .idea/
    ## eclipse ##
    .settings/
    .project
    .classpath
    .buildpath
    ## XCode ##
    ,*.xcodeproj/*

    ## Build dir ##
    build/
  #+END_SRC
- git attributes
  #+BEGIN_SRC gitattributes :tangle (expand-tangle-target ".config/git/info/attributes")
    ,*.c diff=cpp
    ,*.h diff=cpp
    ,*.cpp diff=cpp
    ,*.hpp diff=cpp
    ,*.cs diff=csharp
    ,*.m diff=objc
    ,*.java diff=java
    ,*.html diff=html
    ,*.xml diff=html
    ,*.pl diff=perl
    ,*.pm diff=perl
    ,*.t diff=perl
    ,*.php diff=php
    ,*.ptml diff=php
    ,*.py diff=python
    ,*.rb diff=ruby
    ,*.js diff=java
    ,*.csv encoding=cp932
    ,*.json diff=json
    ,*.gpg filter=gpg diff=gpg
  #+END_SRC
- git config
  #+BEGIN_SRC gitconfig :noweb tangle :tangle (expand-tangle-target ".config/git/config")
    [core]
            excludesfile = <<home-dir()>>/.config/git/info/ignore
            attributesfile = <<home-dir()>>/.config/git/info/attributes
            editor = emacs
            symlinks = true
            # Unicode
            precomposeunicode = true
            quotepath = true
            autocrlf = false
    [push]
            # simple,matching,upstream,current
            default = simple
    [color]
            ui = auto
            status = auto
            diff = auto
            branch = auto
            interactive = auto
            grep = auto
    [diff]
            patience = true
    [diff "gpg"]
            textconv = gpg --no-tty --decrypt
    [help]
            autocorrect = 0
    [alias]
            co = checkout
            ca = commit -a -v
            ce = commit -v --amend
            st = status --branch --short
            si = status --ignored --short
            branches = branch -a
            remotes = remote -v
            tags = tag -l
            lg = log --graph --all --decorate --abbrev-commit --branches --date=short --pretty=format:\"%C(red)%h%C(reset) %C(green)[%ad]%C(reset) %s %C(cyan)@%an%C(reset) %C(yellow)%d%C(reset)\"
            fp = fetch --prune
            di = diff
            dh = diff --histogram
            dw = diff --word-diff
            dc = diff --cached
            wc = whatchanged
    [user]
            email = 6841207+p-snow@users.noreply.github.com
            name = p-snow
    [credential]
            helper = <<home-dir()>>/.guix-extra-profiles/base/base/bin/pass-git-helper -m <<home-dir()>>/.config/pass-git-helper/git-pass-mapping.ini
  #+END_SRC
- pre-commit
  pre-commit script is useful for checking strings to commit
  # #+begin_src bash :noweb tangle :tangle ./.git/hooks/pre-commit :tangle-mode (identity #o775)
    #!/usr/bin/env bash

    forbiddens=(
      <<home-dir()>>
    )

    . "$(git --exec-path)/git-sh-setup" # for die
    for forbidden in ${forbiddens[@]}
    do
      if git diff-index -p -M --cached HEAD -- \
          | grep '^+' \
          | grep "${forbidden}"; then
        die Blocking commit because string "${forbidden}" detected in patch
      fi
    done
  #+end_src

* Pass
#+begin_src conf :tangle (expand-tangle-target ".config/pass-git-helper/git-pass-mapping.ini")
  [github.com*]
  username_extractor=specific_line
  line_username=2
  target=github.com
  # username_extractor=entry_name
#+end_src
- additional environment variables
  #+BEGIN_SRC bash :tangle (expand-tangle-target ".bashrc")
    export PASSWORD_STORE_CLIP_TIME=25
  #+END_SRC
* mpv
- mpv.conf
  #+begin_src conf :tangle (expand-tangle-target ".config/mpv/mpv.conf")
    ##################
    # video settings #
    ##################

    # Start in fullscreen mode by default.
    fs=yes


    ###########
    # General #
    ###########

    #save-position-on-quit
    no-border                               # no window title bar
    msg-module                              # prepend module name to log messages
    msg-color                               # color log messages on terminal
    term-osd-bar                            # display a progress bar on the terminal
    use-filedir-conf                        # look for additional config files in the directory of the opened file
    pause                                   # no autoplay
    force-window=immediate
    keep-open                               # keep the player open when a file's end is reached
    autofit-larger=100%x95%                 # resize window in case it's larger than W%xH% of the screen
    cursor-autohide-fs-only                 # don't autohide the cursor in window mode, only fullscreen
    # input-media-keys=no                     # enable/disable OSX media keys
    cursor-autohide=1000                    # autohide the curser after 1s

    screenshot-format=png
    screenshot-png-compression=8
    screenshot-template='~/Desktop/%F (%P) %n'

    hls-bitrate=max                         # use max quality for HLS streams


    #########
    # Cache #
    #########

    cache=yes
    cache-default=5000000                   # size in KB
    cache-backbuffer=25000                  # size in KB
    cache-initial=0                         # start playback when your cache is filled up with x kB
    cache-secs=10                           # how many seconds of audio/video to prefetch if the cache is active


    #############
    # OSD / OSC #
    #############

    osd-level=1                             # enable osd and display --osd-status-msg on interaction
    osd-duration=2500                       # hide the osd after x ms
    osd-status-msg='${time-pos} / ${duration}${?percent-pos: (${percent-pos}%)}${?frame-drop-count:${!frame-drop-count==0: Dropped: ${frame-drop-count}}}\n${?chapter:Chapter: ${chapter}}'
    # osd-status-msg='${=time-pos}'         # show raw position

    osd-font='Source Sans Pro'
    osd-font-size=64
    osd-color='#CCFFFFFF'                   # ARGB format
    osd-border-color='#DD322640'            # ARGB format
    #osd-shadow-offset=1                    # pixel width for osd text and progress bar
    osd-bar-align-y=0                       # progress bar y alignment (-1 top, 0 centered, 1 bottom)
    osd-border-size=2                       # size for osd text and progress bar
    osd-bar-h=2                             # height of osd bar as a fractional percentage of your screen height
    osd-bar-w=60                            # width of " " "


    #############
    # Subtitles #
    #############

    sub-use-margins
    sub-ass-force-margins

    demuxer-mkv-subtitle-preroll            # try to correctly show embedded subs when seeking
    sub-auto=fuzzy                          # external subs don't have to match the file name exactly to autoload
    embeddedfonts=yes                       # use embedded fonts for SSA/ASS subs
    sub-fix-timing=no                       # do not try to fix gaps (which might make it worse in some cases)
    sub-ass-force-style=Kerning=yes         # allows you to override style parameters of ASS scripts

    # the following options only apply to subtitles without own styling (i.e. not ASS but e.g. SRT)
    sub-font="Source Sans Pro Semibold"
    sub-font-size=36
    sub-color="#FFFFFFFF"
    sub-border-color="#FF262626"
    sub-border-size=3.2
    sub-shadow-offset=1
    sub-shadow-color="#33000000"
    sub-spacing=0.5


    #############
    # Languages #
    #############

    slang=enm,en,eng,de,deu,ger             # automatically select these subtitles (decreasing priority)
    alang=ja,jp,jpn,en,eng,de,deu,ger       # automatically select these audio tracks (decreasing priority)

    #########
    # Image #
    #########

    image-display-duration=4

    #########
    # Audio #
    #########

    audio-file-auto=fuzzy                   # external audio doesn't has to match the file name exactly to autoload
    audio-pitch-correction=yes              # automatically insert scaletempo when playing with higher speed
    volume-max=200                          # maximum volume in %, everything above 100 results in amplification
    volume=100                              # default volume, 100 = unchanged


    ################
    # Video Output #
    ################

    # Active VOs (and some other options) are set conditionally
    # See here for more information: https://github.com/wm4/mpv-scripts/blob/master/auto-profiles.lua
    # The script was modified to import functions from scripts/auto-profiles-functions.lua

    # Defaults for all profiles
    tscale=catmull_rom                      # sharp: oversample <-> linear (triangle) <-> catmull_rom <-> mitchell <-> gaussian <-> bicubic : smooth
    opengl-early-flush=no
    opengl-pbo=yes


    [high-quality]
    profile-desc=cond:is_desktop() and get('width', math.huge) < 3840
    scale=ewa_lanczossharp
    cscale=ewa_lanczossoft
    dscale=mitchell
    scale-antiring=0.7
    cscale-antiring=0.7
    dither-depth=auto
    correct-downscaling=yes
    sigmoid-upscaling=yes
    deband=yes
    hwdec=no

    [mid-quality]
    profile-desc=cond:(is_laptop() and not on_battery() and get('width', math.huge) < 1920) or (is_desktop() and get('width', math.huge) >= 3840)
    scale=spline36
    cscale=bilinear
    dscale=mitchell
    scale-antiring=1.0
    cscale-antiring=1.0
    dither-depth=auto
    correct-downscaling=yes
    sigmoid-upscaling=yes
    deband=yes
    hwdec=no

    [low-quality]
    profile-desc=cond:is_laptop() and (on_battery() or get('width', math.huge) >= 1920)
    scale=bilinear
    cscale=bilinear
    dscale=bilinear
    scale-antiring=0.0
    cscale-antiring=0.0
    dither-depth=no
    correct-downscaling=no
    sigmoid-upscaling=no
    deband=no
    hwdec=auto

    [60FPS]
    profile-desc=cond:is_laptop() and get('container-fps', 0) >= 59
    scale=bilinear
    cscale=bilinear

    [4K]
    profile-desc=cond:get('width', -math.huge) >= 3840
    vd-lavc-threads=32

    [4K-inverted]
    profile-desc=cond:get('width', -math.huge) < 3840
    vd-lavc-threads=0


    [default]


    ###################################
    # Protocol Specific Configuration #
    ###################################

    [protocol.https]
    #cache=yes
    #cache-default=500000                    # size in KB
    #cache-backbuffer=250000                 # size in KB
    cache-secs=100                          # how many seconds of audio/video to prefetch
    user-agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0'

    [protocol.http]
    #cache=yes
    #cache-default=500000                    # size in KB
    #cache-backbuffer=250000                 # size in KB
    cache-secs=100                          # how many seconds of audio/video to prefetch
    user-agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0'

    [extension.gif]
    cache=no
    no-pause
    loop-file=yes

    [extension.webm]
    #cache=no
    #no-pause
    #loop-file=yes
  #+end_src
- input.conf
  #+begin_src conf :tangle (expand-tangle-target ".config/mpv/input.conf")
    # mpv keybindings
    #
    # Location of user-defined bindings: ~/.config/mpv/input.conf
    #
    # Lines starting with # are comments. Use SHARP to assign the # key.
    # Copy this file and uncomment and edit the bindings you want to change.
    #
    # List of commands and further details: DOCS/man/input.rst
    # List of special keys: --input-keylist
    # Keybindings testing mode: mpv --input-test --force-window --idle
    #
    # Use 'ignore' to unbind a key fully (e.g. 'ctrl+a ignore').
    #
    # Strings need to be quoted and escaped:
    #   KEY show-text "This is a single backslash: \\ and a quote: \" !"
    #
    # You can use modifier-key combinations like Shift+Left or Ctrl+Alt+x with
    # the modifiers Shift, Ctrl, Alt and Meta (may not work on the terminal).
    #
    # The default keybindings are hardcoded into the mpv binary.
    # You can disable them completely with: --no-input-default-bindings

    # Developer note:
    # On compilation, this file is baked into the mpv binary, and all lines are
    # uncommented (unless '#' is followed by a space) - thus this file defines the
    # default key bindings.

    # If this is enabled, treat all the following bindings as default.
    #default-bindings start

    #MOUSE_BTN0 ignore                      # don't do anything
    #MOUSE_BTN0_DBL cycle fullscreen        # toggle fullscreen on/off
    #MOUSE_BTN2 cycle pause                 # toggle pause on/off
    #MOUSE_BTN3 seek 10
    #MOUSE_BTN4 seek -10
    #MOUSE_BTN5 add volume -2
    #MOUSE_BTN6 add volume 2

    # Mouse wheels, touchpad or other input devices that have axes
    # if the input devices supports precise scrolling it will also scale the
    # numeric value accordingly
    #AXIS_UP    seek 10
    #AXIS_DOWN  seek -10
    #AXIS_LEFT  seek 5
    #AXIS_RIGHT seek -5

    ## Seek units are in seconds, but note that these are limited by keyframes
    #RIGHT seek  5
    #LEFT  seek -5
    #UP    seek  60
    #DOWN  seek -60
    RIGHT  seek  5
    LEFT   seek -5
    UP     seek -60
    DOWN   seek  60
    Ctrl+f seek  3
    Ctrl+b seek -3
    Ctrl+p seek -60
    Ctrl+n seek  60
    # Do smaller, always exact (non-keyframe-limited), seeks with shift.
    # Don't show them on the OSD (no-osd).
    #Shift+RIGHT no-osd seek  1 exact
    #Shift+LEFT  no-osd seek -1 exact
    #Shift+UP    no-osd seek  5 exact
    #Shift+DOWN  no-osd seek -5 exact
    # Skip to previous/next subtitle (subject to some restrictions; see manpage)
    #Ctrl+LEFT   no-osd sub-seek -1
    #Ctrl+RIGHT  no-osd sub-seek  1
    #PGUP add chapter 1                     # skip to next chapter
    #PGDWN add chapter -1                   # skip to previous chapter
    PGUP add chapter -1                     # skip to next chapter
    PGDWN add chapter 1                     # skip to previous chapter
    #Shift+PGUP seek 600
    #Shift+PGDWN seek -600
    #[ multiply speed 0.9091                # scale playback speed
    #] multiply speed 1.1
    #{ multiply speed 0.5
    #} multiply speed 2.0
    #BS set speed 1.0                       # reset speed to normal
    #q quit
    #Q quit-watch-later
    #q {encode} quit 4
    #ESC set fullscreen no
    #ESC {encode} quit 4
    #p cycle pause                          # toggle pause/playback mode
    #. frame-step                           # advance one frame and pause
    #, frame-back-step                      # go back by one frame and pause
    #SPACE cycle pause
    ? playlist-shuffle                      # skip to random file
    #> playlist-next                        # skip to next file
    #ENTER playlist-next                    # skip to next file
    #< playlist-prev                        # skip to previous file
    #O no-osd cycle-values osd-level 3 1    # cycle through OSD mode
    #o show-progress
    #P show-progress
    #I show-text "${filename}"              # display filename in osd
    #z add sub-delay -0.1                   # subtract 100 ms delay from subs
    #x add sub-delay +0.1                   # add
    #ctrl++ add audio-delay 0.100           # this changes audio/video sync
    #ctrl+- add audio-delay -0.100
    #9 add volume -2
    #/ add volume -2
    #0 add volume 2
    #* add volume 2
    #m cycle mute
    #1 add contrast -1
    #2 add contrast 1
    #3 add brightness -1
    #4 add brightness 1
    #5 add gamma -1
    #6 add gamma 1
    #7 add saturation -1
    #8 add saturation 1
    #Alt+0 set window-scale 0.5
    #Alt+1 set window-scale 1.0
    #Alt+2 set window-scale 2.0
    # toggle deinterlacer (automatically inserts or removes required filter)
    #d cycle deinterlace
    #r add sub-pos -1                       # move subtitles up
    #t add sub-pos +1                       #                down
    #v cycle sub-visibility
    # stretch SSA/ASS subtitles with anamorphic videos to match historical
    #V cycle sub-ass-vsfilter-aspect-compat
    # switch between applying no style overrides to SSA/ASS subtitles, and
    # overriding them almost completely with the normal subtitle style
    #u cycle-values sub-ass-style-override "force" "no"
    #j cycle sub                            # cycle through subtitles
    #J cycle sub down                       # ...backwards
    #SHARP cycle audio                      # switch audio streams
    #_ cycle video
    #T cycle ontop                          # toggle video window ontop of other windows
    #f cycle fullscreen                     # toggle fullscreen
    #s async screenshot                     # take a screenshot
    #S async screenshot video               # ...without subtitles
    #Ctrl+s async screenshot window         # ...with subtitles and OSD, and scaled
    #Alt+s screenshot each-frame            # automatically screenshot every frame
    #w add panscan -0.1                     # zoom out with -panscan 0 -fs
    #e add panscan +0.1                     #      in
    # cycle video aspect ratios; "-1" is the container aspect
    #A cycle-values video-aspect "16:9" "4:3" "2.35:1" "-1"
    #POWER quit
    #PLAY cycle pause
    #PAUSE cycle pause
    #PLAYPAUSE cycle pause
    #STOP quit
    #FORWARD seek 60
    #REWIND seek -60
    #NEXT playlist-next
    #PREV playlist-prev
    #VOLUME_UP add volume 2
    #VOLUME_DOWN add volume -2
    #MUTE cycle mute
    #CLOSE_WIN quit
    #CLOSE_WIN {encode} quit 4
    #E cycle edition                        # next edition
    #l ab-loop                              # Set/clear A-B loop points
    #L cycle-values loop-file "inf" "no"    # toggle infinite looping
    #ctrl+c quit 4

    # Apple Remote section
    #AR_PLAY cycle pause
    #AR_PLAY_HOLD quit
    #AR_CENTER cycle pause
    #AR_CENTER_HOLD quit
    #AR_NEXT seek 10
    #AR_NEXT_HOLD seek 120
    #AR_PREV seek -10
    #AR_PREV_HOLD seek -120
    #AR_MENU show-progress
    #AR_MENU_HOLD cycle mute
    #AR_VUP add volume 2
    #AR_VUP_HOLD add chapter 1
    #AR_VDOWN add volume -2
    #AR_VDOWN_HOLD add chapter -1

    # For tv://
    #h cycle tv-channel -1                  # previous channel
    #k cycle tv-channel +1                  # next channel

    # For dvb://
    #H cycle dvb-channel-name -1            # previous channel
    #K cycle dvb-channel-name +1            # next channel

    #
    # Legacy bindings (may or may not be removed in the future)
    #
    #! add chapter -1                       # skip to previous chapter
    #@ add chapter 1                        #         next

    #
    # Not assigned by default
    # (not an exhaustive list of unbound commands)
    #

    # ? add sub-scale +0.1                  # increase subtitle font size
    # ? add sub-scale -0.1                  # decrease subtitle font size
    # ? sub-step -1                         # immediately display next subtitle
    # ? sub-step +1                         #                     previous
    # ? cycle angle                         # switch DVD/Bluray angle
    # ? add balance -0.1                    # adjust audio balance in favor of left
    Z add balance -0.1                    # adjust audio balance in favor of left
    # ? add balance 0.1                     #                                  right
    X add balance 0.1                     #                                  right
    # ? cycle sub-forced-only               # toggle DVD forced subs
    # ? cycle program                       # cycle transport stream programs
    # ? stop                                # stop playback (quit or enter idle mode)
  #+end_src
- scripts
  #+begin_src lua :tangle (expand-tangle-target ".config/mpv/scripts/delete_file.lua")
    local utils = require "mp.utils"

    del_list = {}

    function contains_item(l, i)
       for k, v in pairs(l) do
          if v == i then
             mp.osd_message("undeleting current file")
             l[k] = nil
             return true
          end
       end
       mp.osd_message("deleting current file")
       return false
    end

    function mark_delete()
       local work_dir = mp.get_property_native("working-directory")
       local file_path = mp.get_property_native("path")
       local s = file_path:find(work_dir, 0, true)
       local final_path
       if s and s == 0 then
          final_path = file_path
       else
          final_path = utils.join_path(work_dir, file_path)
       end
       if not contains_item(del_list, final_path) then
          table.insert(del_list, final_path)
       end
    end

    function delete(e)
       if e.reason == "quit" then
          for i, v in pairs(del_list) do
             print("deleting: "..v)
             os.remove(v)
          end
       end
    end

    mp.add_key_binding("ctrl+DEL", "delete_file", mark_delete)
    mp.register_event("end-file", delete)
  #+end_src

* unison
- music directory syncing
  #+begin_src conf :noweb tangle :tangle (expand-tangle-target ".unison/music.prf")
    # Roots of the synchronization
    root = <<home-dir()>>/mnt/ruizu/Music
    root = <<home-dir()>>/Audio

    # Paths to synchronize
    path = .

    # Ruizu's file system is FAT
    fat = true

    # Overwrite by newer file on confliction
    prefer = newer

    # Show nothing
    silent = true
    confirmbigdel = false

    # Do fast checking
    fastcheck = true

    # Log settings
    log = true
    logfile = <<home-dir()>>/.local/state/log/log/unison/music.log

  #+end_src
- doc directory backup
  #+begin_src conf :noweb tangle :tangle (expand-tangle-target ".unison/doc.prf")
    # Roots of the synchronization
    root = <<home-dir()>>/mnt/ns01
    root = <<home-dir()>>

    # Paths to synchronize
    path = doc

    # Overwrite by newer file on confliction
    prefer = newer

    # Use this command for displaying diffs
    diff = diff -y -W 79 --suppress-common-lines

    # Write down synchronization activity on log file rather than show in stdout
    auto = true
    confirmbigdel = false
    silent = true
    log = true
    logfile = <<home-dir()>>/.local/state/log/unison/doc.log

    # Use inode number to verify identity rather than ckeck whole byte sequence
    fastcheck = true

    # Abort if device is not mounted
    mountpoint = doc
  #+end_src
* crontab
- crontab job definitions for my private PC
  #+begin_src conf :noweb tangle :tangle (expand-tangle-target ".config/crontab/pc01")
    MAILTO="<<email()>>"

    BIN_DIR="<<home-dir()>>/bin"
    LOG_DIR="<<home-dir()>>/.local/state/log"

    0 1 * * * /bin/bash -ci "snapshot.sh >> $LOG_DIR/snapshot.log 2>&1"
    0 2 * * * /bin/bash -ci "declutter_trash >> $LOG_DIR/declutter_trash.log 2>&1"
    0 3,15 * * * /bin/bash -ci "gitsync-local <<home-dir()>>/repos/ >> $LOG_DIR/gitsync-local.log 2>&1"
    5 3,15 * * * /bin/bash -ci "gitsync-remote <<home-dir()>>/repos/ >> $LOG_DIR/gitsync-remote.log 2>&1"
  #+end_src
- how to activate cron jobs
  1. load cron job definition file
     : $ crontab ~/.config/crontab/pc01
* Aspell
aspell - interactive spell checker
#+begin_src conf :tangle (expand-tangle-target ".aspell.conf")
  lang en_US
#+end_src
* asdf-vm
Extendable version manager
- call for init script in bashrc
  #+begin_src bash :tangle (expand-tangle-target ".bashrc")
    . $HOME/.asdf/asdf.sh
    . $HOME/.asdf/completions/asdf.bash

    export RUBYLIB=${RUBYLIB}:${HOME}/.local/lib
  #+end_src
- define versions
  #+begin_src conf :comments noweb :tangle (expand-tangle-target ".tool-versions")
    ruby 2.6.8
    python 3.8.5
  #+end_src

  steps to install tools for specific versions
  1. install plugins
     : $ asdf plugin add ruby
     : $ asdf plugin add python

  2. install tools
     : $ cd ~ && asdf install

** asdf-ruby
#+begin_src conf :comments noweb :tangle (expand-tangle-target ".default-gems")
  thor 1.1.0
  pry 0.14.1
  rubocop
  exifr 1.2.6
  streamio-ffmpeg
#+end_src
** asdf-python
#+begin_src python :tangle (expand-tangle-target ".default-python-packages")
  lxml
  jedi
  ical2orgpy
  Send2Trash
#+end_src
* xkeysnail
- config.py
  #+begin_src python :tangle (expand-tangle-target ".config/xkeysnail/config.py")
  # -*- coding: utf-8 -*-

  import re
  from xkeysnail.transform import *

  define_multipurpose_modmap({
      # SandS
      Key.SPACE: [Key.SPACE, Key.LEFT_SHIFT],

      # Enter is enter when pressed and released. Control when held down.
      Key.ENTER: [Key.ENTER, Key.RIGHT_CTRL],

      Key.LEFT_SHIFT: [Key.EQUAL, Key.LEFT_SHIFT],
      Key.RIGHT_SHIFT: [Key.MINUS, Key.RIGHT_SHIFT],
  })

  define_modmap({
      Key.LEFT_CTRL: Key.CAPSLOCK,
      Key.CAPSLOCK: Key.LEFT_CTRL,
      Key.SYSRQ: Key.RIGHT_META,
  })

  define_keymap(None, {
      K("C-Shift-a"): K("KEY_1"),
      K("C-Shift-s"): K("KEY_2"),
      K("C-Shift-d"): K("KEY_3"),
      K("C-Shift-f"): K("KEY_4"),
      K("C-Shift-g"): K("KEY_5"),
      K("C-Shift-h"): K("KEY_6"),
      K("C-Shift-j"): K("KEY_7"),
      K("C-Shift-k"): K("KEY_8"),
      K("C-Shift-l"): K("KEY_9"),
      K("C-Shift-semicolon"): K("KEY_0"),
  })


  # # [Conditional modmap] Change modifier keys in certain applications
  # define_conditional_modmap(re.compile(r'Emacs'), {
  #     Key.RIGHT_CTRL: Key.ESC,
  # })

  # # [Multipurpose modmap] Give a key two meanings. A normal key when pressed and
  # # released, and a modifier key when held down with another key. See Xcape,
  # # Carabiner and caps2esc for ideas and concept.
  # define_multipurpose_modmap(
  #     # Enter is enter when pressed and released. Control when held down.
  #     {Key.ENTER: [Key.ENTER, Key.RIGHT_CTRL]}

  #     # Capslock is escape when pressed and released. Control when held down.
  #     # {Key.CAPSLOCK: [Key.ESC, Key.LEFT_CTRL]
  #     # To use this example, you can't remap capslock with define_modmap.
  # )


  # # Keybindings for Firefox/Chrome
  # define_keymap(re.compile("Firefox|Google-chrome"), {
  #     # Ctrl+Alt+j/k to switch next/previous tab
  #     K("C-M-j"): K("C-TAB"),
  #     K("C-M-k"): K("C-Shift-TAB"),
  #     # Type C-j to focus to the content
  #     K("C-j"): K("C-f6"),
  #     # very naive "Edit in editor" feature (just an example)
  #     K("C-o"): [K("C-a"), K("C-c"), launch(["gedit"]), sleep(0.5), K("C-v")]
  # }, "Firefox and Chrome")

  # # Keybindings for Zeal https://github.com/zealdocs/zeal/
  # define_keymap(re.compile("Zeal"), {
  #     # Ctrl+s to focus search area
  #     K("C-s"): K("C-k"),
  # }, "Zeal")

  # # Emacs-like keybindings in non-Emacs applications
  # define_keymap(lambda wm_class: wm_class not in ("Emacs", "URxvt"), {
  #     # Cursor
  #     K("C-b"): with_mark(K("left")),
  #     K("C-f"): with_mark(K("right")),
  #     K("C-p"): with_mark(K("up")),
  #     K("C-n"): with_mark(K("down")),
  #     K("C-h"): with_mark(K("backspace")),
  #     # Forward/Backward word
  #     K("M-b"): with_mark(K("C-left")),
  #     K("M-f"): with_mark(K("C-right")),
  #     # Beginning/End of line
  #     K("C-a"): with_mark(K("home")),
  #     K("C-e"): with_mark(K("end")),
  #     # Page up/down
  #     K("M-v"): with_mark(K("page_up")),
  #     K("C-v"): with_mark(K("page_down")),
  #     # Beginning/End of file
  #     K("M-Shift-comma"): with_mark(K("C-home")),
  #     K("M-Shift-dot"): with_mark(K("C-end")),
  #     # Newline
  #     K("C-m"): K("enter"),
  #     K("C-j"): K("enter"),
  #     K("C-o"): [K("enter"), K("left")],
  #     # Copy
  #     K("C-w"): [K("C-x"), set_mark(False)],
  #     K("M-w"): [K("C-c"), set_mark(False)],
  #     K("C-y"): [K("C-v"), set_mark(False)],
  #     # Delete
  #     K("C-d"): [K("delete"), set_mark(False)],
  #     K("M-d"): [K("C-delete"), set_mark(False)],
  #     # Kill line
  #     K("C-k"): [K("Shift-end"), K("C-x"), set_mark(False)],
  #     # Undo
  #     K("C-slash"): [K("C-z"), set_mark(False)],
  #     K("C-Shift-ro"): K("C-z"),
  #     # Mark
  #     K("C-space"): set_mark(True),
  #     K("C-M-space"): with_or_set_mark(K("C-right")),
  #     # Search
  #     K("C-s"): K("F3"),
  #     K("C-r"): K("Shift-F3"),
  #     K("M-Shift-key_5"): K("C-h"),
  #     # Cancel
  #     K("C-g"): [K("esc"), set_mark(False)],
  #     # Escape
  #     K("C-q"): escape_next_key,
  #     # C-x YYY
  #     K("C-x"): {
  #         # C-x h (select all)
  #         K("h"): [K("C-home"), K("C-a"), set_mark(True)],
  #         # C-x C-f (open)
  #         K("C-f"): K("C-o"),
  #         # C-x C-s (save)
  #         K("C-s"): K("C-s"),
  #         # C-x k (kill tab)
  #         K("k"): K("C-f4"),
  #         # C-x C-c (exit)
  #         K("C-c"): K("C-q"),
  #         # cancel
  #         K("C-g"): pass_through_key,
  #         # C-x u (undo)
  #         K("u"): [K("C-z"), set_mark(False)],
  #     }
  # }, "Emacs-like keys")
  #+end_src
- xkeysnail.service
  #+begin_src conf :tangle (expand-tangle-target ".config/systemd/user/xkeysnail.service")
    [Unit]
    Description=xkeysnail

    [Service]
    KillMode=process
    ExecStart=/bin/bash -ic '%h/.local/bin/pwsudo %h/.guix-extra-profiles/base/base/bin/xkeysnail --watch --quiet %h/.config/xkeysnail/config.py'
    ExecStartPre=/usr/bin/xhost +SI:localuser:root
    Type=simple
    Restart=always
    # Update DISPLAY to be the same as `echo $DISPLAY` on your graphical terminal.
    Environment=DISPLAY=:0
    EnvironmentFile=%h/.bashrc

    [Install]
    # WantedBy=graphical.target
    WantedBy=default.target
  #+end_src
** how to make xkeysnail daemonize
1. Install xkeysnail on guix
2. Start systemd service for xkeysnail
   : $ systemctl --user enable xkeysnail
   : $ systemctl --user start xkeysnail
* fstab
- /etc/fstab for pc01, my main production machine
  #+begin_src conf :noweb tangle :tangle ~/tmp/pc01.fstab
    # subvolumes in nvme SSD
    PARTUUID=df1c4a4c-e0c9-48fb-b5e0-826fb274bd94 /mnt/nvme01/ btrfs x-systemd.defaults,nofail,subvolid=5 0 2

    PARTUUID=df1c4a4c-e0c9-48fb-b5e0-826fb274bd94 <<home-dir()>>/data btrfs noauto,x-systemd.automount,x-systemd.device-timeout=5,nofail,relatime,space_cache,compress=zstd,subvolid=376 0 0

    <<fstab-common>>
  #+end_src

- /etc/fstab for pc02, my sub machine
  #+begin_src conf :noweb tangle :tangle ~/tmp/pc02.fstab
    <<fstab-common>>
  #+end_src

- detachable devices
  #+begin_src conf :noweb yes :noweb-ref fstab-common
    # btrfs subvolumes in external SSD
    UUID=98422431-b089-4dc0-b326-2693c19ace4e /mnt/ssd01/ btrfs x-systemd.defaults,nofail,subvolid=5 0 2

    PARTUUID=2b97745f-01 <<home-dir()>>/doc btrfs noauto,x-systemd.automount,x-systemd.device-timeout=5,nofail,relatime,space_cache,compress=zstd,subvolid=710 0 0
    PARTUUID=2b97745f-01 <<home-dir()>>/share btrfs noauto,x-systemd.automount,x-systemd.device-timeout=5,nofail,relatime,space_cache,compress=zstd,subvolid=1547 0 0

    # btrfs subvolumes in external HDD
    PARTUUID=71f7ecd2-01 /mnt/hdd01 btrfs x-systemd.defaults,nofail,subvolid=5 0 2


    <<home-dir()>>/.guix-extra-profiles/base/base/bin/sshfs#<<account()>>@ns01:/home/<<account()>>/share /mnt/ns01 fuse defaults,x-systemd.nofail,allow_other,nonempty,IdentityFile=<<home-dir()>>/.ssh/id_rsa,ServerAliveInterval=60,_netdev 0 2
    <<home-dir()>>/.guix-extra-profiles/base/base/bin/sshfs#<<account()>>@sv04.<<my-network()>>:/home/<<account()>> /mnt/sv04 fuse defaults,x-systemd.nofail,allow_other,nonempty,IdentityFile=<<home-dir()>>/.ssh/id_rsa,ServerAliveInterval=60,_netdev 0 2
  #+end_src

* GnuPG (gpg)
[[https://wiki.archlinux.org/title/GnuPG][GnuPG - ArchWiki]]

- gpg config
  #+begin_src conf :noweb tangle :tangle (expand-tangle-target ".gnupg/gpg.conf")
    with-keygrip
  #+end_src
- gpg-agent config
  #+begin_src conf :noweb tangle :tangle (expand-tangle-target ".gnupg/gpg-agent.conf")
    # pinentry-program /usr/bin/pinentry-curses
    pinentry-program /usr/bin/pinentry
    allow-emacs-pinentry
    allow-loopback-pinentry
    enable-ssh-support
    default-cache-ttl <<hours-in-sec(h=24)>>
    default-cache-ttl-ssh <<hours-in-sec(h=48)>>
  #+end_src
- mandatory config to use pinentry-curses for gpg-agent

  #+begin_src shell :tangle (expand-tangle-target ".bashrc")
    export GPG_TTY=$(tty)

    # Refresh gpg-agent tty in case user switches into an X session
    gpg-connect-agent updatestartuptty /bye >/dev/null
  #+end_src

  #+begin_src conf :tangle (expand-tangle-target ".ssh/config")
    Match host * exec "gpg-connect-agent UPDATESTARTUPTTY /bye"
  #+end_src

* GNU Guix

#+begin_src bash :tangle (expand-tangle-target ".bashrc")
  GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
  # uncomment next line if you'd like to acticate specific profiles under ~/.guix-extra-profiles
  # ACTIVE_PROFILE_NAMES=(base emacs)

  profiles=
  if [ ${#ACTIVE_PROFILE_NAMES[@]} -eq 0 ]; then
    profiles="${GUIX_EXTRA_PROFILES}/*"
  else
    for name in ${ACTIVE_PROFILE_NAMES[@]}; do
      profiles=("${profiles[@]}" "${GUIX_EXTRA_PROFILES}/${name}")
    done
  fi

  for profile in ${profiles[@]}; do
    GUIX_PROFILE="${profile}/$(basename ${profile})"
    if [ -f ${GUIX_PROFILE}/etc/profile ]; then
      . "${GUIX_PROFILE}"/etc/profile
    fi
  done

  export GUIX_PROFILE="$HOME/.guix-profile"
  . "$GUIX_PROFILE/etc/profile"

  export GUIX_PROFILE="$HOME/.config/guix/current"
  . "$GUIX_PROFILE/etc/profile"

  export GUIX_LOCPATH="$HOME/.guix-profile/lib/locale"
#+end_src

** Channel definitions

#+begin_src scheme :tangle (expand-tangle-target ".config/guix/base-channels.scm")
  (list (channel
         (name 'flat)
         (url "https://github.com/flatwhatson/guix-channel.git"))
        (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix"))
        (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")))
#+end_src

** Manifests
- base
  #+begin_src scheme :noweb yes :tangle (expand-tangle-target ".config/guix/manifests/base.scm")
    (specifications->manifest
     '("sshfs"
       "xkeysnail"
       "ripgrep"
       ;; "gnupg"
       "font-adobe-source-han-sans"
       "fontconfig"
       "global"
       "lilypond"
       "wget"
       "openssh"
       "password-store"
       "pwgen"
       "tree"
       "poppler"
       "pass-git-helper"
       "git"
       "stow"
       "shellcheck"
       "pandoc"
       "nss-certs"
       "openssl"
       "imagemagick"
       "curl"
       "glibc-locales"
       "pulseaudio"
       <<base-pkgs>>))
  #+end_src
- media
  #+begin_src scheme :noweb yes :tangle (expand-tangle-target ".config/guix/manifests/media.scm")
    (specifications->manifest
     '("abcde"
       "krita"
       "gimp"
       "kdenlive"
       "obs"
       "cdrtools"
       "dvdbackup"
       "easytag"
       "libdvdnav"
       "vlc"
       "handbrake"
       "youtube-dl"
       "mpv"
       "ffmpeg"
       "libdvdcss"
       "gcompris-qt"
       "dav1d"
       "ddrescue"
       <<media-pkgs>>))
  #+end_src
- devel (software development)
  #+begin_src scheme :noweb yes :tangle (expand-tangle-target ".config/guix/manifests/devel.scm")
    (specifications->manifest
     '("make"
       "llvm"
       "cmake"
       "libtool"
       "texinfo"
       <<devel-pkgs>>))
  #+end_src
- wine
  #+begin_src scheme :noweb yes :tangle (expand-tangle-target ".config/guix/manifests/wine.scm")
    (specifications->manifest
     '("wine64"
       "winetricks"))
  #+end_src
** Activating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the =~/.config/guix/manifests= folder and then installs those profiles for the first time.  For example:

: activate-profiles base emacs

#+begin_src sh :tangle :tangle (expand-tangle-target ".local/bin/activate-profiles") :shebang #!/bin/sh :tangle-mode (identity #o755)
  GREEN='\033[1;32m'
  RED='\033[1;30m'
  NC='\033[0m'
  GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

  profiles=$*
  if [ $# -eq 0 ]; then
      profiles="$HOME/.config/guix/manifests/*.scm";
  fi

  for profile in $profiles; do
    # Remove the path and file extension, if any
    profileName=$(basename $profile)
    profileName="${profileName%.*}"
    profilePath="$GUIX_EXTRA_PROFILES/$profileName"
    manifestPath=$HOME/.config/guix/manifests/$profileName.scm

    if [ -f $manifestPath ]; then
      echo
      echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
      echo

      mkdir -p $profilePath
      guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

      # Source the new profile
      GUIX_PROFILE="$profilePath/$profileName"
      if [ -f $GUIX_PROFILE/etc/profile ]; then
          . "$GUIX_PROFILE"/etc/profile
      else
          echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
      fi
    else
      echo "No profile found at path" $profilePath
    fi
  done
#+end_src
** Updating Channels

This script makes it easy to update all channels to the latest commit based on an original channel file.

: update-channels

#+begin_src sh :tangle (expand-tangle-target ".local/bin/update-channels") :shebang #!/bin/sh :tangle-mode (identity #o755)
    guix pull --channels=$HOME/.config/guix/base-channels.scm
    guix describe --format=channels > ~/.config/guix/channels.scm
#+end_src
* SKK

SKK is Simple Kana to Kanji conversion program, an input method of Japanese.
- TODO: following programs have no guix package.
  It is better to write my own one for my reproducible system.
  + [[https://github.com/skk-dev/skktools][skktools]]
  + ibus-skk
* Jack

#+begin_src scheme :noweb-ref media-pkgs
  "qjackctl"
  "qsynth"
  "jack-keyboard"
#+end_src

#+begin_src conf :tangle (expand-tangle-target ".jackdrc")
  /usr/bin/jackd -dalsa -dhw:0 -r44100 -p1024 -n3 -Xseq
#+end_src
